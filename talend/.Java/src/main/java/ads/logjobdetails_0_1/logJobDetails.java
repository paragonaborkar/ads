// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ads.logjobdetails_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.ADSStringUtils;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: logJobDetails Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.0.20170510_1410
 * @status 
 */
public class logJobDetails implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(JOB_NAME != null){
				
					this.setProperty("JOB_NAME", JOB_NAME.toString());
				
			}
			
			if(JOB_START_TIME != null){
				
					this.setProperty("JOB_START_TIME", JOB_START_TIME.toString());
				
			}
			
			if(JOB_END_TIME != null){
				
					this.setProperty("JOB_END_TIME", JOB_END_TIME.toString());
				
			}
			
			if(JOB_LOG_TYPE != null){
				
					this.setProperty("JOB_LOG_TYPE", JOB_LOG_TYPE.toString());
				
			}
			
			if(JOB_SUBMITTED_BY != null){
				
					this.setProperty("JOB_SUBMITTED_BY", JOB_SUBMITTED_BY.toString());
				
			}
			
			if(JOB_STATUS != null){
				
					this.setProperty("JOB_STATUS", JOB_STATUS.toString());
				
			}
			
			if(JOB_ID != null){
				
					this.setProperty("JOB_ID", JOB_ID.toString());
				
			}
			
			if(OAUTH_BEARER_TOKEN != null){
				
					this.setProperty("OAUTH_BEARER_TOKEN", OAUTH_BEARER_TOKEN.toString());
				
			}
			
			if(RESPONSE_RESOURCE_XPATH != null){
				
					this.setProperty("RESPONSE_RESOURCE_XPATH", RESPONSE_RESOURCE_XPATH.toString());
				
			}
			
			if(REST_URL_BASE != null){
				
					this.setProperty("REST_URL_BASE", REST_URL_BASE.toString());
				
			}
			
		}

public String JOB_NAME;
public String getJOB_NAME(){
	return this.JOB_NAME;
}
public String JOB_START_TIME;
public String getJOB_START_TIME(){
	return this.JOB_START_TIME;
}
public String JOB_END_TIME;
public String getJOB_END_TIME(){
	return this.JOB_END_TIME;
}
public String JOB_LOG_TYPE;
public String getJOB_LOG_TYPE(){
	return this.JOB_LOG_TYPE;
}
public String JOB_SUBMITTED_BY;
public String getJOB_SUBMITTED_BY(){
	return this.JOB_SUBMITTED_BY;
}
public String JOB_STATUS;
public String getJOB_STATUS(){
	return this.JOB_STATUS;
}
public String JOB_ID;
public String getJOB_ID(){
	return this.JOB_ID;
}
public String OAUTH_BEARER_TOKEN;
public String getOAUTH_BEARER_TOKEN(){
	return this.OAUTH_BEARER_TOKEN;
}
public String RESPONSE_RESOURCE_XPATH;
public String getRESPONSE_RESOURCE_XPATH(){
	return this.RESPONSE_RESOURCE_XPATH;
}
public String REST_URL_BASE;
public String getREST_URL_BASE(){
	return this.REST_URL_BASE;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "logJobDetails";
	private final String projectName = "ADS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				logJobDetails.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(logJobDetails.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTClient_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractXMLField_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTClient_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_2_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_2_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_2_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_2_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class mainStruct implements routines.system.IPersistableRow<mainStruct> {
    final static byte[] commonByteArrayLock_ADS_logJobDetails = new byte[0];
    static byte[] commonByteArray_ADS_logJobDetails = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String submittedBy;

				public String getSubmittedBy () {
					return this.submittedBy;
				}
				
			    public String submissionTime;

				public String getSubmissionTime () {
					return this.submissionTime;
				}
				
			    public String startTime;

				public String getStartTime () {
					return this.startTime;
				}
				
			    public String endTime;

				public String getEndTime () {
					return this.endTime;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_logJobDetails.length) {
				if(length < 1024 && commonByteArray_ADS_logJobDetails.length == 0) {
   					commonByteArray_ADS_logJobDetails = new byte[1024];
				} else {
   					commonByteArray_ADS_logJobDetails = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_logJobDetails, 0, length);
			strReturn = new String(commonByteArray_ADS_logJobDetails, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_logJobDetails) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.name = readString(dis);
					
					this.submittedBy = readString(dis);
					
					this.submissionTime = readString(dis);
					
					this.startTime = readString(dis);
					
					this.endTime = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.submittedBy,dos);
					
					// String
				
						writeString(this.submissionTime,dos);
					
					// String
				
						writeString(this.startTime,dos);
					
					// String
				
						writeString(this.endTime,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",name="+name);
		sb.append(",submittedBy="+submittedBy);
		sb.append(",submissionTime="+submissionTime);
		sb.append(",startTime="+startTime);
		sb.append(",endTime="+endTime);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mainStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ADS_logJobDetails = new byte[0];
    static byte[] commonByteArray_ADS_logJobDetails = new byte[0];

	
			    public String test;

				public String getTest () {
					return this.test;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_logJobDetails.length) {
				if(length < 1024 && commonByteArray_ADS_logJobDetails.length == 0) {
   					commonByteArray_ADS_logJobDetails = new byte[1024];
				} else {
   					commonByteArray_ADS_logJobDetails = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_logJobDetails, 0, length);
			strReturn = new String(commonByteArray_ADS_logJobDetails, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_logJobDetails) {

        	try {

        		int length = 0;
		
					this.test = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.test,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("test="+test);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ADS_logJobDetails = new byte[0];
    static byte[] commonByteArray_ADS_logJobDetails = new byte[0];

	
			    public String test;

				public String getTest () {
					return this.test;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_logJobDetails.length) {
				if(length < 1024 && commonByteArray_ADS_logJobDetails.length == 0) {
   					commonByteArray_ADS_logJobDetails = new byte[1024];
				} else {
   					commonByteArray_ADS_logJobDetails = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_logJobDetails, 0, length);
			strReturn = new String(commonByteArray_ADS_logJobDetails, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_logJobDetails) {

        	try {

        		int length = 0;
		
					this.test = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.test,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("test="+test);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row4Struct row2 = row4;
mainStruct main = new mainStruct();






	
	/**
	 * [tWriteJSONField_2_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_2_Out", false);
		start_Hash.put("tWriteJSONField_2_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("main" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tWriteJSONField_2_Out = 0;
		
    	class BytesLimit65535_tWriteJSONField_2_Out{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWriteJSONField_2_Out().limitLog4jByte();
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_2_Out = 0;
				boolean needRoot_tWriteJSONField_2_Out  = true;
				
				String  strCompCache_tWriteJSONField_2_Out= null;		
				
						        java.util.Queue<row1Struct> listGroupby_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<row1Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_2_Out extends Thread {
						
									    java.util.Queue<row1Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_2_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_2_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_2_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_2_In", queue);
							globalMap.put("flows_tWriteJSONField_2_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_2_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_2_Out txf_tWriteJSONField_2_Out = new ThreadXMLField_tWriteJSONField_2_Out(listGroupby_tWriteJSONField_2_Out);
					
					txf_tWriteJSONField_2_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();


class NestXMLTool_tWriteJSONField_2_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
}
NestXMLTool_tWriteJSONField_2_Out nestXMLTool_tWriteJSONField_2_Out = new NestXMLTool_tWriteJSONField_2_Out();

mainStruct  rowStructOutput_tWriteJSONField_2_Out = new mainStruct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_2_Out = null;
org.dom4j.Document doc_tWriteJSONField_2_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_2_Out.setTrimText(false);
format_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_2_Out = new int[1];

 



/**
 * [tWriteJSONField_2_Out begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
mainStruct main_tmp = new mainStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


String foo = "bar";
 



/**
 * [tJava_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_1().limitLog4jByte();

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row4.test = null;        	            	
    	            	
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */

	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

 
     row2 = row4;


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

main = null;


// # Output table : 'main'
main_tmp.id = context.JOB_ID;
main_tmp.name = context.JOB_NAME;
main_tmp.submittedBy = context.JOB_SUBMITTED_BY;
main_tmp.submissionTime = null;
main_tmp.startTime = context.JOB_START_TIME;
main_tmp.endTime = context.JOB_END_TIME;
main_tmp.status = context.JOB_STATUS;
main = main_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "main"
if(main != null) { 



	
	/**
	 * [tWriteJSONField_2_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

			//main
			//main


			
				if(execStat){
					runStat.updateStatOnConnection("main"+iterateId,1, 1);
				} 
			

		

	if(txf_tWriteJSONField_2_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_2_Out.getCurrentComponent();
		throw txf_tWriteJSONField_2_Out.getLastException();
	}
	nb_line_tWriteJSONField_2_Out++;
	valueMap_tWriteJSONField_2_Out.clear();
	valueMap_tWriteJSONField_2_Out.put("id",
	(
		main.id != null?
            main.id.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("name",
	(
		main.name != null?
            main.name.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("submittedBy",
	(
		main.submittedBy != null?
            main.submittedBy.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("submissionTime",
	(
		main.submissionTime != null?
            main.submissionTime.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("startTime",
	(
		main.startTime != null?
            main.startTime.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("endTime",
	(
		main.endTime != null?
            main.endTime.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("status",
	(
		main.status != null?
            main.status.toString():null
		));
		String strTemp_tWriteJSONField_2_Out = "";
	if(strCompCache_tWriteJSONField_2_Out==null){
		strCompCache_tWriteJSONField_2_Out=strTemp_tWriteJSONField_2_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_tWriteJSONField_2_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_2_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_2_Out, format_tWriteJSONField_2_Out);
			output_tWriteJSONField_2_Out.write(doc_tWriteJSONField_2_Out);
		    output_tWriteJSONField_2_Out.close();
			
				  		  row1Struct row_tWriteJSONField_2_Out = new row1Struct();
						  
					     		row_tWriteJSONField_2_Out.root = strWriter_tWriteJSONField_2_Out.toString();
					     		listGroupby_tWriteJSONField_2_Out.add(row_tWriteJSONField_2_Out);
					
		    doc_tWriteJSONField_2_Out.clearContent();
			needRoot_tWriteJSONField_2_Out = true;
			for(int i_tWriteJSONField_2_Out=0;i_tWriteJSONField_2_Out<orders_tWriteJSONField_2_Out.length;i_tWriteJSONField_2_Out++){
				orders_tWriteJSONField_2_Out[i_tWriteJSONField_2_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_2_Out != null && groupbyList_tWriteJSONField_2_Out.size() >= 0){
				groupbyList_tWriteJSONField_2_Out.clear();
			}
			strCompCache_tWriteJSONField_2_Out=strTemp_tWriteJSONField_2_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_2_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_2_Out) {
		needRoot_tWriteJSONField_2_Out=false;
		org.dom4j.Element root_tWriteJSONField_2_Out = doc_tWriteJSONField_2_Out.addElement("root");
		subTreeRootParent_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out;
		org.dom4j.Element root_0_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("name");
		if(
		valueMap_tWriteJSONField_2_Out.get("name")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_0_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("name"));
		}
		org.dom4j.Element root_1_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("id");
		if(
		valueMap_tWriteJSONField_2_Out.get("id")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_1_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("id"));
		}
		org.dom4j.Element root_2_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("submittedBy");
		if(
		valueMap_tWriteJSONField_2_Out.get("submittedBy")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_2_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("submittedBy"));
		}
		org.dom4j.Element root_3_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("submissionTime");
		if(
		valueMap_tWriteJSONField_2_Out.get("submissionTime")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_3_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("submissionTime"));
		}
		org.dom4j.Element root_4_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("startTime");
		if(
		valueMap_tWriteJSONField_2_Out.get("startTime")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_4_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("startTime"));
		}
		org.dom4j.Element root_5_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("endTime");
		if(
		valueMap_tWriteJSONField_2_Out.get("endTime")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_5_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("endTime"));
		}
		root4Group_tWriteJSONField_2_Out = subTreeRootParent_tWriteJSONField_2_Out;
	}else{
		subTreeRootParent_tWriteJSONField_2_Out=root4Group_tWriteJSONField_2_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("status");
        if(orders_tWriteJSONField_2_Out[0]==0){
        	orders_tWriteJSONField_2_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_2_Out.length){
        		orders_tWriteJSONField_2_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_2_Out.elements().add(orders_tWriteJSONField_2_Out[0]++,loop_tWriteJSONField_2_Out);
		if(
		valueMap_tWriteJSONField_2_Out.get("status")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("status"));
		}

 


	tos_count_tWriteJSONField_2_Out++;

/**
 * [tWriteJSONField_2_Out main ] stop
 */

} // End of branch "main"










	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tWriteJSONField_2_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

if(nb_line_tWriteJSONField_2_Out > 0){  
    nestXMLTool_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_tWriteJSONField_2_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_2_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_2_Out, format_tWriteJSONField_2_Out);
	output_tWriteJSONField_2_Out.write(doc_tWriteJSONField_2_Out);
    output_tWriteJSONField_2_Out.close();
					row1Struct row_tWriteJSONField_2_Out = new row1Struct();
						  
					     		row_tWriteJSONField_2_Out.root = strWriter_tWriteJSONField_2_Out.toString();
					     		listGroupby_tWriteJSONField_2_Out.add(row_tWriteJSONField_2_Out);
		    		

}
globalMap.put("tWriteJSONField_2_Out_NB_LINE",nb_line_tWriteJSONField_2_Out);
globalMap.put("tWriteJSONField_2_In_FINISH" + (listGroupby_tWriteJSONField_2_Out==null?"":listGroupby_tWriteJSONField_2_Out.hashCode()), "true");
	
		txf_tWriteJSONField_2_Out.join();
		if(txf_tWriteJSONField_2_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_2_Out.getCurrentComponent();
			throw txf_tWriteJSONField_2_Out.getLastException();
		}
	
resourceMap.put("finish_tWriteJSONField_2_Out", true);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("main"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tWriteJSONField_2_Out", true);
end_Hash.put("tWriteJSONField_2_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_2_Out end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_2_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_2_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_2_In");
		if(resourceMap.get("finish_tWriteJSONField_2_Out") == null){
			globalMap.put("tWriteJSONField_2_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_2_Out==null?"":listGroupby_tWriteJSONField_2_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_2_Out != null) {
		globalMap.put("tWriteJSONField_2_In_FINISH" + (listGroupby_tWriteJSONField_2_Out==null?"":listGroupby_tWriteJSONField_2_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_2_Out finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_ADS_logJobDetails = new byte[0];
    static byte[] commonByteArray_ADS_logJobDetails = new byte[0];

	
			    public String resourceId;

				public String getResourceId () {
					return this.resourceId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_logJobDetails.length) {
				if(length < 1024 && commonByteArray_ADS_logJobDetails.length == 0) {
   					commonByteArray_ADS_logJobDetails = new byte[1024];
				} else {
   					commonByteArray_ADS_logJobDetails = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_logJobDetails, 0, length);
			strReturn = new String(commonByteArray_ADS_logJobDetails, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_logJobDetails) {

        	try {

        		int length = 0;
		
					this.resourceId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.resourceId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("resourceId="+resourceId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_ADS_logJobDetails = new byte[0];
    static byte[] commonByteArray_ADS_logJobDetails = new byte[0];

	
			    public String resourceId;

				public String getResourceId () {
					return this.resourceId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_logJobDetails.length) {
				if(length < 1024 && commonByteArray_ADS_logJobDetails.length == 0) {
   					commonByteArray_ADS_logJobDetails = new byte[1024];
				} else {
   					commonByteArray_ADS_logJobDetails = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_logJobDetails, 0, length);
			strReturn = new String(commonByteArray_ADS_logJobDetails, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_logJobDetails) {

        	try {

        		int length = 0;
		
					this.resourceId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.resourceId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("resourceId="+resourceId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_ADS_logJobDetails = new byte[0];
    static byte[] commonByteArray_ADS_logJobDetails = new byte[0];

	
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_logJobDetails.length) {
				if(length < 1024 && commonByteArray_ADS_logJobDetails.length == 0) {
   					commonByteArray_ADS_logJobDetails = new byte[1024];
				} else {
   					commonByteArray_ADS_logJobDetails = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_logJobDetails, 0, length);
			strReturn = new String(commonByteArray_ADS_logJobDetails, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_logJobDetails) {

        	try {

        		int length = 0;
		
						this.statusCode = readInteger(dis);
					
						this.body = (routines.system.Document) dis.readObject();
					
					this.string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.statusCode,dos);
					
					// Document
				
       			    	dos.writeObject(this.body);
					
					// String
				
						writeString(this.string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("statusCode="+String.valueOf(statusCode));
		sb.append(",body="+String.valueOf(body));
		sb.append(",string="+string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class InprogressStruct implements routines.system.IPersistableRow<InprogressStruct> {
    final static byte[] commonByteArrayLock_ADS_logJobDetails = new byte[0];
    static byte[] commonByteArray_ADS_logJobDetails = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_logJobDetails.length) {
				if(length < 1024 && commonByteArray_ADS_logJobDetails.length == 0) {
   					commonByteArray_ADS_logJobDetails = new byte[1024];
				} else {
   					commonByteArray_ADS_logJobDetails = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_logJobDetails, 0, length);
			strReturn = new String(commonByteArray_ADS_logJobDetails, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_logJobDetails) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
					this.string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
					// String
				
						writeString(this.string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
		sb.append(",string="+string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InprogressStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CompletedStruct implements routines.system.IPersistableRow<CompletedStruct> {
    final static byte[] commonByteArrayLock_ADS_logJobDetails = new byte[0];
    static byte[] commonByteArray_ADS_logJobDetails = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_logJobDetails.length) {
				if(length < 1024 && commonByteArray_ADS_logJobDetails.length == 0) {
   					commonByteArray_ADS_logJobDetails = new byte[1024];
				} else {
   					commonByteArray_ADS_logJobDetails = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_logJobDetails, 0, length);
			strReturn = new String(commonByteArray_ADS_logJobDetails, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_logJobDetails) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
					this.string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
					// String
				
						writeString(this.string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
		sb.append(",string="+string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CompletedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_ADS_logJobDetails = new byte[0];
    static byte[] commonByteArray_ADS_logJobDetails = new byte[0];

	
			    public String root;

				public String getRoot () {
					return this.root;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_logJobDetails.length) {
				if(length < 1024 && commonByteArray_ADS_logJobDetails.length == 0) {
   					commonByteArray_ADS_logJobDetails = new byte[1024];
				} else {
   					commonByteArray_ADS_logJobDetails = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_logJobDetails, 0, length);
			strReturn = new String(commonByteArray_ADS_logJobDetails, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_logJobDetails) {

        	try {

        		int length = 0;
		
					this.root = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.root,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("root="+root);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ADS_logJobDetails = new byte[0];
    static byte[] commonByteArray_ADS_logJobDetails = new byte[0];

	
			    public String root;

				public String getRoot () {
					return this.root;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_logJobDetails.length) {
				if(length < 1024 && commonByteArray_ADS_logJobDetails.length == 0) {
   					commonByteArray_ADS_logJobDetails = new byte[1024];
				} else {
   					commonByteArray_ADS_logJobDetails = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_logJobDetails, 0, length);
			strReturn = new String(commonByteArray_ADS_logJobDetails, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_logJobDetails) {

        	try {

        		int length = 0;
		
					this.root = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.root,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("root="+root);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_2_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row3Struct row3 = new row3Struct();
InprogressStruct Inprogress = new InprogressStruct();
row6Struct row6 = new row6Struct();
row11Struct row11 = new row11Struct();
row12Struct row12 = new row12Struct();
CompletedStruct Completed = new CompletedStruct();









	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tBufferOutput_1 = 0;
		
    	class BytesLimit65535_tBufferOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tBufferOutput_1().limitLog4jByte();

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_2 = 0;
		
    	class BytesLimit65535_tJavaRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_2().limitLog4jByte();

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tExtractXMLField_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractXMLField_1", false);
		start_Hash.put("tExtractXMLField_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractXMLField_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tExtractXMLField_1 = 0;
		
    	class BytesLimit65535_tExtractXMLField_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tExtractXMLField_1().limitLog4jByte();

int nb_line_tExtractXMLField_1 = 0;

class NameSpaceTool_tExtractXMLField_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                   	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    /**
	 *	the regex for the xpath like that : 
	 *	case 1 : functionA(locationXPathExpression) 
	 *	case 2 : fn:functionA(locationXPathExpression) 
	 *	case 3 : functionA(functionB(locationXPathExpression))
	 *	case 4 : fn:functionA(fn:functionB(locationXPathExpression))
	 *	and like that.
	*/
	private java.util.regex.Pattern simpleFunctionPattern;
	private StringBuffer stringBuffer;
	private java.util.Map<String,String> resultCache;
	
	public String addDefaultNSPrefix(final String xpathExpression, String loopPath) {
	    if (defualtNSPath.size() < 1) {
        	return xpathExpression;
    	}
    	
    	if(resultCache == null) {
    		resultCache = new java.util.HashMap<String,String>();
    	}
    	
    	String resultXpathExpression = resultCache.get(xpathExpression);
		if(resultXpathExpression!=null) {
    		return resultXpathExpression;
    	}
    	
    	String locationPathExpression = xpathExpression;
    	
    	if(simpleFunctionPattern == null) {
    		simpleFunctionPattern = java.util.regex.Pattern.compile("([a-zA-z0-9]+:)?[a-zA-Z]+-?[A-Za-z]+\\(.*\\)");
    	}
    	
    	boolean isSimpleFunctionXPath = simpleFunctionPattern.matcher(xpathExpression).matches();
    	String tail = null;
    	if(isSimpleFunctionXPath) {
			int start = xpathExpression.lastIndexOf('(');
			int end = xpathExpression.indexOf(')');
			if(start < end) {
			    if(stringBuffer == null) {
    				stringBuffer = new StringBuffer();
    			}
				locationPathExpression = xpathExpression.substring(start+1,end);
				stringBuffer.append(xpathExpression.substring(0,start+1));
				tail = xpathExpression.substring(end);
			} else {
				isSimpleFunctionXPath = false;
			}
    	}
    	
    	locationPathExpression = addDefaultNSPrefixForLocationXPathExpression(locationPathExpression,loopPath);
    	
    	resultXpathExpression = locationPathExpression;
    	
    	if(isSimpleFunctionXPath) {
        	stringBuffer.append(locationPathExpression);
    		stringBuffer.append(tail);
    		resultXpathExpression = stringBuffer.toString();
    		stringBuffer.setLength(0);
        }
    	
    	resultCache.put(xpathExpression,resultXpathExpression);
    	return resultXpathExpression;
	}
	
    private String addDefaultNSPrefixForLocationXPathExpression(String path, String loopPath) {
    	String fullPath = loopPath;
    	if(!path.equals(fullPath)){
        	for (String tmp : path.split("/")) {
        		if (("..").equals(tmp)) {
                    fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
                } else {
                    fullPath += "/" + tmp;
                }
        	}
        }
    	int[] indexs = new int[fullPath.split("/").length - 1];
        java.util.Arrays.fill(indexs, -1);
        int length = 0;
        for (int i = 0; i < defualtNSPath.size(); i++) {
            if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
                java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length, i);
                length = defualtNSPath.get(i).length();
            }
        }
    
        StringBuilder newPath = new StringBuilder();
        String[] pathStrs = path.split("/");
        for (int i = 0; i < pathStrs.length; i++) {
            String tmp = pathStrs[i];
            if (newPath.length() > 0) {
                newPath.append("/");
            }
            if (tmp.length() > 0 && tmp.indexOf(":") == -1 && tmp.indexOf(".") == -1 /*&& tmp.indexOf("@") == -1*/) {
                int index = indexs[i + indexs.length - pathStrs.length];
                if (index >= 0) {
                	//==== add by wliu to support both filter and functions==
    				if(tmp.indexOf("[")>0 && tmp.indexOf("]")>tmp.indexOf("[")){//include filter
    					String tmpStr=replaceElementWithNS(tmp,"pre"+index+":");
    					newPath.append(tmpStr);
    				}else{
    					if(tmp.indexOf("@") != -1 || tmp.indexOf("(")<tmp.indexOf(")")){  // include attribute
    						newPath.append(tmp);
    					}else{
    				//==add end=======	
                    		newPath.append("pre").append(index).append(":").append(tmp);
                    	}
                    }                    
                } else {
                    newPath.append(tmp);
                }
            } else {
                newPath.append(tmp);
            }
        }
        return newPath.toString();
    }
    
	private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
    private java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(matches);
    
	private String replaceElementWithNS(String global, String pre){

        java.util.regex.Matcher match = pattern.matcher(global);
        StringBuffer sb = new StringBuffer();
        match.reset();
        while (match.find()) {
            String group = match.group();
            String tmp = "";
            if (group.toLowerCase().matches("\\b(div|mod|and|or)\\b.*") || group.matches("@.*")) {
                tmp = group;
            } else {
                tmp = tmp + pre + group;
            }
            match.appendReplacement(sb, tmp);
        }
        match.appendTail(sb);
        
        return sb.toString();
	}
	
}

class XML_API_tExtractXMLField_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}

XML_API_tExtractXMLField_1 xml_api_tExtractXMLField_1 = new XML_API_tExtractXMLField_1();
 



/**
 * [tExtractXMLField_1 begin ] stop
 */



	
	/**
	 * [tRESTClient_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTClient_1", false);
		start_Hash.put("tRESTClient_1", System.currentTimeMillis());
		
	
	currentComponent="tRESTClient_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Inprogress" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRESTClient_1 = 0;
		
    	class BytesLimit65535_tRESTClient_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRESTClient_1().limitLog4jByte();

 



/**
 * [tRESTClient_1 begin ] stop
 */




	
	/**
	 * [tRESTClient_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTClient_3", false);
		start_Hash.put("tRESTClient_3", System.currentTimeMillis());
		
	
	currentComponent="tRESTClient_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Completed" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRESTClient_3 = 0;
		
    	class BytesLimit65535_tRESTClient_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRESTClient_3().limitLog4jByte();

 



/**
 * [tRESTClient_3 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String var1;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
InprogressStruct Inprogress_tmp = new InprogressStruct();
CompletedStruct Completed_tmp = new CompletedStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_2_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_2_In", false);
		start_Hash.put("tWriteJSONField_2_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	
		int tos_count_tWriteJSONField_2_In = 0;
		
    	class BytesLimit65535_tWriteJSONField_2_In{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWriteJSONField_2_In().limitLog4jByte();

				int nb_line_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_2_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_2_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_2_In.setForceTopLevelObject(false);
				
					   java.util.Queue<row1Struct> queue_tWriteJSONField_2_In = (java.util.Queue<row1Struct>) globalMap.get("queue_tWriteJSONField_2_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_2_In = "tWriteJSONField_2_In_FINISH"+(queue_tWriteJSONField_2_In==null?"":queue_tWriteJSONField_2_In.hashCode());
				String str_tWriteJSONField_2_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_2_In) || !queue_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_tWriteJSONField_2_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_2_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_2_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

                    row1Struct result_tWriteJSONField_2_In = queue_tWriteJSONField_2_In.poll();
                    str_tWriteJSONField_2_In = result_tWriteJSONField_2_In.root;
        //Convert XML to JSON
        net.sf.json.JSON json_tWriteJSONField_2_In = xmlSerializer_tWriteJSONField_2_In.read(str_tWriteJSONField_2_In);
        row1.root = json_tWriteJSONField_2_In.toString();
    
        nb_line_tWriteJSONField_2_In++;

 


	tos_count_tWriteJSONField_2_In++;

/**
 * [tWriteJSONField_2_In main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

    System.out.println("before:"+row1.root);
//String str=row1.root.replaceAll("null","[]");
row3.root=row1.root.replaceAll(",\"[a-zA-Z][a-zA-Z]*\":\\[\\]", "");
System.out.println("After:"+row3.root);

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.var1 = null;// ###############################
        // ###############################
        // # Output tables

Inprogress = null;
Completed = null;


// # Output table : 'Inprogress'
// # Filter conditions 
if( 

ADSStringUtils.isIdNull(context.JOB_ID)==true

 ) {
Inprogress_tmp.body = null;
Inprogress_tmp.string = row3.root ;
Inprogress = Inprogress_tmp;
} // closing filter/reject

// # Output table : 'Completed'
// # Filter conditions 
if( 

ADSStringUtils.isIdNull(context.JOB_ID)==false

 ) {
Completed_tmp.body = null;
Completed_tmp.string = row3.root ;
Completed = Completed_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "Inprogress"
if(Inprogress != null) { 



	
	/**
	 * [tRESTClient_1 main ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	

			//Inprogress
			//Inprogress


			
				if(execStat){
					runStat.updateStatOnConnection("Inprogress"+iterateId,1, 1);
				} 
			

		
	row6 = null;

// expected response body
Object responseDoc_tRESTClient_1 = null;

try {
	// request body
	org.dom4j.Document requestDoc_tRESTClient_1 = null;
	String requestString_tRESTClient_1 = null;
			requestString_tRESTClient_1 = Inprogress.string;

	Object requestBody_tRESTClient_1 = requestDoc_tRESTClient_1 != null ? requestDoc_tRESTClient_1 : requestString_tRESTClient_1;

	

    //resposne class name
	Class<?> responseClass_tRESTClient_1
		= org.dom4j.Document.class;

	// create web client instance
	org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_1 =
			new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

	boolean inOSGi = false;
	try {
		inOSGi = (null != factoryBean_tRESTClient_1.getBus().getExtension(Class.forName("org.osgi.framework.BundleContext")));
	} catch (ClassNotFoundException e_tRESTClient_1) {
		; // ignore
	}

	final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_1 =
			new java.util.ArrayList<org.apache.cxf.feature.Feature>();

	
		String url = context.REST_URL_BASE+"/jobDatas";
		// {baseUri}tRESTClient
		factoryBean_tRESTClient_1.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
		factoryBean_tRESTClient_1.setAddress(url);
	

	

	
		features_tRESTClient_1.add(new org.apache.cxf.feature.LoggingFeature());
	

	

	factoryBean_tRESTClient_1.setFeatures(features_tRESTClient_1);


	java.util.List<Object> providers_tRESTClient_1 = new java.util.ArrayList<Object>();
	providers_tRESTClient_1.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
		// workaround for https://jira.talendforge.org/browse/TESB-7276
		public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type,
											java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
				throws IOException, javax.ws.rs.WebApplicationException {
			String contentLength = headers.getFirst("Content-Length");
			if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
					&& Integer.valueOf(contentLength) <= 0) {
				try {
					return org.dom4j.DocumentHelper.parseText("<root/>");
				} catch (org.dom4j.DocumentException e_tRESTClient_1) {
					e_tRESTClient_1.printStackTrace();
				}
				return null;
			}
			return super.readFrom(cls, type, anns, mt, headers, is);
		}
	});
	org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_1 =
			new org.apache.cxf.jaxrs.provider.json.JSONProvider();
		jsonProvider_tRESTClient_1.setIgnoreNamespaces(true);
		jsonProvider_tRESTClient_1.setAttributesToElements(true);
	
	
		jsonProvider_tRESTClient_1.setSupportUnwrapped(true);
		jsonProvider_tRESTClient_1.setWrapperName("root");
	
	
		jsonProvider_tRESTClient_1.setDropRootElement(false);
		jsonProvider_tRESTClient_1.setConvertTypesToStrings(false);
	providers_tRESTClient_1.add(jsonProvider_tRESTClient_1);
	factoryBean_tRESTClient_1.setProviders(providers_tRESTClient_1);
	factoryBean_tRESTClient_1.setTransportId("http://cxf.apache.org/transports/http");

	boolean use_auth_tRESTClient_1 = true;
	if (use_auth_tRESTClient_1 && "SAML".equals("OAUTH2_BEARER")) {
		if (!inOSGi) {
			throw new IllegalArgumentException("SAML based security scenarios are not supported in Studio (standalone)");
		}
		// set SAML Token authentication
		
		 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

		org.apache.cxf.ws.security.trust.STSClient stsClient =
			org.talend.esb.security.saml.STSClientUtils.createSTSClient(factoryBean_tRESTClient_1.getBus(),
				"username", decryptedPassword_tRESTClient_1);
		
		org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_1, stsClient);
	}

	org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_1 = factoryBean_tRESTClient_1.createWebClient();

	// set request path
	webClient_tRESTClient_1.path("");

	// set connection properties
	org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_1 = org.apache.cxf.jaxrs.client.WebClient.getConfig(webClient_tRESTClient_1);
	org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_1 = clientConfig_tRESTClient_1.getHttpConduit();

    if (clientConfig_tRESTClient_1.getEndpoint() != null
            && clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo() != null) {
        clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo().setProperty("enable.webclient.operation.reporting",
                                                                          true);
    }

	

	if (use_auth_tRESTClient_1 && "BASIC".equals("OAUTH2_BEARER")) {
		// set BASIC auth
		
		 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
			authPolicy_tRESTClient_1.setAuthorizationType("Basic");
			authPolicy_tRESTClient_1.setUserName("username");
			authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
		conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
	} else if (use_auth_tRESTClient_1 && "HTTP Digest".equals("OAUTH2_BEARER")) {
		// set Digest auth
		
		 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
		authPolicy_tRESTClient_1.setAuthorizationType("Digest");
		authPolicy_tRESTClient_1.setUserName("username");
		authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
		conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
	}

	if (!inOSGi) {
		conduit_tRESTClient_1.getClient().setReceiveTimeout((long)(60 * 1000L));
		conduit_tRESTClient_1.getClient().setConnectionTimeout((long)(30 * 1000L));
		boolean use_proxy_tRESTClient_1 = false;
		if (use_proxy_tRESTClient_1) {
			
			 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");

			conduit_tRESTClient_1.getClient().setProxyServer("61.163.92.4");
			conduit_tRESTClient_1.getClient().setProxyServerPort(Integer.valueOf(8080));
			conduit_tRESTClient_1.getProxyAuthorization().setUserName("");
			conduit_tRESTClient_1.getProxyAuthorization().setPassword(decryptedPassword_tRESTClient_1);
		}
	}

	

	

	
		// set Content-Type
		webClient_tRESTClient_1.type("application/json");
	

	
		// set Accept-Type
		webClient_tRESTClient_1.accept("application/json");
	

	
		// set optional query and header properties if any
	
	if (use_auth_tRESTClient_1 && "OAUTH2_BEARER".equals("OAUTH2_BEARER")) {
		// set oAuth2 bearer token
		webClient_tRESTClient_1.header("Authorization", "Bearer " + context.OAUTH_BEARER_TOKEN);
	}
	
	if (use_auth_tRESTClient_1 && "OIDC_PASSWORD_GRANT".equals("OAUTH2_BEARER")) {
 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

        String username_tRESTClient_1 = "username";
        String password_tRESTClient_1 = decryptedPassword_tRESTClient_1;

        String bearerHeader_tRESTClient_1 = null;

        try {
            bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1);
        } catch (Exception ex) {
            throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
        }

		webClient_tRESTClient_1.header("Authorization", bearerHeader_tRESTClient_1);
	}
    
	// if FORM request then capture query parameters into Form, otherwise set them as queries
	
		
	


	try {
		// start send request
		
			responseDoc_tRESTClient_1 = webClient_tRESTClient_1.post(requestBody_tRESTClient_1, responseClass_tRESTClient_1);
		


		int webClientResponseStatus_tRESTClient_1 = webClient_tRESTClient_1.getResponse().getStatus();
		if (webClientResponseStatus_tRESTClient_1 >= 300) {
			throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_1.getResponse());
		}

		
			if (row6 == null) {
				row6 = new row6Struct();
			}

			row6.statusCode = webClientResponseStatus_tRESTClient_1;
			
			if (responseDoc_tRESTClient_1 != null) {
				if (responseClass_tRESTClient_1 == String.class) {
					row6.string = (String) responseDoc_tRESTClient_1;
				} else {
					routines.system.Document responseTalendDoc_tRESTClient_1 = null;
					if (null != responseDoc_tRESTClient_1) {
						responseTalendDoc_tRESTClient_1 = new routines.system.Document();
						responseTalendDoc_tRESTClient_1.setDocument((org.dom4j.Document) responseDoc_tRESTClient_1);
					}
					row6.body = responseTalendDoc_tRESTClient_1;
				}
			}
			


			globalMap.put("tRESTClient_1_HEADERS", webClient_tRESTClient_1.getResponse().getHeaders());
			
		

	} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_1) {
		
			throw ex_tRESTClient_1;
		
	}

} catch(Exception e_tRESTClient_1) {
	
		throw new TalendException(e_tRESTClient_1, currentComponent, globalMap);
	
}


 


	tos_count_tRESTClient_1++;

/**
 * [tRESTClient_1 main ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tExtractXMLField_1 main ] start
	 */

	

	
	
	currentComponent="tExtractXMLField_1";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

	String xmlStr_tExtractXMLField_1 = null;
	routines.system.Document xmlDocument_tExtractXMLField_1 = null;
	if(row6.body!=null){
				xmlDocument_tExtractXMLField_1 = row6.body;
	}
			if(xmlDocument_tExtractXMLField_1!=null && xmlDocument_tExtractXMLField_1.getDocument()!=null){// C_01
row11 = null;
	NameSpaceTool_tExtractXMLField_1 nsTool_tExtractXMLField_1 = new NameSpaceTool_tExtractXMLField_1();
    org.dom4j.io.SAXReader reader_tExtractXMLField_1 = new org.dom4j.io.SAXReader();
	
    org.dom4j.Document doc_tExtractXMLField_1 = null;
    java.util.HashMap xmlNameSpaceMap_tExtractXMLField_1 = null;
    org.dom4j.XPath x_tExtractXMLField_1 = null;
    java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractXMLField_1 = null;
		String loopQuery_tExtractXMLField_1 = context.RESPONSE_RESOURCE_XPATH; 
	
    boolean isStructError_tExtractXMLField_1= true;
        
    try{
		
	    	doc_tExtractXMLField_1= xmlDocument_tExtractXMLField_1.getDocument();
	    
	    nsTool_tExtractXMLField_1.countNSMap(doc_tExtractXMLField_1.getRootElement());
	    xmlNameSpaceMap_tExtractXMLField_1 = nsTool_tExtractXMLField_1.xmlNameSpaceMap;

    	x_tExtractXMLField_1 = doc_tExtractXMLField_1.createXPath(nsTool_tExtractXMLField_1.addDefaultNSPrefix(loopQuery_tExtractXMLField_1,loopQuery_tExtractXMLField_1));
      
    	x_tExtractXMLField_1.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1); 
    
		 
    	nodeList_tExtractXMLField_1 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tExtractXMLField_1.selectNodes(doc_tExtractXMLField_1);
    	
    	isStructError_tExtractXMLField_1 = false;
    	
    }catch(java.lang.Exception ex_tExtractXMLField_1){
    System.err.println(ex_tExtractXMLField_1.getMessage());
    }
    
    org.dom4j.Node node_tExtractXMLField_1 = null;
    String str_tExtractXMLField_1 = "";
    boolean resultIsNode_tExtractXMLField_1 = true;
    for(int i_tExtractXMLField_1=0; isStructError_tExtractXMLField_1 || (nodeList_tExtractXMLField_1!=null && i_tExtractXMLField_1 < nodeList_tExtractXMLField_1.size());i_tExtractXMLField_1++){
    	
    	if(!isStructError_tExtractXMLField_1){
			row11 = null;
    		row11 = new row11Struct();
    	
    		org.dom4j.tree.AbstractNode temp_tExtractXMLField_1 = nodeList_tExtractXMLField_1.get(i_tExtractXMLField_1);
	
	    	nb_line_tExtractXMLField_1++;	
			try{
				org.dom4j.XPath xTmp0_tExtractXMLField_1 = temp_tExtractXMLField_1.createXPath(nsTool_tExtractXMLField_1.addDefaultNSPrefix("./text()",loopQuery_tExtractXMLField_1));
			    xTmp0_tExtractXMLField_1.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);
				
			    Object obj0_tExtractXMLField_1 = xTmp0_tExtractXMLField_1.evaluate(temp_tExtractXMLField_1);
			    if(obj0_tExtractXMLField_1 instanceof String || obj0_tExtractXMLField_1 instanceof Number){
			    	resultIsNode_tExtractXMLField_1 = false;
    				str_tExtractXMLField_1 = String.valueOf(obj0_tExtractXMLField_1);
   				}else{
   					resultIsNode_tExtractXMLField_1 = true;
				    node_tExtractXMLField_1 = xTmp0_tExtractXMLField_1.selectSingleNode(temp_tExtractXMLField_1);
					str_tExtractXMLField_1 = node_tExtractXMLField_1==null?null:node_tExtractXMLField_1.asXML();
				}
									row11.resourceId = str_tExtractXMLField_1;
}catch(java.lang.Exception ex_tExtractXMLField_1){
    System.err.println(ex_tExtractXMLField_1.getMessage());
    row11 = null;
    	}
    }
    
    isStructError_tExtractXMLField_1 = false;


   globalMap.put("tExtractXMLField_1_NB_LINE", nb_line_tExtractXMLField_1);

 


	tos_count_tExtractXMLField_1++;

/**
 * [tExtractXMLField_1 main ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		

    //Code generated according to input schema and output schema
//row12.resourceId = row11.resourceId;
String strResourceId=ADSStringUtils.getIdFromRestURL(row11.resourceId);
row12.resourceId=strResourceId;
Thread.sleep(1000);
System.out.println(strResourceId);
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */

	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		



String[] row_tBufferOutput_1=new String[]{"",};		
	    if(row12.resourceId != null){
	        
	            row_tBufferOutput_1[0] = row12.resourceId;
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */




} // End of branch "row11"

		// end for
	}


	
		} // C_01
	

} // End of branch "row6"





} // End of branch "Inprogress"




// Start of branch "Completed"
if(Completed != null) { 



	
	/**
	 * [tRESTClient_3 main ] start
	 */

	

	
	
	currentComponent="tRESTClient_3";

	

			//Completed
			//Completed


			
				if(execStat){
					runStat.updateStatOnConnection("Completed"+iterateId,1, 1);
				} 
			

		


// expected response body
Object responseDoc_tRESTClient_3 = null;

try {
	// request body
	org.dom4j.Document requestDoc_tRESTClient_3 = null;
	String requestString_tRESTClient_3 = null;
			requestString_tRESTClient_3 = Completed.string;

	Object requestBody_tRESTClient_3 = requestDoc_tRESTClient_3 != null ? requestDoc_tRESTClient_3 : requestString_tRESTClient_3;

	

    //resposne class name
	Class<?> responseClass_tRESTClient_3
		= org.dom4j.Document.class;

	// create web client instance
	org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_3 =
			new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

	boolean inOSGi = false;
	try {
		inOSGi = (null != factoryBean_tRESTClient_3.getBus().getExtension(Class.forName("org.osgi.framework.BundleContext")));
	} catch (ClassNotFoundException e_tRESTClient_3) {
		; // ignore
	}

	final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_3 =
			new java.util.ArrayList<org.apache.cxf.feature.Feature>();

	
		String url = context.REST_URL_BASE+"/jobDatas/"+context.JOB_ID;
		// {baseUri}tRESTClient
		factoryBean_tRESTClient_3.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
		factoryBean_tRESTClient_3.setAddress(url);
	

	

	
		features_tRESTClient_3.add(new org.apache.cxf.feature.LoggingFeature());
	

	

	factoryBean_tRESTClient_3.setFeatures(features_tRESTClient_3);


	java.util.List<Object> providers_tRESTClient_3 = new java.util.ArrayList<Object>();
	providers_tRESTClient_3.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
		// workaround for https://jira.talendforge.org/browse/TESB-7276
		public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type,
											java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
				throws IOException, javax.ws.rs.WebApplicationException {
			String contentLength = headers.getFirst("Content-Length");
			if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
					&& Integer.valueOf(contentLength) <= 0) {
				try {
					return org.dom4j.DocumentHelper.parseText("<root/>");
				} catch (org.dom4j.DocumentException e_tRESTClient_3) {
					e_tRESTClient_3.printStackTrace();
				}
				return null;
			}
			return super.readFrom(cls, type, anns, mt, headers, is);
		}
	});
	org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_3 =
			new org.apache.cxf.jaxrs.provider.json.JSONProvider();
		jsonProvider_tRESTClient_3.setIgnoreNamespaces(true);
		jsonProvider_tRESTClient_3.setAttributesToElements(true);
	
	
		jsonProvider_tRESTClient_3.setSupportUnwrapped(true);
		jsonProvider_tRESTClient_3.setWrapperName("root");
	
	
		jsonProvider_tRESTClient_3.setDropRootElement(false);
		jsonProvider_tRESTClient_3.setConvertTypesToStrings(false);
	providers_tRESTClient_3.add(jsonProvider_tRESTClient_3);
	factoryBean_tRESTClient_3.setProviders(providers_tRESTClient_3);
	factoryBean_tRESTClient_3.setTransportId("http://cxf.apache.org/transports/http");

	boolean use_auth_tRESTClient_3 = true;
	if (use_auth_tRESTClient_3 && "SAML".equals("OAUTH2_BEARER")) {
		if (!inOSGi) {
			throw new IllegalArgumentException("SAML based security scenarios are not supported in Studio (standalone)");
		}
		// set SAML Token authentication
		
		 
	final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

		org.apache.cxf.ws.security.trust.STSClient stsClient =
			org.talend.esb.security.saml.STSClientUtils.createSTSClient(factoryBean_tRESTClient_3.getBus(),
				"username", decryptedPassword_tRESTClient_3);
		
		org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_3, stsClient);
	}

	org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_3 = factoryBean_tRESTClient_3.createWebClient();

	// set request path
	webClient_tRESTClient_3.path("");

	// set connection properties
	org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_3 = org.apache.cxf.jaxrs.client.WebClient.getConfig(webClient_tRESTClient_3);
	org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_3 = clientConfig_tRESTClient_3.getHttpConduit();

    if (clientConfig_tRESTClient_3.getEndpoint() != null
            && clientConfig_tRESTClient_3.getEndpoint().getEndpointInfo() != null) {
        clientConfig_tRESTClient_3.getEndpoint().getEndpointInfo().setProperty("enable.webclient.operation.reporting",
                                                                          true);
    }

	

	if (use_auth_tRESTClient_3 && "BASIC".equals("OAUTH2_BEARER")) {
		// set BASIC auth
		
		 
	final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_3 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
			authPolicy_tRESTClient_3.setAuthorizationType("Basic");
			authPolicy_tRESTClient_3.setUserName("username");
			authPolicy_tRESTClient_3.setPassword(decryptedPassword_tRESTClient_3);
		conduit_tRESTClient_3.setAuthorization(authPolicy_tRESTClient_3);
	} else if (use_auth_tRESTClient_3 && "HTTP Digest".equals("OAUTH2_BEARER")) {
		// set Digest auth
		
		 
	final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_3 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
		authPolicy_tRESTClient_3.setAuthorizationType("Digest");
		authPolicy_tRESTClient_3.setUserName("username");
		authPolicy_tRESTClient_3.setPassword(decryptedPassword_tRESTClient_3);
		conduit_tRESTClient_3.setAuthorization(authPolicy_tRESTClient_3);
	}

	if (!inOSGi) {
		conduit_tRESTClient_3.getClient().setReceiveTimeout((long)(60 * 1000L));
		conduit_tRESTClient_3.getClient().setConnectionTimeout((long)(30 * 1000L));
		boolean use_proxy_tRESTClient_3 = false;
		if (use_proxy_tRESTClient_3) {
			
			 
	final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");

			conduit_tRESTClient_3.getClient().setProxyServer("61.163.92.4");
			conduit_tRESTClient_3.getClient().setProxyServerPort(Integer.valueOf(8080));
			conduit_tRESTClient_3.getProxyAuthorization().setUserName("");
			conduit_tRESTClient_3.getProxyAuthorization().setPassword(decryptedPassword_tRESTClient_3);
		}
	}

	

	

	
		// set Content-Type
		webClient_tRESTClient_3.type("application/json");
	

	
		// set Accept-Type
		webClient_tRESTClient_3.accept("application/json");
	

	
		// set optional query and header properties if any
	
	if (use_auth_tRESTClient_3 && "OAUTH2_BEARER".equals("OAUTH2_BEARER")) {
		// set oAuth2 bearer token
		webClient_tRESTClient_3.header("Authorization", "Bearer " + context.OAUTH_BEARER_TOKEN);
	}
	
	if (use_auth_tRESTClient_3 && "OIDC_PASSWORD_GRANT".equals("OAUTH2_BEARER")) {
 
	final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

        String username_tRESTClient_3 = "username";
        String password_tRESTClient_3 = decryptedPassword_tRESTClient_3;

        String bearerHeader_tRESTClient_3 = null;

        try {
            bearerHeader_tRESTClient_3 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_3, password_tRESTClient_3);
        } catch (Exception ex) {
            throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
        }

		webClient_tRESTClient_3.header("Authorization", bearerHeader_tRESTClient_3);
	}
    
	// if FORM request then capture query parameters into Form, otherwise set them as queries
	
		
	


	try {
		// start send request
		
			org.apache.cxf.jaxrs.client.WebClient.getConfig(webClient_tRESTClient_3).getRequestContext().put("use.httpurlconnection.method.reflection", true);
			responseDoc_tRESTClient_3 = webClient_tRESTClient_3.invoke("PATCH", requestBody_tRESTClient_3, responseClass_tRESTClient_3);
		


		int webClientResponseStatus_tRESTClient_3 = webClient_tRESTClient_3.getResponse().getStatus();
		if (webClientResponseStatus_tRESTClient_3 >= 300) {
			throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_3.getResponse());
		}

		

	} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_3) {
		
			throw ex_tRESTClient_3;
		
	}

} catch(Exception e_tRESTClient_3) {
	
		throw new TalendException(e_tRESTClient_3, currentComponent, globalMap);
	
}


 


	tos_count_tRESTClient_3++;

/**
 * [tRESTClient_3 main ] stop
 */

} // End of branch "Completed"










	
	/**
	 * [tWriteJSONField_2_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In = "tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_2_In==null?"":queue_tWriteJSONField_2_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_2_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_2_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_2_In);
			
globalMap.put("tWriteJSONField_2_NB_LINE",nb_line_tWriteJSONField_2_In);
 

ok_Hash.put("tWriteJSONField_2_In", true);
end_Hash.put("tWriteJSONField_2_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_2_In end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tRESTClient_1 end ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	


// [tRESTCliend_end]
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Inprogress"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRESTClient_1", true);
end_Hash.put("tRESTClient_1", System.currentTimeMillis());




/**
 * [tRESTClient_1 end ] stop
 */

	
	/**
	 * [tExtractXMLField_1 end ] start
	 */

	

	
	
	currentComponent="tExtractXMLField_1";

	



globalMap.put("tExtractXMLField_1_NB_LINE", nb_line_tExtractXMLField_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tExtractXMLField_1", true);
end_Hash.put("tExtractXMLField_1", System.currentTimeMillis());




/**
 * [tExtractXMLField_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */













	
	/**
	 * [tRESTClient_3 end ] start
	 */

	

	
	
	currentComponent="tRESTClient_3";

	


// [tRESTCliend_end]
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Completed"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRESTClient_3", true);
end_Hash.put("tRESTClient_3", System.currentTimeMillis());




/**
 * [tRESTClient_3 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_2_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

 



/**
 * [tWriteJSONField_2_In finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tRESTClient_1 finally ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	

 



/**
 * [tRESTClient_1 finally ] stop
 */

	
	/**
	 * [tExtractXMLField_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractXMLField_1";

	

 



/**
 * [tExtractXMLField_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 finally ] stop
 */













	
	/**
	 * [tRESTClient_3 finally ] start
	 */

	

	
	
	currentComponent="tRESTClient_3";

	

 



/**
 * [tRESTClient_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final logJobDetails logJobDetailsClass = new logJobDetails();

        int exitCode = logJobDetailsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = logJobDetails.class.getClassLoader().getResourceAsStream("ads/logjobdetails_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("JOB_NAME", "id_String");
				
                context.JOB_NAME=(String) context.getProperty("JOB_NAME");
				    context.setContextType("JOB_START_TIME", "id_String");
				
                context.JOB_START_TIME=(String) context.getProperty("JOB_START_TIME");
				    context.setContextType("JOB_END_TIME", "id_String");
				
                context.JOB_END_TIME=(String) context.getProperty("JOB_END_TIME");
				    context.setContextType("JOB_LOG_TYPE", "id_String");
				
                context.JOB_LOG_TYPE=(String) context.getProperty("JOB_LOG_TYPE");
				    context.setContextType("JOB_SUBMITTED_BY", "id_String");
				
                context.JOB_SUBMITTED_BY=(String) context.getProperty("JOB_SUBMITTED_BY");
				    context.setContextType("JOB_STATUS", "id_String");
				
                context.JOB_STATUS=(String) context.getProperty("JOB_STATUS");
				    context.setContextType("JOB_ID", "id_String");
				
                context.JOB_ID=(String) context.getProperty("JOB_ID");
				    context.setContextType("OAUTH_BEARER_TOKEN", "id_String");
				
                context.OAUTH_BEARER_TOKEN=(String) context.getProperty("OAUTH_BEARER_TOKEN");
				    context.setContextType("RESPONSE_RESOURCE_XPATH", "id_String");
				
                context.RESPONSE_RESOURCE_XPATH=(String) context.getProperty("RESPONSE_RESOURCE_XPATH");
				    context.setContextType("REST_URL_BASE", "id_String");
				
                context.REST_URL_BASE=(String) context.getProperty("REST_URL_BASE");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("JOB_NAME")) {
                context.JOB_NAME = (String) parentContextMap.get("JOB_NAME");
            }if (parentContextMap.containsKey("JOB_START_TIME")) {
                context.JOB_START_TIME = (String) parentContextMap.get("JOB_START_TIME");
            }if (parentContextMap.containsKey("JOB_END_TIME")) {
                context.JOB_END_TIME = (String) parentContextMap.get("JOB_END_TIME");
            }if (parentContextMap.containsKey("JOB_LOG_TYPE")) {
                context.JOB_LOG_TYPE = (String) parentContextMap.get("JOB_LOG_TYPE");
            }if (parentContextMap.containsKey("JOB_SUBMITTED_BY")) {
                context.JOB_SUBMITTED_BY = (String) parentContextMap.get("JOB_SUBMITTED_BY");
            }if (parentContextMap.containsKey("JOB_STATUS")) {
                context.JOB_STATUS = (String) parentContextMap.get("JOB_STATUS");
            }if (parentContextMap.containsKey("JOB_ID")) {
                context.JOB_ID = (String) parentContextMap.get("JOB_ID");
            }if (parentContextMap.containsKey("OAUTH_BEARER_TOKEN")) {
                context.OAUTH_BEARER_TOKEN = (String) parentContextMap.get("OAUTH_BEARER_TOKEN");
            }if (parentContextMap.containsKey("RESPONSE_RESOURCE_XPATH")) {
                context.RESPONSE_RESOURCE_XPATH = (String) parentContextMap.get("RESPONSE_RESOURCE_XPATH");
            }if (parentContextMap.containsKey("REST_URL_BASE")) {
                context.REST_URL_BASE = (String) parentContextMap.get("REST_URL_BASE");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFixedFlowInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFixedFlowInput_1) {
globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", -1);

e_tFixedFlowInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : logJobDetails");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     136121 characters generated by Talend Open Studio for Data Integration 
 *     on the March 24, 2018 12:32:39 PM EDT
 ************************************************************************************************/