// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ads.oci_load_2_storage_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.ADSStringUtils;
import routines.ADSConstants;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: OCI_Load_2_Storage Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.0.20170510_1410
 * @status 
 */
public class OCI_Load_2_Storage implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ADS_EMAIL_AUTHENTICATION_PASSWORD != null){
				
					this.setProperty("ADS_EMAIL_AUTHENTICATION_PASSWORD", ADS_EMAIL_AUTHENTICATION_PASSWORD.toString());
				
			}
			
			if(ADS_EMAIL_AUTHENTICATION_USER != null){
				
					this.setProperty("ADS_EMAIL_AUTHENTICATION_USER", ADS_EMAIL_AUTHENTICATION_USER.toString());
				
			}
			
			if(ADS_EMAIL_FROM != null){
				
					this.setProperty("ADS_EMAIL_FROM", ADS_EMAIL_FROM.toString());
				
			}
			
			if(ADS_EMAIL_SMTP_NAME != null){
				
					this.setProperty("ADS_EMAIL_SMTP_NAME", ADS_EMAIL_SMTP_NAME.toString());
				
			}
			
			if(ADS_EMAIL_SMTP_PORT != null){
				
					this.setProperty("ADS_EMAIL_SMTP_PORT", ADS_EMAIL_SMTP_PORT.toString());
				
			}
			
			if(ADS_EMAIL_TO != null){
				
					this.setProperty("ADS_EMAIL_TO", ADS_EMAIL_TO.toString());
				
			}
			
			if(ADS_LOG_DIRECTORY != null){
				
					this.setProperty("ADS_LOG_DIRECTORY", ADS_LOG_DIRECTORY.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_APPLICATION_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_APPLICATION_XLSX", ADS_SETUP_LOADSHEET_APPLICATION_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX", ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX", ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX", ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX", ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_SCHEDULE_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX", ADS_SETUP_LOADSHEET_SCHEDULE_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX", ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX", ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_USER_ROLES_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX", ADS_SETUP_LOADSHEET_USER_ROLES_XLSX.toString());
				
			}
			
			if(ENV_CONTEXT_FILE != null){
				
					this.setProperty("ENV_CONTEXT_FILE", ENV_CONTEXT_FILE.toString());
				
			}
			
			if(FORMAT_DATE_TO_STRING != null){
				
					this.setProperty("FORMAT_DATE_TO_STRING", FORMAT_DATE_TO_STRING.toString());
				
			}
			
			if(FORMAT_DATETIME_TO_STRING != null){
				
					this.setProperty("FORMAT_DATETIME_TO_STRING", FORMAT_DATETIME_TO_STRING.toString());
				
			}
			
			if(JOB_ID_XPATH != null){
				
					this.setProperty("JOB_ID_XPATH", JOB_ID_XPATH.toString());
				
			}
			
			if(JOB_NAME != null){
				
					this.setProperty("JOB_NAME", JOB_NAME.toString());
				
			}
			
			if(JOB_RUN_NAME != null){
				
					this.setProperty("JOB_RUN_NAME", JOB_RUN_NAME.toString());
				
			}
			
			if(JOB_SUBMITTED_BY != null){
				
					this.setProperty("JOB_SUBMITTED_BY", JOB_SUBMITTED_BY.toString());
				
			}
			
			if(LOAD_FILES_LOC != null){
				
					this.setProperty("LOAD_FILES_LOC", LOAD_FILES_LOC.toString());
				
			}
			
			if(OAUTH_BEARER_TOKEN != null){
				
					this.setProperty("OAUTH_BEARER_TOKEN", OAUTH_BEARER_TOKEN.toString());
				
			}
			
			if(RESOURCE_XPATH_USER_NATIVE != null){
				
					this.setProperty("RESOURCE_XPATH_USER_NATIVE", RESOURCE_XPATH_USER_NATIVE.toString());
				
			}
			
			if(REST_DATA_RESOURCE_XPATH != null){
				
					this.setProperty("REST_DATA_RESOURCE_XPATH", REST_DATA_RESOURCE_XPATH.toString());
				
			}
			
			if(REST_REQ_JSON != null){
				
					this.setProperty("REST_REQ_JSON", REST_REQ_JSON.toString());
				
			}
			
			if(REST_RESPONSE_SELF_HREF_VALUE != null){
				
					this.setProperty("REST_RESPONSE_SELF_HREF_VALUE", REST_RESPONSE_SELF_HREF_VALUE.toString());
				
			}
			
			if(REST_URL_AGGREGATES != null){
				
					this.setProperty("REST_URL_AGGREGATES", REST_URL_AGGREGATES.toString());
				
			}
			
			if(REST_URL_APPLICATIONS != null){
				
					this.setProperty("REST_URL_APPLICATIONS", REST_URL_APPLICATIONS.toString());
				
			}
			
			if(REST_URL_AUDIT_EVENTS != null){
				
					this.setProperty("REST_URL_AUDIT_EVENTS", REST_URL_AUDIT_EVENTS.toString());
				
			}
			
			if(REST_URL_AUDIT_REASON_CODES != null){
				
					this.setProperty("REST_URL_AUDIT_REASON_CODES", REST_URL_AUDIT_REASON_CODES.toString());
				
			}
			
			if(REST_URL_BASE != null){
				
					this.setProperty("REST_URL_BASE", REST_URL_BASE.toString());
				
			}
			
			if(REST_URL_CONTROLLERS != null){
				
					this.setProperty("REST_URL_CONTROLLERS", REST_URL_CONTROLLERS.toString());
				
			}
			
			if(REST_URL_DATA_CENTERS != null){
				
					this.setProperty("REST_URL_DATA_CENTERS", REST_URL_DATA_CENTERS.toString());
				
			}
			
			if(REST_URL_EMAIL_TYPES != null){
				
					this.setProperty("REST_URL_EMAIL_TYPES", REST_URL_EMAIL_TYPES.toString());
				
			}
			
			if(REST_URL_HOSTS != null){
				
					this.setProperty("REST_URL_HOSTS", REST_URL_HOSTS.toString());
				
			}
			
			if(REST_URL_MIGRATION_TIMES != null){
				
					this.setProperty("REST_URL_MIGRATION_TIMES", REST_URL_MIGRATION_TIMES.toString());
				
			}
			
			if(REST_URL_MST_EMAILTYPES != null){
				
					this.setProperty("REST_URL_MST_EMAILTYPES", REST_URL_MST_EMAILTYPES.toString());
				
			}
			
			if(REST_URL_NAS_VOLUMES != null){
				
					this.setProperty("REST_URL_NAS_VOLUMES", REST_URL_NAS_VOLUMES.toString());
				
			}
			
			if(REST_URL_QTREES != null){
				
					this.setProperty("REST_URL_QTREES", REST_URL_QTREES.toString());
				
			}
			
			if(REST_URL_SCHEDULES != null){
				
					this.setProperty("REST_URL_SCHEDULES", REST_URL_SCHEDULES.toString());
				
			}
			
			if(REST_URL_SHARES != null){
				
					this.setProperty("REST_URL_SHARES", REST_URL_SHARES.toString());
				
			}
			
			if(REST_URL_STORAGE != null){
				
					this.setProperty("REST_URL_STORAGE", REST_URL_STORAGE.toString());
				
			}
			
			if(REST_URL_SYS_CONFIG_PROPERTY_TYPES != null){
				
					this.setProperty("REST_URL_SYS_CONFIG_PROPERTY_TYPES", REST_URL_SYS_CONFIG_PROPERTY_TYPES.toString());
				
			}
			
			if(REST_URL_USER_CORPORATE != null){
				
					this.setProperty("REST_URL_USER_CORPORATE", REST_URL_USER_CORPORATE.toString());
				
			}
			
			if(REST_URL_USER_NATIVES != null){
				
					this.setProperty("REST_URL_USER_NATIVES", REST_URL_USER_NATIVES.toString());
				
			}
			
			if(REST_URL_USER_ROLES != null){
				
					this.setProperty("REST_URL_USER_ROLES", REST_URL_USER_ROLES.toString());
				
			}
			
			if(ROLE_LOOKUP_CSV != null){
				
					this.setProperty("ROLE_LOOKUP_CSV", ROLE_LOOKUP_CSV.toString());
				
			}
			
			if(TEST_ROW_COUNT_LIMIT != null){
				
					this.setProperty("TEST_ROW_COUNT_LIMIT", TEST_ROW_COUNT_LIMIT.toString());
				
			}
			
			if(DWH_DATABASE_NAME != null){
				
					this.setProperty("DWH_DATABASE_NAME", DWH_DATABASE_NAME.toString());
				
			}
			
			if(DWH_DATABASE_PORT != null){
				
					this.setProperty("DWH_DATABASE_PORT", DWH_DATABASE_PORT.toString());
				
			}
			
			if(DWH_DATABASE_SERVER != null){
				
					this.setProperty("DWH_DATABASE_SERVER", DWH_DATABASE_SERVER.toString());
				
			}
			
			if(DWH_DATABASE_USER_NAME != null){
				
					this.setProperty("DWH_DATABASE_USER_NAME", DWH_DATABASE_USER_NAME.toString());
				
			}
			
			if(DWH_DATABASE_USER_PASSWORD != null){
				
					this.setProperty("DWH_DATABASE_USER_PASSWORD", DWH_DATABASE_USER_PASSWORD.toString());
				
			}
			
			if(dwh_inventory_AdditionalParams != null){
				
					this.setProperty("dwh_inventory_AdditionalParams", dwh_inventory_AdditionalParams.toString());
				
			}
			
		}

public String ADS_EMAIL_AUTHENTICATION_PASSWORD;
public String getADS_EMAIL_AUTHENTICATION_PASSWORD(){
	return this.ADS_EMAIL_AUTHENTICATION_PASSWORD;
}
public String ADS_EMAIL_AUTHENTICATION_USER;
public String getADS_EMAIL_AUTHENTICATION_USER(){
	return this.ADS_EMAIL_AUTHENTICATION_USER;
}
public String ADS_EMAIL_FROM;
public String getADS_EMAIL_FROM(){
	return this.ADS_EMAIL_FROM;
}
public String ADS_EMAIL_SMTP_NAME;
public String getADS_EMAIL_SMTP_NAME(){
	return this.ADS_EMAIL_SMTP_NAME;
}
public String ADS_EMAIL_SMTP_PORT;
public String getADS_EMAIL_SMTP_PORT(){
	return this.ADS_EMAIL_SMTP_PORT;
}
public String ADS_EMAIL_TO;
public String getADS_EMAIL_TO(){
	return this.ADS_EMAIL_TO;
}
		public String ADS_LOG_DIRECTORY;
		public String getADS_LOG_DIRECTORY(){
			return this.ADS_LOG_DIRECTORY;
		}
		
public String ADS_SETUP_LOADSHEET_APPLICATION_XLSX;
public String getADS_SETUP_LOADSHEET_APPLICATION_XLSX(){
	return this.ADS_SETUP_LOADSHEET_APPLICATION_XLSX;
}
public String ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX;
public String getADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX(){
	return this.ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX;
}
public String ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX;
public String getADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX(){
	return this.ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX;
}
public String ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX;
public String getADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX(){
	return this.ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX;
}
public String ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX;
public String getADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX(){
	return this.ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX;
}
public String ADS_SETUP_LOADSHEET_SCHEDULE_XLSX;
public String getADS_SETUP_LOADSHEET_SCHEDULE_XLSX(){
	return this.ADS_SETUP_LOADSHEET_SCHEDULE_XLSX;
}
public String ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX;
public String getADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX(){
	return this.ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX;
}
public String ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX;
public String getADS_SETUP_LOADSHEET_USER_NATIVES_XLSX(){
	return this.ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX;
}
public String ADS_SETUP_LOADSHEET_USER_ROLES_XLSX;
public String getADS_SETUP_LOADSHEET_USER_ROLES_XLSX(){
	return this.ADS_SETUP_LOADSHEET_USER_ROLES_XLSX;
}
public String ENV_CONTEXT_FILE;
public String getENV_CONTEXT_FILE(){
	return this.ENV_CONTEXT_FILE;
}
public String FORMAT_DATE_TO_STRING;
public String getFORMAT_DATE_TO_STRING(){
	return this.FORMAT_DATE_TO_STRING;
}
public String FORMAT_DATETIME_TO_STRING;
public String getFORMAT_DATETIME_TO_STRING(){
	return this.FORMAT_DATETIME_TO_STRING;
}
public String JOB_ID_XPATH;
public String getJOB_ID_XPATH(){
	return this.JOB_ID_XPATH;
}
public String JOB_NAME;
public String getJOB_NAME(){
	return this.JOB_NAME;
}
public String JOB_RUN_NAME;
public String getJOB_RUN_NAME(){
	return this.JOB_RUN_NAME;
}
public String JOB_SUBMITTED_BY;
public String getJOB_SUBMITTED_BY(){
	return this.JOB_SUBMITTED_BY;
}
		public String LOAD_FILES_LOC;
		public String getLOAD_FILES_LOC(){
			return this.LOAD_FILES_LOC;
		}
		
public String OAUTH_BEARER_TOKEN;
public String getOAUTH_BEARER_TOKEN(){
	return this.OAUTH_BEARER_TOKEN;
}
public String RESOURCE_XPATH_USER_NATIVE;
public String getRESOURCE_XPATH_USER_NATIVE(){
	return this.RESOURCE_XPATH_USER_NATIVE;
}
public String REST_DATA_RESOURCE_XPATH;
public String getREST_DATA_RESOURCE_XPATH(){
	return this.REST_DATA_RESOURCE_XPATH;
}
public String REST_REQ_JSON;
public String getREST_REQ_JSON(){
	return this.REST_REQ_JSON;
}
public String REST_RESPONSE_SELF_HREF_VALUE;
public String getREST_RESPONSE_SELF_HREF_VALUE(){
	return this.REST_RESPONSE_SELF_HREF_VALUE;
}
public String REST_URL_AGGREGATES;
public String getREST_URL_AGGREGATES(){
	return this.REST_URL_AGGREGATES;
}
public String REST_URL_APPLICATIONS;
public String getREST_URL_APPLICATIONS(){
	return this.REST_URL_APPLICATIONS;
}
public String REST_URL_AUDIT_EVENTS;
public String getREST_URL_AUDIT_EVENTS(){
	return this.REST_URL_AUDIT_EVENTS;
}
public String REST_URL_AUDIT_REASON_CODES;
public String getREST_URL_AUDIT_REASON_CODES(){
	return this.REST_URL_AUDIT_REASON_CODES;
}
public String REST_URL_BASE;
public String getREST_URL_BASE(){
	return this.REST_URL_BASE;
}
public String REST_URL_CONTROLLERS;
public String getREST_URL_CONTROLLERS(){
	return this.REST_URL_CONTROLLERS;
}
public String REST_URL_DATA_CENTERS;
public String getREST_URL_DATA_CENTERS(){
	return this.REST_URL_DATA_CENTERS;
}
public String REST_URL_EMAIL_TYPES;
public String getREST_URL_EMAIL_TYPES(){
	return this.REST_URL_EMAIL_TYPES;
}
public String REST_URL_HOSTS;
public String getREST_URL_HOSTS(){
	return this.REST_URL_HOSTS;
}
public String REST_URL_MIGRATION_TIMES;
public String getREST_URL_MIGRATION_TIMES(){
	return this.REST_URL_MIGRATION_TIMES;
}
public String REST_URL_MST_EMAILTYPES;
public String getREST_URL_MST_EMAILTYPES(){
	return this.REST_URL_MST_EMAILTYPES;
}
public String REST_URL_NAS_VOLUMES;
public String getREST_URL_NAS_VOLUMES(){
	return this.REST_URL_NAS_VOLUMES;
}
public String REST_URL_QTREES;
public String getREST_URL_QTREES(){
	return this.REST_URL_QTREES;
}
public String REST_URL_SCHEDULES;
public String getREST_URL_SCHEDULES(){
	return this.REST_URL_SCHEDULES;
}
public String REST_URL_SHARES;
public String getREST_URL_SHARES(){
	return this.REST_URL_SHARES;
}
public String REST_URL_STORAGE;
public String getREST_URL_STORAGE(){
	return this.REST_URL_STORAGE;
}
public String REST_URL_SYS_CONFIG_PROPERTY_TYPES;
public String getREST_URL_SYS_CONFIG_PROPERTY_TYPES(){
	return this.REST_URL_SYS_CONFIG_PROPERTY_TYPES;
}
public String REST_URL_USER_CORPORATE;
public String getREST_URL_USER_CORPORATE(){
	return this.REST_URL_USER_CORPORATE;
}
public String REST_URL_USER_NATIVES;
public String getREST_URL_USER_NATIVES(){
	return this.REST_URL_USER_NATIVES;
}
public String REST_URL_USER_ROLES;
public String getREST_URL_USER_ROLES(){
	return this.REST_URL_USER_ROLES;
}
public String ROLE_LOOKUP_CSV;
public String getROLE_LOOKUP_CSV(){
	return this.ROLE_LOOKUP_CSV;
}
public String TEST_ROW_COUNT_LIMIT;
public String getTEST_ROW_COUNT_LIMIT(){
	return this.TEST_ROW_COUNT_LIMIT;
}
public String DWH_DATABASE_NAME;
public String getDWH_DATABASE_NAME(){
	return this.DWH_DATABASE_NAME;
}
public String DWH_DATABASE_PORT;
public String getDWH_DATABASE_PORT(){
	return this.DWH_DATABASE_PORT;
}
public String DWH_DATABASE_SERVER;
public String getDWH_DATABASE_SERVER(){
	return this.DWH_DATABASE_SERVER;
}
public String DWH_DATABASE_USER_NAME;
public String getDWH_DATABASE_USER_NAME(){
	return this.DWH_DATABASE_USER_NAME;
}
public java.lang.String DWH_DATABASE_USER_PASSWORD;
public java.lang.String getDWH_DATABASE_USER_PASSWORD(){
	return this.DWH_DATABASE_USER_PASSWORD;
}
public String dwh_inventory_AdditionalParams;
public String getDwh_inventory_AdditionalParams(){
	return this.dwh_inventory_AdditionalParams;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "OCI_Load_2_Storage";
	private final String projectName = "ADS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				OCI_Load_2_Storage.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(OCI_Load_2_Storage.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tPrejob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_2", false);
		start_Hash.put("tPrejob_2", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_2";

	
		int tos_count_tPrejob_2 = 0;
		
    	class BytesLimit65535_tPrejob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_2().limitLog4jByte();

 



/**
 * [tPrejob_2 begin ] stop
 */
	
	/**
	 * [tPrejob_2 main ] start
	 */

	

	
	
	currentComponent="tPrejob_2";

	

 


	tos_count_tPrejob_2++;

/**
 * [tPrejob_2 main ] stop
 */
	
	/**
	 * [tPrejob_2 end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";

	

 

ok_Hash.put("tPrejob_2", true);
end_Hash.put("tPrejob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);



/**
 * [tPrejob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_2 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_2";

	

 



/**
 * [tPrejob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_2_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ADS_OCI_Load_2_Storage = new byte[0];
    static byte[] commonByteArray_ADS_OCI_Load_2_Storage = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_OCI_Load_2_Storage.length) {
				if(length < 1024 && commonByteArray_ADS_OCI_Load_2_Storage.length == 0) {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[1024];
				} else {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_OCI_Load_2_Storage, 0, length);
			strReturn = new String(commonByteArray_ADS_OCI_Load_2_Storage, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_OCI_Load_2_Storage) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = context.ENV_CONTEXT_FILE;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.ENV_CONTEXT_FILE, "ISO-8859-15","=","\n",true,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row4 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row4 = new row4Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row4.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row4.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row4 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row4.key != null){
                          tmp_key_tContextLoad_1 = row4.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row4.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row4.key != null) {
                    key_tContextLoad_1 =
                        row4.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row4.value != null) {
                    value_tContextLoad_1 =
                        row4.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
										
						if ("DWH_DATABASE_USER_PASSWORD".equals(key_tContextLoad_1) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

                        System.out.println("tContextLoad_1 set key \"" + key_tContextLoad_1 + "\" with value \"" + currentValue_tContextLoad_1 + "\"");
  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "ADS_EMAIL_AUTHENTICATION_PASSWORD".equals(key_tContextLoad_1))
        {
           context.ADS_EMAIL_AUTHENTICATION_PASSWORD=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_EMAIL_AUTHENTICATION_USER".equals(key_tContextLoad_1))
        {
           context.ADS_EMAIL_AUTHENTICATION_USER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_EMAIL_FROM".equals(key_tContextLoad_1))
        {
           context.ADS_EMAIL_FROM=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_EMAIL_SMTP_NAME".equals(key_tContextLoad_1))
        {
           context.ADS_EMAIL_SMTP_NAME=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_EMAIL_SMTP_PORT".equals(key_tContextLoad_1))
        {
           context.ADS_EMAIL_SMTP_PORT=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_EMAIL_TO".equals(key_tContextLoad_1))
        {
           context.ADS_EMAIL_TO=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_LOG_DIRECTORY".equals(key_tContextLoad_1))
        {
           context.ADS_LOG_DIRECTORY=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_APPLICATION_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_APPLICATION_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_SCHEDULE_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_SCHEDULE_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_USER_ROLES_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_USER_ROLES_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ENV_CONTEXT_FILE".equals(key_tContextLoad_1))
        {
           context.ENV_CONTEXT_FILE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "FORMAT_DATE_TO_STRING".equals(key_tContextLoad_1))
        {
           context.FORMAT_DATE_TO_STRING=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "FORMAT_DATETIME_TO_STRING".equals(key_tContextLoad_1))
        {
           context.FORMAT_DATETIME_TO_STRING=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "JOB_ID_XPATH".equals(key_tContextLoad_1))
        {
           context.JOB_ID_XPATH=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "JOB_NAME".equals(key_tContextLoad_1))
        {
           context.JOB_NAME=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "JOB_RUN_NAME".equals(key_tContextLoad_1))
        {
           context.JOB_RUN_NAME=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "JOB_SUBMITTED_BY".equals(key_tContextLoad_1))
        {
           context.JOB_SUBMITTED_BY=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "LOAD_FILES_LOC".equals(key_tContextLoad_1))
        {
           context.LOAD_FILES_LOC=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "OAUTH_BEARER_TOKEN".equals(key_tContextLoad_1))
        {
           context.OAUTH_BEARER_TOKEN=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "RESOURCE_XPATH_USER_NATIVE".equals(key_tContextLoad_1))
        {
           context.RESOURCE_XPATH_USER_NATIVE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_DATA_RESOURCE_XPATH".equals(key_tContextLoad_1))
        {
           context.REST_DATA_RESOURCE_XPATH=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_REQ_JSON".equals(key_tContextLoad_1))
        {
           context.REST_REQ_JSON=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_RESPONSE_SELF_HREF_VALUE".equals(key_tContextLoad_1))
        {
           context.REST_RESPONSE_SELF_HREF_VALUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_AGGREGATES".equals(key_tContextLoad_1))
        {
           context.REST_URL_AGGREGATES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_APPLICATIONS".equals(key_tContextLoad_1))
        {
           context.REST_URL_APPLICATIONS=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_AUDIT_EVENTS".equals(key_tContextLoad_1))
        {
           context.REST_URL_AUDIT_EVENTS=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_AUDIT_REASON_CODES".equals(key_tContextLoad_1))
        {
           context.REST_URL_AUDIT_REASON_CODES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_BASE".equals(key_tContextLoad_1))
        {
           context.REST_URL_BASE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_CONTROLLERS".equals(key_tContextLoad_1))
        {
           context.REST_URL_CONTROLLERS=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_DATA_CENTERS".equals(key_tContextLoad_1))
        {
           context.REST_URL_DATA_CENTERS=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_EMAIL_TYPES".equals(key_tContextLoad_1))
        {
           context.REST_URL_EMAIL_TYPES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_HOSTS".equals(key_tContextLoad_1))
        {
           context.REST_URL_HOSTS=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_MIGRATION_TIMES".equals(key_tContextLoad_1))
        {
           context.REST_URL_MIGRATION_TIMES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_MST_EMAILTYPES".equals(key_tContextLoad_1))
        {
           context.REST_URL_MST_EMAILTYPES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_NAS_VOLUMES".equals(key_tContextLoad_1))
        {
           context.REST_URL_NAS_VOLUMES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_QTREES".equals(key_tContextLoad_1))
        {
           context.REST_URL_QTREES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_SCHEDULES".equals(key_tContextLoad_1))
        {
           context.REST_URL_SCHEDULES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_SHARES".equals(key_tContextLoad_1))
        {
           context.REST_URL_SHARES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_STORAGE".equals(key_tContextLoad_1))
        {
           context.REST_URL_STORAGE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_SYS_CONFIG_PROPERTY_TYPES".equals(key_tContextLoad_1))
        {
           context.REST_URL_SYS_CONFIG_PROPERTY_TYPES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_USER_CORPORATE".equals(key_tContextLoad_1))
        {
           context.REST_URL_USER_CORPORATE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_USER_NATIVES".equals(key_tContextLoad_1))
        {
           context.REST_URL_USER_NATIVES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_USER_ROLES".equals(key_tContextLoad_1))
        {
           context.REST_URL_USER_ROLES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ROLE_LOOKUP_CSV".equals(key_tContextLoad_1))
        {
           context.ROLE_LOOKUP_CSV=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "TEST_ROW_COUNT_LIMIT".equals(key_tContextLoad_1))
        {
           context.TEST_ROW_COUNT_LIMIT=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DWH_DATABASE_NAME".equals(key_tContextLoad_1))
        {
           context.DWH_DATABASE_NAME=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DWH_DATABASE_PORT".equals(key_tContextLoad_1))
        {
           context.DWH_DATABASE_PORT=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DWH_DATABASE_SERVER".equals(key_tContextLoad_1))
        {
           context.DWH_DATABASE_SERVER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DWH_DATABASE_USER_NAME".equals(key_tContextLoad_1))
        {
           context.DWH_DATABASE_USER_NAME=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DWH_DATABASE_USER_PASSWORD".equals(key_tContextLoad_1))
        {
           context.DWH_DATABASE_USER_PASSWORD=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "dwh_inventory_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.dwh_inventory_AdditionalParams=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.ENV_CONTEXT_FILE) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
		parametersToEncrypt_tContextLoad_1.add("DWH_DATABASE_USER_PASSWORD");
		
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());




/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_ADS_OCI_Load_2_Storage = new byte[0];
    static byte[] commonByteArray_ADS_OCI_Load_2_Storage = new byte[0];

	
			    public String resourceId;

				public String getResourceId () {
					return this.resourceId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_OCI_Load_2_Storage.length) {
				if(length < 1024 && commonByteArray_ADS_OCI_Load_2_Storage.length == 0) {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[1024];
				} else {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_OCI_Load_2_Storage, 0, length);
			strReturn = new String(commonByteArray_ADS_OCI_Load_2_Storage, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_OCI_Load_2_Storage) {

        	try {

        		int length = 0;
		
					this.resourceId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.resourceId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("resourceId="+resourceId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_2 = 0;
		
    	class BytesLimit65535_tJavaRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_2().limitLog4jByte();

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
		int tos_count_tRunJob_3 = 0;
		
    	class BytesLimit65535_tRunJob_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_3().limitLog4jByte();


 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_3.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_3.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_3.add("--father_node=tRunJob_3");
	      			
	        			paraList_tRunJob_3.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_3 = null;

	
		obj_tRunJob_3 = ADSStringUtils.getJobInstanceName((String)jobName, context.JOB_NAME);
		paraList_tRunJob_3.add("--context_param JOB_NAME=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		
		parentContextMap_tRunJob_3.put("JOB_NAME", obj_tRunJob_3);
	
		obj_tRunJob_3 = ADSStringUtils.getCurrentTimeInRestFormat();
		paraList_tRunJob_3.add("--context_param JOB_START_TIME=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		
		parentContextMap_tRunJob_3.put("JOB_START_TIME", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.JOB_SUBMITTED_BY;
		paraList_tRunJob_3.add("--context_param JOB_SUBMITTED_BY=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		
		parentContextMap_tRunJob_3.put("JOB_SUBMITTED_BY", obj_tRunJob_3);
	
		obj_tRunJob_3 = ADSConstants.LOG_JOB_STATUS_INPROGRESS;
		paraList_tRunJob_3.add("--context_param JOB_STATUS=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		
		parentContextMap_tRunJob_3.put("JOB_STATUS", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.OAUTH_BEARER_TOKEN;
		paraList_tRunJob_3.add("--context_param OAUTH_BEARER_TOKEN=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		
		parentContextMap_tRunJob_3.put("OAUTH_BEARER_TOKEN", obj_tRunJob_3);
	
		obj_tRunJob_3 = "/root/_links/jobData/href";
		paraList_tRunJob_3.add("--context_param RESPONSE_RESOURCE_XPATH=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		
		parentContextMap_tRunJob_3.put("RESPONSE_RESOURCE_XPATH", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.REST_URL_BASE;
		paraList_tRunJob_3.add("--context_param REST_URL_BASE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		
		parentContextMap_tRunJob_3.put("REST_URL_BASE", obj_tRunJob_3);
	
	
		ads.logjobdetails_0_1.logJobDetails childJob_tRunJob_3 = new ads.logjobdetails_0_1.logJobDetails();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_3) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
			        .entrySet()) {
	            dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
	                    talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
	    }
		  
			childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
		  
		
		String[][] childReturn_tRunJob_3 = childJob_tRunJob_3.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));
		
	  	
				errorCode = childJob_tRunJob_3.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_3.getErrorCode() == null){
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
		    }
		    if (childJob_tRunJob_3.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_3.getExceptionStackTrace());
				}
			
	  	
			for (String[] item_tRunJob_3 : childReturn_tRunJob_3) { 
				if(childJob_tRunJob_3.hastBufferOutputComponent() || true){
			    			
						if(0 < item_tRunJob_3.length){				
			           		
				           		row5.resourceId = item_tRunJob_3[0];
			           		
		           		}else{
			           		row5.resourceId = null;
		           		}
					
				}
		
 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

    globalMap.put("jobId", row5.resourceId);


    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */


	
		} // C_01
	
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());




/**
 * [tRunJob_3 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("runDate", TalendDate.formatDate("yyyyMMddHHmmss",TalendDate.getCurrentDate()));
globalMap.put("successLogName", context.ADS_LOG_DIRECTORY+jobName+"_Success"+"_"+((String)globalMap.get("runDate"))+".csv");
globalMap.put("failureLogName", context.ADS_LOG_DIRECTORY+jobName+"_Failure"+"_"+((String)globalMap.get("runDate"))+".csv");
globalMap.put("logEmail", context.ADS_LOG_DIRECTORY+jobName+"_Log"+"_"+((String)globalMap.get("runDate"))+".csv");
globalMap.put("sourceLoadDoc", context.ADS_LOG_DIRECTORY+jobName+"_src"+"_"+((String)globalMap.get("runDate"))+".csv");

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tMysqlInput_1Process(globalMap);



/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tRunJob_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	


public static class MainStruct implements routines.system.IPersistableRow<MainStruct> {
    final static byte[] commonByteArrayLock_ADS_OCI_Load_2_Storage = new byte[0];
    static byte[] commonByteArray_ADS_OCI_Load_2_Storage = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String model;

				public String getModel () {
					return this.model;
				}
				
			    public String family;

				public String getFamily () {
					return this.family;
				}
				
			    public String manufacturer;

				public String getManufacturer () {
					return this.manufacturer;
				}
				
			    public String serialNumber;

				public String getSerialNumber () {
					return this.serialNumber;
				}
				
			    public String microcodeVersion;

				public String getMicrocodeVersion () {
					return this.microcodeVersion;
				}
				
			    public Long rawCapacityMB;

				public Long getRawCapacityMB () {
					return this.rawCapacityMB;
				}
				
			    public String dataCenter;

				public String getDataCenter () {
					return this.dataCenter;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_OCI_Load_2_Storage.length) {
				if(length < 1024 && commonByteArray_ADS_OCI_Load_2_Storage.length == 0) {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[1024];
				} else {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_OCI_Load_2_Storage, 0, length);
			strReturn = new String(commonByteArray_ADS_OCI_Load_2_Storage, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_OCI_Load_2_Storage) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.name = readString(dis);
					
					this.model = readString(dis);
					
					this.family = readString(dis);
					
					this.manufacturer = readString(dis);
					
					this.serialNumber = readString(dis);
					
					this.microcodeVersion = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.rawCapacityMB = null;
           				} else {
           			    	this.rawCapacityMB = dis.readLong();
           				}
					
					this.dataCenter = readString(dis);
					
					this.Region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.model,dos);
					
					// String
				
						writeString(this.family,dos);
					
					// String
				
						writeString(this.manufacturer,dos);
					
					// String
				
						writeString(this.serialNumber,dos);
					
					// String
				
						writeString(this.microcodeVersion,dos);
					
					// Long
				
						if(this.rawCapacityMB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.rawCapacityMB);
		            	}
					
					// String
				
						writeString(this.dataCenter,dos);
					
					// String
				
						writeString(this.Region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",model="+model);
		sb.append(",family="+family);
		sb.append(",manufacturer="+manufacturer);
		sb.append(",serialNumber="+serialNumber);
		sb.append(",microcodeVersion="+microcodeVersion);
		sb.append(",rawCapacityMB="+String.valueOf(rawCapacityMB));
		sb.append(",dataCenter="+dataCenter);
		sb.append(",Region="+Region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(MainStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class WriteToSrcFileStruct implements routines.system.IPersistableRow<WriteToSrcFileStruct> {
    final static byte[] commonByteArrayLock_ADS_OCI_Load_2_Storage = new byte[0];
    static byte[] commonByteArray_ADS_OCI_Load_2_Storage = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String model;

				public String getModel () {
					return this.model;
				}
				
			    public String family;

				public String getFamily () {
					return this.family;
				}
				
			    public String manufacturer;

				public String getManufacturer () {
					return this.manufacturer;
				}
				
			    public String serialNumber;

				public String getSerialNumber () {
					return this.serialNumber;
				}
				
			    public String microcodeVersion;

				public String getMicrocodeVersion () {
					return this.microcodeVersion;
				}
				
			    public Long rawCapacityMB;

				public Long getRawCapacityMB () {
					return this.rawCapacityMB;
				}
				
			    public String datacenter;

				public String getDatacenter () {
					return this.datacenter;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_OCI_Load_2_Storage.length) {
				if(length < 1024 && commonByteArray_ADS_OCI_Load_2_Storage.length == 0) {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[1024];
				} else {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_OCI_Load_2_Storage, 0, length);
			strReturn = new String(commonByteArray_ADS_OCI_Load_2_Storage, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_OCI_Load_2_Storage) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.model = readString(dis);
					
					this.family = readString(dis);
					
					this.manufacturer = readString(dis);
					
					this.serialNumber = readString(dis);
					
					this.microcodeVersion = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.rawCapacityMB = null;
           				} else {
           			    	this.rawCapacityMB = dis.readLong();
           				}
					
					this.datacenter = readString(dis);
					
					this.region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.model,dos);
					
					// String
				
						writeString(this.family,dos);
					
					// String
				
						writeString(this.manufacturer,dos);
					
					// String
				
						writeString(this.serialNumber,dos);
					
					// String
				
						writeString(this.microcodeVersion,dos);
					
					// Long
				
						if(this.rawCapacityMB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.rawCapacityMB);
		            	}
					
					// String
				
						writeString(this.datacenter,dos);
					
					// String
				
						writeString(this.region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",model="+model);
		sb.append(",family="+family);
		sb.append(",manufacturer="+manufacturer);
		sb.append(",serialNumber="+serialNumber);
		sb.append(",microcodeVersion="+microcodeVersion);
		sb.append(",rawCapacityMB="+String.valueOf(rawCapacityMB));
		sb.append(",datacenter="+datacenter);
		sb.append(",region="+region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(WriteToSrcFileStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ADS_OCI_Load_2_Storage = new byte[0];
    static byte[] commonByteArray_ADS_OCI_Load_2_Storage = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String model;

				public String getModel () {
					return this.model;
				}
				
			    public String family;

				public String getFamily () {
					return this.family;
				}
				
			    public String manufacturer;

				public String getManufacturer () {
					return this.manufacturer;
				}
				
			    public String serialNumber;

				public String getSerialNumber () {
					return this.serialNumber;
				}
				
			    public String microcodeVersion;

				public String getMicrocodeVersion () {
					return this.microcodeVersion;
				}
				
			    public Long rawCapacityMB;

				public Long getRawCapacityMB () {
					return this.rawCapacityMB;
				}
				
			    public String dataCenter;

				public String getDataCenter () {
					return this.dataCenter;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_OCI_Load_2_Storage.length) {
				if(length < 1024 && commonByteArray_ADS_OCI_Load_2_Storage.length == 0) {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[1024];
				} else {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_OCI_Load_2_Storage, 0, length);
			strReturn = new String(commonByteArray_ADS_OCI_Load_2_Storage, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_OCI_Load_2_Storage) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.name = readString(dis);
					
					this.model = readString(dis);
					
					this.family = readString(dis);
					
					this.manufacturer = readString(dis);
					
					this.serialNumber = readString(dis);
					
					this.microcodeVersion = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.rawCapacityMB = null;
           				} else {
           			    	this.rawCapacityMB = dis.readLong();
           				}
					
					this.dataCenter = readString(dis);
					
					this.Region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.model,dos);
					
					// String
				
						writeString(this.family,dos);
					
					// String
				
						writeString(this.manufacturer,dos);
					
					// String
				
						writeString(this.serialNumber,dos);
					
					// String
				
						writeString(this.microcodeVersion,dos);
					
					// Long
				
						if(this.rawCapacityMB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.rawCapacityMB);
		            	}
					
					// String
				
						writeString(this.dataCenter,dos);
					
					// String
				
						writeString(this.Region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",model="+model);
		sb.append(",family="+family);
		sb.append(",manufacturer="+manufacturer);
		sb.append(",serialNumber="+serialNumber);
		sb.append(",microcodeVersion="+microcodeVersion);
		sb.append(",rawCapacityMB="+String.valueOf(rawCapacityMB));
		sb.append(",dataCenter="+dataCenter);
		sb.append(",Region="+Region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
MainStruct Main = new MainStruct();
WriteToSrcFileStruct WriteToSrcFile = new WriteToSrcFileStruct();





	
	/**
	 * [tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_1_Out", false);
		start_Hash.put("tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tWriteJSONField_1_Out = 0;
		
    	class BytesLimit65535_tWriteJSONField_1_Out{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWriteJSONField_1_Out().limitLog4jByte();
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_1_Out = 0;
				boolean needRoot_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<row2Struct> listGroupby_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<row2Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_1_Out extends Thread {
						
									    java.util.Queue<row2Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_1_In", queue);
							globalMap.put("flows_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_1_Out txf_tWriteJSONField_1_Out = new ThreadXMLField_tWriteJSONField_1_Out(listGroupby_tWriteJSONField_1_Out);
					
					txf_tWriteJSONField_1_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();


class NestXMLTool_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
}
NestXMLTool_tWriteJSONField_1_Out nestXMLTool_tWriteJSONField_1_Out = new NestXMLTool_tWriteJSONField_1_Out();

MainStruct  rowStructOutput_tWriteJSONField_1_Out = new MainStruct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_1_Out.setTrimText(false);
format_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_1_Out = new int[1];

 



/**
 * [tWriteJSONField_1_Out begin ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("WriteToSrcFile" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(((String)globalMap.get("sourceLoadDoc")))).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
                String[] headColutFileOutputDelimited_1=new String[10];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(",");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator(",");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true), "US-ASCII")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                        if(filetFileOutputDelimited_1.length()==0){
                                    headColutFileOutputDelimited_1[0]="id";
                                    headColutFileOutputDelimited_1[1]="name";
                                    headColutFileOutputDelimited_1[2]="model";
                                    headColutFileOutputDelimited_1[3]="family";
                                    headColutFileOutputDelimited_1[4]="manufacturer";
                                    headColutFileOutputDelimited_1[5]="serialNumber";
                                    headColutFileOutputDelimited_1[6]="microcodeVersion";
                                    headColutFileOutputDelimited_1[7]="rawCapacityMB";
                                    headColutFileOutputDelimited_1[8]="datacenter";
                                    headColutFileOutputDelimited_1[9]="region";
                            CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
                            CsvWritertFileOutputDelimited_1.flush();
                        }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
MainStruct Main_tmp = new MainStruct();
WriteToSrcFileStruct WriteToSrcFile_tmp = new WriteToSrcFileStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
    	class BytesLimit65535_tMysqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_1);
			   	String dbUser_tMysqlInput_1 = context.DWH_DATABASE_USER_NAME;
			   	
        		
        		
        		
	final String decryptedPassword_tMysqlInput_1 = context.DWH_DATABASE_USER_PASSWORD; 
			   	
		        String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;
		        
				
				String url_tMysqlInput_1 = "jdbc:mysql://" + context.DWH_DATABASE_SERVER + ":" + context.DWH_DATABASE_PORT + "/" + context.DWH_DATABASE_NAME + "?" + context.dwh_inventory_AdditionalParams;
				
				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(url_tMysqlInput_1,dbUser_tMysqlInput_1,dbPwd_tMysqlInput_1);
		        
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = "SELECT \n		dwh_inventory.storage.id,\n		dwh_inventory.storage.name,\n		dwh_inventory.storage.model,\n		dwh_inventory.storage.family,\n		dwh_inventory.storage.manufacturer,\n		dwh_inventory.storage.serialNumber,\n		dwh_inventory.storage.microcodeVersion,\n		dwh_inventory.storage.rawCapacityMB,\n		dwh_inventory.storage.datacenter,\n		'Not Available' as Region\n    \n    FROM dwh_inventory.storage "
+context.TEST_ROW_COUNT_LIMIT+" ";
			

                       globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);

		    java.sql.ResultSet rs_tMysqlInput_1 = null;
		try{
		    rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								row1.id = 0;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(1) != null) {
                row1.id = rs_tMysqlInput_1.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 2) {
								row1.name = null;
							} else {
	                         		
        	row1.name = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 3) {
								row1.model = null;
							} else {
	                         		
        	row1.model = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 4) {
								row1.family = null;
							} else {
	                         		
        	row1.family = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 4, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 5) {
								row1.manufacturer = null;
							} else {
	                         		
        	row1.manufacturer = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 6) {
								row1.serialNumber = null;
							} else {
	                         		
        	row1.serialNumber = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 6, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 7) {
								row1.microcodeVersion = null;
							} else {
	                         		
        	row1.microcodeVersion = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 7, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 8) {
								row1.rawCapacityMB = null;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(8) != null) {
                row1.rawCapacityMB = rs_tMysqlInput_1.getLong(8);
            } else {
                    row1.rawCapacityMB = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 9) {
								row1.dataCenter = null;
							} else {
	                         		
        	row1.dataCenter = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 9, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 10) {
								row1.Region = null;
							} else {
	                         		
        	row1.Region = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 10, false);
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Main = null;
WriteToSrcFile = null;


// # Output table : 'Main'
Main_tmp.id = row1.id ;
Main_tmp.name = row1.name ;
Main_tmp.model = row1.model ;
Main_tmp.family = row1.family ;
Main_tmp.manufacturer = row1.manufacturer ;
Main_tmp.serialNumber = row1.serialNumber ;
Main_tmp.microcodeVersion = row1.microcodeVersion ;
Main_tmp.rawCapacityMB = row1.rawCapacityMB ;
Main_tmp.dataCenter = row1.dataCenter ;
Main_tmp.Region = row1.Region ;
Main = Main_tmp;

// # Output table : 'WriteToSrcFile'
WriteToSrcFile_tmp.id = row1.id ;
WriteToSrcFile_tmp.name = row1.name ;
WriteToSrcFile_tmp.model = row1.model ;
WriteToSrcFile_tmp.family = row1.family ;
WriteToSrcFile_tmp.manufacturer = row1.manufacturer ;
WriteToSrcFile_tmp.serialNumber = row1.serialNumber ;
WriteToSrcFile_tmp.microcodeVersion = row1.microcodeVersion ;
WriteToSrcFile_tmp.rawCapacityMB = row1.rawCapacityMB ;
WriteToSrcFile_tmp.datacenter = row1.dataCenter ;
WriteToSrcFile_tmp.region = row1.Region ;
WriteToSrcFile = WriteToSrcFile_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "Main"
if(Main != null) { 



	
	/**
	 * [tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

			//Main
			//Main


			
				if(execStat){
					runStat.updateStatOnConnection("Main"+iterateId,1, 1);
				} 
			

		

	if(txf_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_tWriteJSONField_1_Out.getLastException();
	}
	nb_line_tWriteJSONField_1_Out++;
	valueMap_tWriteJSONField_1_Out.clear();
	valueMap_tWriteJSONField_1_Out.put("id",
	(
            String.valueOf(Main.id)
		));
	valueMap_tWriteJSONField_1_Out.put("name",
	(
            Main.name.toString()
		));
	valueMap_tWriteJSONField_1_Out.put("model",
	(
		Main.model != null?
            Main.model.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("family",
	(
		Main.family != null?
            Main.family.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("manufacturer",
	(
		Main.manufacturer != null?
            Main.manufacturer.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("serialNumber",
	(
		Main.serialNumber != null?
            Main.serialNumber.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("microcodeVersion",
	(
		Main.microcodeVersion != null?
            Main.microcodeVersion.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("rawCapacityMB",
	(
		Main.rawCapacityMB != null?
            Main.rawCapacityMB.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("dataCenter",
	(
            Main.dataCenter.toString()
		));
	valueMap_tWriteJSONField_1_Out.put("Region",
	(
            Main.Region.toString()
		));
		String strTemp_tWriteJSONField_1_Out = "";
	if(strCompCache_tWriteJSONField_1_Out==null){
		strCompCache_tWriteJSONField_1_Out=strTemp_tWriteJSONField_1_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_1_Out, format_tWriteJSONField_1_Out);
			output_tWriteJSONField_1_Out.write(doc_tWriteJSONField_1_Out);
		    output_tWriteJSONField_1_Out.close();
			
				  		  row2Struct row_tWriteJSONField_1_Out = new row2Struct();
						  
					     		row_tWriteJSONField_1_Out.root = strWriter_tWriteJSONField_1_Out.toString();
					     		listGroupby_tWriteJSONField_1_Out.add(row_tWriteJSONField_1_Out);
					
		    doc_tWriteJSONField_1_Out.clearContent();
			needRoot_tWriteJSONField_1_Out = true;
			for(int i_tWriteJSONField_1_Out=0;i_tWriteJSONField_1_Out<orders_tWriteJSONField_1_Out.length;i_tWriteJSONField_1_Out++){
				orders_tWriteJSONField_1_Out[i_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_1_Out != null && groupbyList_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_tWriteJSONField_1_Out.clear();
			}
			strCompCache_tWriteJSONField_1_Out=strTemp_tWriteJSONField_1_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_1_Out) {
		needRoot_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_tWriteJSONField_1_Out = doc_tWriteJSONField_1_Out.addElement("root");
		subTreeRootParent_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out;
		org.dom4j.Element root_0_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("storageName");
		if(
		valueMap_tWriteJSONField_1_Out.get("name")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_0_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("name"));
		}
		org.dom4j.Element root_1_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("model");
		if(
		valueMap_tWriteJSONField_1_Out.get("model")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_1_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("model"));
		}
		org.dom4j.Element root_2_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("family");
		if(
		valueMap_tWriteJSONField_1_Out.get("family")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_2_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("family"));
		}
		org.dom4j.Element root_3_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("manufacturer");
		if(
		valueMap_tWriteJSONField_1_Out.get("manufacturer")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_3_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("manufacturer"));
		}
		org.dom4j.Element root_4_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("microcodeVersion");
		if(
		valueMap_tWriteJSONField_1_Out.get("microcodeVersion")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_4_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("microcodeVersion"));
		}
		org.dom4j.Element root_5_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("rawCapacityMb");
		if(
		valueMap_tWriteJSONField_1_Out.get("rawCapacityMB")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_5_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("rawCapacityMB"));
		}
		root4Group_tWriteJSONField_1_Out = subTreeRootParent_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_tWriteJSONField_1_Out=root4Group_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("id");
        if(orders_tWriteJSONField_1_Out[0]==0){
        	orders_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_1_Out.length){
        		orders_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_1_Out.elements().add(orders_tWriteJSONField_1_Out[0]++,loop_tWriteJSONField_1_Out);
		if(
		valueMap_tWriteJSONField_1_Out.get("id")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(loop_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("id"));
		}

 


	tos_count_tWriteJSONField_1_Out++;

/**
 * [tWriteJSONField_1_Out main ] stop
 */

} // End of branch "Main"




// Start of branch "WriteToSrcFile"
if(WriteToSrcFile != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//WriteToSrcFile
			//WriteToSrcFile


			
				if(execStat){
					runStat.updateStatOnConnection("WriteToSrcFile"+iterateId,1, 1);
				} 
			

		


                        String[] rowtFileOutputDelimited_1=new String[10];
                            rowtFileOutputDelimited_1[0]=WriteToSrcFile.id == null ? null : String.valueOf(WriteToSrcFile.id);
                            rowtFileOutputDelimited_1[1]=WriteToSrcFile.name == null ? null : WriteToSrcFile.name;
                            rowtFileOutputDelimited_1[2]=WriteToSrcFile.model == null ? null : WriteToSrcFile.model;
                            rowtFileOutputDelimited_1[3]=WriteToSrcFile.family == null ? null : WriteToSrcFile.family;
                            rowtFileOutputDelimited_1[4]=WriteToSrcFile.manufacturer == null ? null : WriteToSrcFile.manufacturer;
                            rowtFileOutputDelimited_1[5]=WriteToSrcFile.serialNumber == null ? null : WriteToSrcFile.serialNumber;
                            rowtFileOutputDelimited_1[6]=WriteToSrcFile.microcodeVersion == null ? null : WriteToSrcFile.microcodeVersion;
                            rowtFileOutputDelimited_1[7]=WriteToSrcFile.rawCapacityMB == null ? null : String.valueOf(WriteToSrcFile.rawCapacityMB);
                            rowtFileOutputDelimited_1[8]=WriteToSrcFile.datacenter == null ? null : WriteToSrcFile.datacenter;
                            rowtFileOutputDelimited_1[9]=WriteToSrcFile.region == null ? null : WriteToSrcFile.region;
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */

} // End of branch "WriteToSrcFile"







	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if(rs_tMysqlInput_1 !=null){
		rs_tMysqlInput_1.close();
	}
	stmt_tMysqlInput_1.close();
		if(conn_tMysqlInput_1 != null && !conn_tMysqlInput_1.isClosed()) {
			
			conn_tMysqlInput_1.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

if(nb_line_tWriteJSONField_1_Out > 0){  
    nestXMLTool_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_1_Out, format_tWriteJSONField_1_Out);
	output_tWriteJSONField_1_Out.write(doc_tWriteJSONField_1_Out);
    output_tWriteJSONField_1_Out.close();
					row2Struct row_tWriteJSONField_1_Out = new row2Struct();
						  
					     		row_tWriteJSONField_1_Out.root = strWriter_tWriteJSONField_1_Out.toString();
					     		listGroupby_tWriteJSONField_1_Out.add(row_tWriteJSONField_1_Out);
		    		

}
globalMap.put("tWriteJSONField_1_Out_NB_LINE",nb_line_tWriteJSONField_1_Out);
globalMap.put("tWriteJSONField_1_In_FINISH" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
	
		txf_tWriteJSONField_1_Out.join();
		if(txf_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_tWriteJSONField_1_Out.getLastException();
		}
	
resourceMap.put("finish_tWriteJSONField_1_Out", true);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Main"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tWriteJSONField_1_Out", true);
end_Hash.put("tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_1_Out end ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("WriteToSrcFile"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_1_In");
		if(resourceMap.get("finish_tWriteJSONField_1_Out") == null){
			globalMap.put("tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_1_Out != null) {
		globalMap.put("tWriteJSONField_1_In_FINISH" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_1_Out finally ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_4", false);
		start_Hash.put("tRunJob_4", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_4";

	
		int tos_count_tRunJob_4 = 0;
		
    	class BytesLimit65535_tRunJob_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_4().limitLog4jByte();


 



/**
 * [tRunJob_4 begin ] stop
 */
	
	/**
	 * [tRunJob_4 main ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	
	java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_4.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_4.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_4.add("--father_node=tRunJob_4");
	      			
	        			paraList_tRunJob_4.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_4.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null){
		paraList_tRunJob_4.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_4 = null;

	
		obj_tRunJob_4 = ((String)globalMap.get("successLogName"));;
		paraList_tRunJob_4.add("--context_param SUCCESS_LOG=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("SUCCESS_LOG", obj_tRunJob_4);
	
		obj_tRunJob_4 = ((String)globalMap.get("failureLogName"));;
		paraList_tRunJob_4.add("--context_param FAILURE_LOG=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("FAILURE_LOG", obj_tRunJob_4);
	
		obj_tRunJob_4 = ((String)globalMap.get("logEmail"));;
		paraList_tRunJob_4.add("--context_param logEmail=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("logEmail", obj_tRunJob_4);
	
		obj_tRunJob_4 = jobName;
		paraList_tRunJob_4.add("--context_param JOB_NAME=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("JOB_NAME", obj_tRunJob_4);
	
		obj_tRunJob_4 = ((String)globalMap.get("sourceLoadDoc"));;
		paraList_tRunJob_4.add("--context_param SRC_LOAD_SHEET=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("SRC_LOAD_SHEET", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.ADS_LOG_DIRECTORY;
		paraList_tRunJob_4.add("--context_param DELETE_LOG_DIR=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("DELETE_LOG_DIR", obj_tRunJob_4);
	
		obj_tRunJob_4 = jobName+"_*.*";
		paraList_tRunJob_4.add("--context_param DELETE_FILE_MASK=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("DELETE_FILE_MASK", obj_tRunJob_4);
	
		obj_tRunJob_4 = ADSStringUtils.getCurrentTimeInRestFormat();
		paraList_tRunJob_4.add("--context_param JOB_END_TIME=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("JOB_END_TIME", obj_tRunJob_4);
	
		obj_tRunJob_4 = ADSConstants.LOG_JOB_STATUS_FINISHED;
		paraList_tRunJob_4.add("--context_param JOB_STATUS=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("JOB_STATUS", obj_tRunJob_4);
	
		obj_tRunJob_4 = globalMap.get("jobId");
		paraList_tRunJob_4.add("--context_param JOB_ID=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("JOB_ID", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.OAUTH_BEARER_TOKEN;
		paraList_tRunJob_4.add("--context_param OAUTH_BEARER_TOKEN=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("OAUTH_BEARER_TOKEN", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.ADS_EMAIL_TO;
		paraList_tRunJob_4.add("--context_param ADS_EMAIL_TO=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("ADS_EMAIL_TO", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.ADS_EMAIL_FROM;
		paraList_tRunJob_4.add("--context_param ADS_EMAIL_FROM=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("ADS_EMAIL_FROM", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.ADS_EMAIL_SMTP_NAME;
		paraList_tRunJob_4.add("--context_param ADS_EMAIL_SMTP_NAME=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("ADS_EMAIL_SMTP_NAME", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.ADS_EMAIL_SMTP_PORT;
		paraList_tRunJob_4.add("--context_param ADS_EMAIL_SMTP_PORT=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("ADS_EMAIL_SMTP_PORT", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.ADS_EMAIL_AUTHENTICATION_USER;
		paraList_tRunJob_4.add("--context_param ADS_EMAIL_AUTHENTICATION_USER=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("ADS_EMAIL_AUTHENTICATION_USER", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.ADS_EMAIL_AUTHENTICATION_PASSWORD;
		paraList_tRunJob_4.add("--context_param ADS_EMAIL_AUTHENTICATION_PASSWORD=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("ADS_EMAIL_AUTHENTICATION_PASSWORD", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.REST_URL_BASE;
		paraList_tRunJob_4.add("--context_param REST_URL_BASE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("REST_URL_BASE", obj_tRunJob_4);
	
	
		ads.postprocess_0_1.PostProcess childJob_tRunJob_4 = new ads.postprocess_0_1.PostProcess();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_4) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
			        .entrySet()) {
	            dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
	                    talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
	    }
		  
			childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
		  
		
		String[][] childReturn_tRunJob_4 = childJob_tRunJob_4.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));
		
	  	
				errorCode = childJob_tRunJob_4.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_4.getErrorCode() == null){
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
		    }
		    if (childJob_tRunJob_4.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_4.getErrorCode() != null || ("failure").equals(childJob_tRunJob_4.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_4.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_4++;

/**
 * [tRunJob_4 main ] stop
 */
	
	/**
	 * [tRunJob_4 end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 

ok_Hash.put("tRunJob_4", true);
end_Hash.put("tRunJob_4", System.currentTimeMillis());




/**
 * [tRunJob_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_4 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_ADS_OCI_Load_2_Storage = new byte[0];
    static byte[] commonByteArray_ADS_OCI_Load_2_Storage = new byte[0];

	
			    public String root;

				public String getRoot () {
					return this.root;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_OCI_Load_2_Storage.length) {
				if(length < 1024 && commonByteArray_ADS_OCI_Load_2_Storage.length == 0) {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[1024];
				} else {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_OCI_Load_2_Storage, 0, length);
			strReturn = new String(commonByteArray_ADS_OCI_Load_2_Storage, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_OCI_Load_2_Storage) {

        	try {

        		int length = 0;
		
					this.root = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.root,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("root="+root);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ADS_OCI_Load_2_Storage = new byte[0];
    static byte[] commonByteArray_ADS_OCI_Load_2_Storage = new byte[0];

	
			    public String root;

				public String getRoot () {
					return this.root;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_OCI_Load_2_Storage.length) {
				if(length < 1024 && commonByteArray_ADS_OCI_Load_2_Storage.length == 0) {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[1024];
				} else {
   					commonByteArray_ADS_OCI_Load_2_Storage = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_OCI_Load_2_Storage, 0, length);
			strReturn = new String(commonByteArray_ADS_OCI_Load_2_Storage, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_OCI_Load_2_Storage) {

        	try {

        		int length = 0;
		
					this.root = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.root,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("root="+root);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_1_In", false);
		start_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	
		int tos_count_tWriteJSONField_1_In = 0;
		
    	class BytesLimit65535_tWriteJSONField_1_In{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWriteJSONField_1_In().limitLog4jByte();

				int nb_line_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_1_In.setForceTopLevelObject(false);
				
					   java.util.Queue<row2Struct> queue_tWriteJSONField_1_In = (java.util.Queue<row2Struct>) globalMap.get("queue_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH"+(queue_tWriteJSONField_1_In==null?"":queue_tWriteJSONField_1_In.hashCode());
				String str_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_1_In) || !queue_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

                    row2Struct result_tWriteJSONField_1_In = queue_tWriteJSONField_1_In.poll();
                    str_tWriteJSONField_1_In = result_tWriteJSONField_1_In.root;
        //Convert XML to JSON
        net.sf.json.JSON json_tWriteJSONField_1_In = xmlSerializer_tWriteJSONField_1_In.read(str_tWriteJSONField_1_In);
        row2.root = json_tWriteJSONField_1_In.toString();
    
        nb_line_tWriteJSONField_1_In++;

 


	tos_count_tWriteJSONField_1_In++;

/**
 * [tWriteJSONField_1_In main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

    
context.REST_REQ_JSON=row2.root.replaceAll(",\"[a-zA-Z][a-zA-Z]*\":\\[\\]", "");


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = ((String)globalMap.get("failureLogName"));;
		paraList_tRunJob_1.add("--context_param FAILURE_LOG=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		
		parentContextMap_tRunJob_1.put("FAILURE_LOG", obj_tRunJob_1);
	
		obj_tRunJob_1 = ((String)globalMap.get("successLogName"));;
		paraList_tRunJob_1.add("--context_param SUCCESS_LOG=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		
		parentContextMap_tRunJob_1.put("SUCCESS_LOG", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.REST_DATA_RESOURCE_XPATH;
		paraList_tRunJob_1.add("--context_param RESPONSE_RESOURCE_XPATH=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		
		parentContextMap_tRunJob_1.put("RESPONSE_RESOURCE_XPATH", obj_tRunJob_1);
	
		obj_tRunJob_1 = ADSStringUtils.getEndPointURL(context.REST_URL_BASE,context.REST_URL_STORAGE);;
		paraList_tRunJob_1.add("--context_param REST_URL=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		
		parentContextMap_tRunJob_1.put("REST_URL", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.REST_REQ_JSON;
		paraList_tRunJob_1.add("--context_param REST_REQ_JSON=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		
		parentContextMap_tRunJob_1.put("REST_REQ_JSON", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.OAUTH_BEARER_TOKEN;
		paraList_tRunJob_1.add("--context_param OAUTH_BEARER_TOKEN=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		
		parentContextMap_tRunJob_1.put("OAUTH_BEARER_TOKEN", obj_tRunJob_1);
	
	
		ads.adsload_subjob_rest_0_1.ADSLoad_SubJob_Rest childJob_tRunJob_1 = new ads.adsload_subjob_rest_0_1.ADSLoad_SubJob_Rest();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */






	
	/**
	 * [tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_1_In==null?"":queue_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_1_In);
			
globalMap.put("tWriteJSONField_1_NB_LINE",nb_line_tWriteJSONField_1_In);
 

ok_Hash.put("tWriteJSONField_1_In", true);
end_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final OCI_Load_2_Storage OCI_Load_2_StorageClass = new OCI_Load_2_Storage();

        int exitCode = OCI_Load_2_StorageClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = OCI_Load_2_Storage.class.getClassLoader().getResourceAsStream("ads/oci_load_2_storage_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("ADS_EMAIL_AUTHENTICATION_PASSWORD", "id_String");
				
                context.ADS_EMAIL_AUTHENTICATION_PASSWORD=(String) context.getProperty("ADS_EMAIL_AUTHENTICATION_PASSWORD");
				    context.setContextType("ADS_EMAIL_AUTHENTICATION_USER", "id_String");
				
                context.ADS_EMAIL_AUTHENTICATION_USER=(String) context.getProperty("ADS_EMAIL_AUTHENTICATION_USER");
				    context.setContextType("ADS_EMAIL_FROM", "id_String");
				
                context.ADS_EMAIL_FROM=(String) context.getProperty("ADS_EMAIL_FROM");
				    context.setContextType("ADS_EMAIL_SMTP_NAME", "id_String");
				
                context.ADS_EMAIL_SMTP_NAME=(String) context.getProperty("ADS_EMAIL_SMTP_NAME");
				    context.setContextType("ADS_EMAIL_SMTP_PORT", "id_String");
				
                context.ADS_EMAIL_SMTP_PORT=(String) context.getProperty("ADS_EMAIL_SMTP_PORT");
				    context.setContextType("ADS_EMAIL_TO", "id_String");
				
                context.ADS_EMAIL_TO=(String) context.getProperty("ADS_EMAIL_TO");
				    context.setContextType("ADS_LOG_DIRECTORY", "id_Directory");
				
                context.ADS_LOG_DIRECTORY=(String) context.getProperty("ADS_LOG_DIRECTORY");
				    context.setContextType("ADS_SETUP_LOADSHEET_APPLICATION_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_APPLICATION_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_APPLICATION_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_SCHEDULE_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_USER_ROLES_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX");
				    context.setContextType("ENV_CONTEXT_FILE", "id_String");
				
                context.ENV_CONTEXT_FILE=(String) context.getProperty("ENV_CONTEXT_FILE");
				    context.setContextType("FORMAT_DATE_TO_STRING", "id_String");
				
                context.FORMAT_DATE_TO_STRING=(String) context.getProperty("FORMAT_DATE_TO_STRING");
				    context.setContextType("FORMAT_DATETIME_TO_STRING", "id_String");
				
                context.FORMAT_DATETIME_TO_STRING=(String) context.getProperty("FORMAT_DATETIME_TO_STRING");
				    context.setContextType("JOB_ID_XPATH", "id_String");
				
                context.JOB_ID_XPATH=(String) context.getProperty("JOB_ID_XPATH");
				    context.setContextType("JOB_NAME", "id_String");
				
                context.JOB_NAME=(String) context.getProperty("JOB_NAME");
				    context.setContextType("JOB_RUN_NAME", "id_String");
				
                context.JOB_RUN_NAME=(String) context.getProperty("JOB_RUN_NAME");
				    context.setContextType("JOB_SUBMITTED_BY", "id_String");
				
                context.JOB_SUBMITTED_BY=(String) context.getProperty("JOB_SUBMITTED_BY");
				    context.setContextType("LOAD_FILES_LOC", "id_Directory");
				
                context.LOAD_FILES_LOC=(String) context.getProperty("LOAD_FILES_LOC");
				    context.setContextType("OAUTH_BEARER_TOKEN", "id_String");
				
                context.OAUTH_BEARER_TOKEN=(String) context.getProperty("OAUTH_BEARER_TOKEN");
				    context.setContextType("RESOURCE_XPATH_USER_NATIVE", "id_String");
				
                context.RESOURCE_XPATH_USER_NATIVE=(String) context.getProperty("RESOURCE_XPATH_USER_NATIVE");
				    context.setContextType("REST_DATA_RESOURCE_XPATH", "id_String");
				
                context.REST_DATA_RESOURCE_XPATH=(String) context.getProperty("REST_DATA_RESOURCE_XPATH");
				    context.setContextType("REST_REQ_JSON", "id_String");
				
                context.REST_REQ_JSON=(String) context.getProperty("REST_REQ_JSON");
				    context.setContextType("REST_RESPONSE_SELF_HREF_VALUE", "id_String");
				
                context.REST_RESPONSE_SELF_HREF_VALUE=(String) context.getProperty("REST_RESPONSE_SELF_HREF_VALUE");
				    context.setContextType("REST_URL_AGGREGATES", "id_String");
				
                context.REST_URL_AGGREGATES=(String) context.getProperty("REST_URL_AGGREGATES");
				    context.setContextType("REST_URL_APPLICATIONS", "id_String");
				
                context.REST_URL_APPLICATIONS=(String) context.getProperty("REST_URL_APPLICATIONS");
				    context.setContextType("REST_URL_AUDIT_EVENTS", "id_String");
				
                context.REST_URL_AUDIT_EVENTS=(String) context.getProperty("REST_URL_AUDIT_EVENTS");
				    context.setContextType("REST_URL_AUDIT_REASON_CODES", "id_String");
				
                context.REST_URL_AUDIT_REASON_CODES=(String) context.getProperty("REST_URL_AUDIT_REASON_CODES");
				    context.setContextType("REST_URL_BASE", "id_String");
				
                context.REST_URL_BASE=(String) context.getProperty("REST_URL_BASE");
				    context.setContextType("REST_URL_CONTROLLERS", "id_String");
				
                context.REST_URL_CONTROLLERS=(String) context.getProperty("REST_URL_CONTROLLERS");
				    context.setContextType("REST_URL_DATA_CENTERS", "id_String");
				
                context.REST_URL_DATA_CENTERS=(String) context.getProperty("REST_URL_DATA_CENTERS");
				    context.setContextType("REST_URL_EMAIL_TYPES", "id_String");
				
                context.REST_URL_EMAIL_TYPES=(String) context.getProperty("REST_URL_EMAIL_TYPES");
				    context.setContextType("REST_URL_HOSTS", "id_String");
				
                context.REST_URL_HOSTS=(String) context.getProperty("REST_URL_HOSTS");
				    context.setContextType("REST_URL_MIGRATION_TIMES", "id_String");
				
                context.REST_URL_MIGRATION_TIMES=(String) context.getProperty("REST_URL_MIGRATION_TIMES");
				    context.setContextType("REST_URL_MST_EMAILTYPES", "id_String");
				
                context.REST_URL_MST_EMAILTYPES=(String) context.getProperty("REST_URL_MST_EMAILTYPES");
				    context.setContextType("REST_URL_NAS_VOLUMES", "id_String");
				
                context.REST_URL_NAS_VOLUMES=(String) context.getProperty("REST_URL_NAS_VOLUMES");
				    context.setContextType("REST_URL_QTREES", "id_String");
				
                context.REST_URL_QTREES=(String) context.getProperty("REST_URL_QTREES");
				    context.setContextType("REST_URL_SCHEDULES", "id_String");
				
                context.REST_URL_SCHEDULES=(String) context.getProperty("REST_URL_SCHEDULES");
				    context.setContextType("REST_URL_SHARES", "id_String");
				
                context.REST_URL_SHARES=(String) context.getProperty("REST_URL_SHARES");
				    context.setContextType("REST_URL_STORAGE", "id_String");
				
                context.REST_URL_STORAGE=(String) context.getProperty("REST_URL_STORAGE");
				    context.setContextType("REST_URL_SYS_CONFIG_PROPERTY_TYPES", "id_String");
				
                context.REST_URL_SYS_CONFIG_PROPERTY_TYPES=(String) context.getProperty("REST_URL_SYS_CONFIG_PROPERTY_TYPES");
				    context.setContextType("REST_URL_USER_CORPORATE", "id_String");
				
                context.REST_URL_USER_CORPORATE=(String) context.getProperty("REST_URL_USER_CORPORATE");
				    context.setContextType("REST_URL_USER_NATIVES", "id_String");
				
                context.REST_URL_USER_NATIVES=(String) context.getProperty("REST_URL_USER_NATIVES");
				    context.setContextType("REST_URL_USER_ROLES", "id_String");
				
                context.REST_URL_USER_ROLES=(String) context.getProperty("REST_URL_USER_ROLES");
				    context.setContextType("ROLE_LOOKUP_CSV", "id_String");
				
                context.ROLE_LOOKUP_CSV=(String) context.getProperty("ROLE_LOOKUP_CSV");
				    context.setContextType("TEST_ROW_COUNT_LIMIT", "id_String");
				
                context.TEST_ROW_COUNT_LIMIT=(String) context.getProperty("TEST_ROW_COUNT_LIMIT");
				    context.setContextType("DWH_DATABASE_NAME", "id_String");
				
                context.DWH_DATABASE_NAME=(String) context.getProperty("DWH_DATABASE_NAME");
				    context.setContextType("DWH_DATABASE_PORT", "id_String");
				
                context.DWH_DATABASE_PORT=(String) context.getProperty("DWH_DATABASE_PORT");
				    context.setContextType("DWH_DATABASE_SERVER", "id_String");
				
                context.DWH_DATABASE_SERVER=(String) context.getProperty("DWH_DATABASE_SERVER");
				    context.setContextType("DWH_DATABASE_USER_NAME", "id_String");
				
                context.DWH_DATABASE_USER_NAME=(String) context.getProperty("DWH_DATABASE_USER_NAME");
				    context.setContextType("DWH_DATABASE_USER_PASSWORD", "id_Password");
				
            		String pwd_DWH_DATABASE_USER_PASSWORD_value = context.getProperty("DWH_DATABASE_USER_PASSWORD");
            		context.DWH_DATABASE_USER_PASSWORD = null;
            		if(pwd_DWH_DATABASE_USER_PASSWORD_value!=null) {
            			if(context_param.containsKey("DWH_DATABASE_USER_PASSWORD")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.DWH_DATABASE_USER_PASSWORD = pwd_DWH_DATABASE_USER_PASSWORD_value;
            			} else if (!pwd_DWH_DATABASE_USER_PASSWORD_value.isEmpty()) {
            				try {
            					context.DWH_DATABASE_USER_PASSWORD = routines.system.PasswordEncryptUtil.decryptPassword(pwd_DWH_DATABASE_USER_PASSWORD_value);
            					context.put("DWH_DATABASE_USER_PASSWORD",context.DWH_DATABASE_USER_PASSWORD);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("dwh_inventory_AdditionalParams", "id_String");
				
                context.dwh_inventory_AdditionalParams=(String) context.getProperty("dwh_inventory_AdditionalParams");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ADS_EMAIL_AUTHENTICATION_PASSWORD")) {
                context.ADS_EMAIL_AUTHENTICATION_PASSWORD = (String) parentContextMap.get("ADS_EMAIL_AUTHENTICATION_PASSWORD");
            }if (parentContextMap.containsKey("ADS_EMAIL_AUTHENTICATION_USER")) {
                context.ADS_EMAIL_AUTHENTICATION_USER = (String) parentContextMap.get("ADS_EMAIL_AUTHENTICATION_USER");
            }if (parentContextMap.containsKey("ADS_EMAIL_FROM")) {
                context.ADS_EMAIL_FROM = (String) parentContextMap.get("ADS_EMAIL_FROM");
            }if (parentContextMap.containsKey("ADS_EMAIL_SMTP_NAME")) {
                context.ADS_EMAIL_SMTP_NAME = (String) parentContextMap.get("ADS_EMAIL_SMTP_NAME");
            }if (parentContextMap.containsKey("ADS_EMAIL_SMTP_PORT")) {
                context.ADS_EMAIL_SMTP_PORT = (String) parentContextMap.get("ADS_EMAIL_SMTP_PORT");
            }if (parentContextMap.containsKey("ADS_EMAIL_TO")) {
                context.ADS_EMAIL_TO = (String) parentContextMap.get("ADS_EMAIL_TO");
            }if (parentContextMap.containsKey("ADS_LOG_DIRECTORY")) {
                context.ADS_LOG_DIRECTORY = (String) parentContextMap.get("ADS_LOG_DIRECTORY");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_APPLICATION_XLSX")) {
                context.ADS_SETUP_LOADSHEET_APPLICATION_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_APPLICATION_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX")) {
                context.ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX")) {
                context.ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX")) {
                context.ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX")) {
                context.ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX")) {
                context.ADS_SETUP_LOADSHEET_SCHEDULE_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX")) {
                context.ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX")) {
                context.ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX")) {
                context.ADS_SETUP_LOADSHEET_USER_ROLES_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX");
            }if (parentContextMap.containsKey("ENV_CONTEXT_FILE")) {
                context.ENV_CONTEXT_FILE = (String) parentContextMap.get("ENV_CONTEXT_FILE");
            }if (parentContextMap.containsKey("FORMAT_DATE_TO_STRING")) {
                context.FORMAT_DATE_TO_STRING = (String) parentContextMap.get("FORMAT_DATE_TO_STRING");
            }if (parentContextMap.containsKey("FORMAT_DATETIME_TO_STRING")) {
                context.FORMAT_DATETIME_TO_STRING = (String) parentContextMap.get("FORMAT_DATETIME_TO_STRING");
            }if (parentContextMap.containsKey("JOB_ID_XPATH")) {
                context.JOB_ID_XPATH = (String) parentContextMap.get("JOB_ID_XPATH");
            }if (parentContextMap.containsKey("JOB_NAME")) {
                context.JOB_NAME = (String) parentContextMap.get("JOB_NAME");
            }if (parentContextMap.containsKey("JOB_RUN_NAME")) {
                context.JOB_RUN_NAME = (String) parentContextMap.get("JOB_RUN_NAME");
            }if (parentContextMap.containsKey("JOB_SUBMITTED_BY")) {
                context.JOB_SUBMITTED_BY = (String) parentContextMap.get("JOB_SUBMITTED_BY");
            }if (parentContextMap.containsKey("LOAD_FILES_LOC")) {
                context.LOAD_FILES_LOC = (String) parentContextMap.get("LOAD_FILES_LOC");
            }if (parentContextMap.containsKey("OAUTH_BEARER_TOKEN")) {
                context.OAUTH_BEARER_TOKEN = (String) parentContextMap.get("OAUTH_BEARER_TOKEN");
            }if (parentContextMap.containsKey("RESOURCE_XPATH_USER_NATIVE")) {
                context.RESOURCE_XPATH_USER_NATIVE = (String) parentContextMap.get("RESOURCE_XPATH_USER_NATIVE");
            }if (parentContextMap.containsKey("REST_DATA_RESOURCE_XPATH")) {
                context.REST_DATA_RESOURCE_XPATH = (String) parentContextMap.get("REST_DATA_RESOURCE_XPATH");
            }if (parentContextMap.containsKey("REST_REQ_JSON")) {
                context.REST_REQ_JSON = (String) parentContextMap.get("REST_REQ_JSON");
            }if (parentContextMap.containsKey("REST_RESPONSE_SELF_HREF_VALUE")) {
                context.REST_RESPONSE_SELF_HREF_VALUE = (String) parentContextMap.get("REST_RESPONSE_SELF_HREF_VALUE");
            }if (parentContextMap.containsKey("REST_URL_AGGREGATES")) {
                context.REST_URL_AGGREGATES = (String) parentContextMap.get("REST_URL_AGGREGATES");
            }if (parentContextMap.containsKey("REST_URL_APPLICATIONS")) {
                context.REST_URL_APPLICATIONS = (String) parentContextMap.get("REST_URL_APPLICATIONS");
            }if (parentContextMap.containsKey("REST_URL_AUDIT_EVENTS")) {
                context.REST_URL_AUDIT_EVENTS = (String) parentContextMap.get("REST_URL_AUDIT_EVENTS");
            }if (parentContextMap.containsKey("REST_URL_AUDIT_REASON_CODES")) {
                context.REST_URL_AUDIT_REASON_CODES = (String) parentContextMap.get("REST_URL_AUDIT_REASON_CODES");
            }if (parentContextMap.containsKey("REST_URL_BASE")) {
                context.REST_URL_BASE = (String) parentContextMap.get("REST_URL_BASE");
            }if (parentContextMap.containsKey("REST_URL_CONTROLLERS")) {
                context.REST_URL_CONTROLLERS = (String) parentContextMap.get("REST_URL_CONTROLLERS");
            }if (parentContextMap.containsKey("REST_URL_DATA_CENTERS")) {
                context.REST_URL_DATA_CENTERS = (String) parentContextMap.get("REST_URL_DATA_CENTERS");
            }if (parentContextMap.containsKey("REST_URL_EMAIL_TYPES")) {
                context.REST_URL_EMAIL_TYPES = (String) parentContextMap.get("REST_URL_EMAIL_TYPES");
            }if (parentContextMap.containsKey("REST_URL_HOSTS")) {
                context.REST_URL_HOSTS = (String) parentContextMap.get("REST_URL_HOSTS");
            }if (parentContextMap.containsKey("REST_URL_MIGRATION_TIMES")) {
                context.REST_URL_MIGRATION_TIMES = (String) parentContextMap.get("REST_URL_MIGRATION_TIMES");
            }if (parentContextMap.containsKey("REST_URL_MST_EMAILTYPES")) {
                context.REST_URL_MST_EMAILTYPES = (String) parentContextMap.get("REST_URL_MST_EMAILTYPES");
            }if (parentContextMap.containsKey("REST_URL_NAS_VOLUMES")) {
                context.REST_URL_NAS_VOLUMES = (String) parentContextMap.get("REST_URL_NAS_VOLUMES");
            }if (parentContextMap.containsKey("REST_URL_QTREES")) {
                context.REST_URL_QTREES = (String) parentContextMap.get("REST_URL_QTREES");
            }if (parentContextMap.containsKey("REST_URL_SCHEDULES")) {
                context.REST_URL_SCHEDULES = (String) parentContextMap.get("REST_URL_SCHEDULES");
            }if (parentContextMap.containsKey("REST_URL_SHARES")) {
                context.REST_URL_SHARES = (String) parentContextMap.get("REST_URL_SHARES");
            }if (parentContextMap.containsKey("REST_URL_STORAGE")) {
                context.REST_URL_STORAGE = (String) parentContextMap.get("REST_URL_STORAGE");
            }if (parentContextMap.containsKey("REST_URL_SYS_CONFIG_PROPERTY_TYPES")) {
                context.REST_URL_SYS_CONFIG_PROPERTY_TYPES = (String) parentContextMap.get("REST_URL_SYS_CONFIG_PROPERTY_TYPES");
            }if (parentContextMap.containsKey("REST_URL_USER_CORPORATE")) {
                context.REST_URL_USER_CORPORATE = (String) parentContextMap.get("REST_URL_USER_CORPORATE");
            }if (parentContextMap.containsKey("REST_URL_USER_NATIVES")) {
                context.REST_URL_USER_NATIVES = (String) parentContextMap.get("REST_URL_USER_NATIVES");
            }if (parentContextMap.containsKey("REST_URL_USER_ROLES")) {
                context.REST_URL_USER_ROLES = (String) parentContextMap.get("REST_URL_USER_ROLES");
            }if (parentContextMap.containsKey("ROLE_LOOKUP_CSV")) {
                context.ROLE_LOOKUP_CSV = (String) parentContextMap.get("ROLE_LOOKUP_CSV");
            }if (parentContextMap.containsKey("TEST_ROW_COUNT_LIMIT")) {
                context.TEST_ROW_COUNT_LIMIT = (String) parentContextMap.get("TEST_ROW_COUNT_LIMIT");
            }if (parentContextMap.containsKey("DWH_DATABASE_NAME")) {
                context.DWH_DATABASE_NAME = (String) parentContextMap.get("DWH_DATABASE_NAME");
            }if (parentContextMap.containsKey("DWH_DATABASE_PORT")) {
                context.DWH_DATABASE_PORT = (String) parentContextMap.get("DWH_DATABASE_PORT");
            }if (parentContextMap.containsKey("DWH_DATABASE_SERVER")) {
                context.DWH_DATABASE_SERVER = (String) parentContextMap.get("DWH_DATABASE_SERVER");
            }if (parentContextMap.containsKey("DWH_DATABASE_USER_NAME")) {
                context.DWH_DATABASE_USER_NAME = (String) parentContextMap.get("DWH_DATABASE_USER_NAME");
            }if (parentContextMap.containsKey("DWH_DATABASE_USER_PASSWORD")) {
                context.DWH_DATABASE_USER_PASSWORD = (java.lang.String) parentContextMap.get("DWH_DATABASE_USER_PASSWORD");
            }if (parentContextMap.containsKey("dwh_inventory_AdditionalParams")) {
                context.dwh_inventory_AdditionalParams = (String) parentContextMap.get("dwh_inventory_AdditionalParams");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("DWH_DATABASE_USER_PASSWORD");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_2) {
globalMap.put("tPrejob_2_SUBPROCESS_STATE", -1);

e_tPrejob_2.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRunJob_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_3) {
globalMap.put("tRunJob_3_SUBPROCESS_STATE", -1);

e_tRunJob_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : OCI_Load_2_Storage");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     195634 characters generated by Talend Open Studio for Data Integration 
 *     on the March 24, 2018 12:32:42 PM EDT
 ************************************************************************************************/