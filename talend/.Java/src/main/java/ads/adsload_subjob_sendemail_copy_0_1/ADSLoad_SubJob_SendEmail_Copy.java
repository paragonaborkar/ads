// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ads.adsload_subjob_sendemail_copy_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.ADSStringUtils;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ADSLoad_SubJob_SendEmail_Copy Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.0.20170510_1410
 * @status 
 */
public class ADSLoad_SubJob_SendEmail_Copy implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(SUCCESS_LOG != null){
				
					this.setProperty("SUCCESS_LOG", SUCCESS_LOG.toString());
				
			}
			
			if(FAILURE_LOG != null){
				
					this.setProperty("FAILURE_LOG", FAILURE_LOG.toString());
				
			}
			
			if(logEmail != null){
				
					this.setProperty("logEmail", logEmail.toString());
				
			}
			
			if(JOB_NAME != null){
				
					this.setProperty("JOB_NAME", JOB_NAME.toString());
				
			}
			
			if(SRC_LOAD_SHEET != null){
				
					this.setProperty("SRC_LOAD_SHEET", SRC_LOAD_SHEET.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_APPLICATION_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_APPLICATION_XLSX", ADS_SETUP_LOADSHEET_APPLICATION_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX", ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX", ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX", ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX", ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_SCHEDULE_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX", ADS_SETUP_LOADSHEET_SCHEDULE_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX", ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX", ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_USER_ROLES_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX", ADS_SETUP_LOADSHEET_USER_ROLES_XLSX.toString());
				
			}
			
			if(ADS_EMAIL_AUTHENTICATION_PASSWORD != null){
				
					this.setProperty("ADS_EMAIL_AUTHENTICATION_PASSWORD", ADS_EMAIL_AUTHENTICATION_PASSWORD.toString());
				
			}
			
			if(ADS_EMAIL_AUTHENTICATION_USER != null){
				
					this.setProperty("ADS_EMAIL_AUTHENTICATION_USER", ADS_EMAIL_AUTHENTICATION_USER.toString());
				
			}
			
			if(ADS_EMAIL_FROM != null){
				
					this.setProperty("ADS_EMAIL_FROM", ADS_EMAIL_FROM.toString());
				
			}
			
			if(ADS_EMAIL_SMTP_NAME != null){
				
					this.setProperty("ADS_EMAIL_SMTP_NAME", ADS_EMAIL_SMTP_NAME.toString());
				
			}
			
			if(ADS_EMAIL_SMTP_PORT != null){
				
					this.setProperty("ADS_EMAIL_SMTP_PORT", ADS_EMAIL_SMTP_PORT.toString());
				
			}
			
			if(ADS_EMAIL_TO != null){
				
					this.setProperty("ADS_EMAIL_TO", ADS_EMAIL_TO.toString());
				
			}
			
			if(ADS_LOG_DIRECTORY != null){
				
					this.setProperty("ADS_LOG_DIRECTORY", ADS_LOG_DIRECTORY.toString());
				
			}
			
			if(ENV_CONTEXT_FILE != null){
				
					this.setProperty("ENV_CONTEXT_FILE", ENV_CONTEXT_FILE.toString());
				
			}
			
			if(FORMAT_DATE_TO_STRING != null){
				
					this.setProperty("FORMAT_DATE_TO_STRING", FORMAT_DATE_TO_STRING.toString());
				
			}
			
			if(FORMAT_DATETIME_TO_STRING != null){
				
					this.setProperty("FORMAT_DATETIME_TO_STRING", FORMAT_DATETIME_TO_STRING.toString());
				
			}
			
			if(JOB_ID_XPATH != null){
				
					this.setProperty("JOB_ID_XPATH", JOB_ID_XPATH.toString());
				
			}
			
			if(LOAD_FILES_LOC != null){
				
					this.setProperty("LOAD_FILES_LOC", LOAD_FILES_LOC.toString());
				
			}
			
			if(OAUTH_BEARER_TOKEN != null){
				
					this.setProperty("OAUTH_BEARER_TOKEN", OAUTH_BEARER_TOKEN.toString());
				
			}
			
			if(RESOURCE_XPATH_USER_NATIVE != null){
				
					this.setProperty("RESOURCE_XPATH_USER_NATIVE", RESOURCE_XPATH_USER_NATIVE.toString());
				
			}
			
			if(REST_DATA_RESOURCE_XPATH != null){
				
					this.setProperty("REST_DATA_RESOURCE_XPATH", REST_DATA_RESOURCE_XPATH.toString());
				
			}
			
			if(REST_REQ_JSON != null){
				
					this.setProperty("REST_REQ_JSON", REST_REQ_JSON.toString());
				
			}
			
			if(REST_RESPONSE_SELF_HREF_VALUE != null){
				
					this.setProperty("REST_RESPONSE_SELF_HREF_VALUE", REST_RESPONSE_SELF_HREF_VALUE.toString());
				
			}
			
			if(REST_URL_AGGREGATES != null){
				
					this.setProperty("REST_URL_AGGREGATES", REST_URL_AGGREGATES.toString());
				
			}
			
			if(REST_URL_APPLICATIONS != null){
				
					this.setProperty("REST_URL_APPLICATIONS", REST_URL_APPLICATIONS.toString());
				
			}
			
			if(REST_URL_AUDIT_EVENTS != null){
				
					this.setProperty("REST_URL_AUDIT_EVENTS", REST_URL_AUDIT_EVENTS.toString());
				
			}
			
			if(REST_URL_AUDIT_REASON_CODES != null){
				
					this.setProperty("REST_URL_AUDIT_REASON_CODES", REST_URL_AUDIT_REASON_CODES.toString());
				
			}
			
			if(REST_URL_BASE != null){
				
					this.setProperty("REST_URL_BASE", REST_URL_BASE.toString());
				
			}
			
			if(REST_URL_CONTROLLERS != null){
				
					this.setProperty("REST_URL_CONTROLLERS", REST_URL_CONTROLLERS.toString());
				
			}
			
			if(REST_URL_DATA_CENTERS != null){
				
					this.setProperty("REST_URL_DATA_CENTERS", REST_URL_DATA_CENTERS.toString());
				
			}
			
			if(REST_URL_EMAIL_TYPES != null){
				
					this.setProperty("REST_URL_EMAIL_TYPES", REST_URL_EMAIL_TYPES.toString());
				
			}
			
			if(REST_URL_HOSTS != null){
				
					this.setProperty("REST_URL_HOSTS", REST_URL_HOSTS.toString());
				
			}
			
			if(REST_URL_MIGRATION_TIMES != null){
				
					this.setProperty("REST_URL_MIGRATION_TIMES", REST_URL_MIGRATION_TIMES.toString());
				
			}
			
			if(REST_URL_MST_EMAILTYPES != null){
				
					this.setProperty("REST_URL_MST_EMAILTYPES", REST_URL_MST_EMAILTYPES.toString());
				
			}
			
			if(new1 != null){
				
					this.setProperty("new1", new1.toString());
				
			}
			
			if(REST_URL_NAS_VOLUMES != null){
				
					this.setProperty("REST_URL_NAS_VOLUMES", REST_URL_NAS_VOLUMES.toString());
				
			}
			
			if(REST_URL_QTREES != null){
				
					this.setProperty("REST_URL_QTREES", REST_URL_QTREES.toString());
				
			}
			
			if(REST_URL_SCHEDULES != null){
				
					this.setProperty("REST_URL_SCHEDULES", REST_URL_SCHEDULES.toString());
				
			}
			
			if(REST_URL_SHARES != null){
				
					this.setProperty("REST_URL_SHARES", REST_URL_SHARES.toString());
				
			}
			
			if(REST_URL_STORAGE != null){
				
					this.setProperty("REST_URL_STORAGE", REST_URL_STORAGE.toString());
				
			}
			
			if(REST_URL_SYS_CONFIG_PROPERTY_TYPES != null){
				
					this.setProperty("REST_URL_SYS_CONFIG_PROPERTY_TYPES", REST_URL_SYS_CONFIG_PROPERTY_TYPES.toString());
				
			}
			
			if(REST_URL_USER_CORPORATE != null){
				
					this.setProperty("REST_URL_USER_CORPORATE", REST_URL_USER_CORPORATE.toString());
				
			}
			
			if(REST_URL_USER_NATIVES != null){
				
					this.setProperty("REST_URL_USER_NATIVES", REST_URL_USER_NATIVES.toString());
				
			}
			
			if(REST_URL_USER_ROLES != null){
				
					this.setProperty("REST_URL_USER_ROLES", REST_URL_USER_ROLES.toString());
				
			}
			
			if(ROLE_LOOKUP_CSV != null){
				
					this.setProperty("ROLE_LOOKUP_CSV", ROLE_LOOKUP_CSV.toString());
				
			}
			
			if(TEST_ROW_COUNT_LIMIT != null){
				
					this.setProperty("TEST_ROW_COUNT_LIMIT", TEST_ROW_COUNT_LIMIT.toString());
				
			}
			
		}

public String SUCCESS_LOG;
public String getSUCCESS_LOG(){
	return this.SUCCESS_LOG;
}
public String FAILURE_LOG;
public String getFAILURE_LOG(){
	return this.FAILURE_LOG;
}
public String logEmail;
public String getLogEmail(){
	return this.logEmail;
}
public String JOB_NAME;
public String getJOB_NAME(){
	return this.JOB_NAME;
}
public String SRC_LOAD_SHEET;
public String getSRC_LOAD_SHEET(){
	return this.SRC_LOAD_SHEET;
}
public String ADS_SETUP_LOADSHEET_APPLICATION_XLSX;
public String getADS_SETUP_LOADSHEET_APPLICATION_XLSX(){
	return this.ADS_SETUP_LOADSHEET_APPLICATION_XLSX;
}
public String ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX;
public String getADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX(){
	return this.ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX;
}
public String ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX;
public String getADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX(){
	return this.ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX;
}
public String ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX;
public String getADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX(){
	return this.ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX;
}
public String ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX;
public String getADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX(){
	return this.ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX;
}
public String ADS_SETUP_LOADSHEET_SCHEDULE_XLSX;
public String getADS_SETUP_LOADSHEET_SCHEDULE_XLSX(){
	return this.ADS_SETUP_LOADSHEET_SCHEDULE_XLSX;
}
public String ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX;
public String getADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX(){
	return this.ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX;
}
public String ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX;
public String getADS_SETUP_LOADSHEET_USER_NATIVES_XLSX(){
	return this.ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX;
}
public String ADS_SETUP_LOADSHEET_USER_ROLES_XLSX;
public String getADS_SETUP_LOADSHEET_USER_ROLES_XLSX(){
	return this.ADS_SETUP_LOADSHEET_USER_ROLES_XLSX;
}
public String ADS_EMAIL_AUTHENTICATION_PASSWORD;
public String getADS_EMAIL_AUTHENTICATION_PASSWORD(){
	return this.ADS_EMAIL_AUTHENTICATION_PASSWORD;
}
public String ADS_EMAIL_AUTHENTICATION_USER;
public String getADS_EMAIL_AUTHENTICATION_USER(){
	return this.ADS_EMAIL_AUTHENTICATION_USER;
}
public String ADS_EMAIL_FROM;
public String getADS_EMAIL_FROM(){
	return this.ADS_EMAIL_FROM;
}
public String ADS_EMAIL_SMTP_NAME;
public String getADS_EMAIL_SMTP_NAME(){
	return this.ADS_EMAIL_SMTP_NAME;
}
public String ADS_EMAIL_SMTP_PORT;
public String getADS_EMAIL_SMTP_PORT(){
	return this.ADS_EMAIL_SMTP_PORT;
}
public String ADS_EMAIL_TO;
public String getADS_EMAIL_TO(){
	return this.ADS_EMAIL_TO;
}
		public String ADS_LOG_DIRECTORY;
		public String getADS_LOG_DIRECTORY(){
			return this.ADS_LOG_DIRECTORY;
		}
		
public String ENV_CONTEXT_FILE;
public String getENV_CONTEXT_FILE(){
	return this.ENV_CONTEXT_FILE;
}
public String FORMAT_DATE_TO_STRING;
public String getFORMAT_DATE_TO_STRING(){
	return this.FORMAT_DATE_TO_STRING;
}
public String FORMAT_DATETIME_TO_STRING;
public String getFORMAT_DATETIME_TO_STRING(){
	return this.FORMAT_DATETIME_TO_STRING;
}
public String JOB_ID_XPATH;
public String getJOB_ID_XPATH(){
	return this.JOB_ID_XPATH;
}
		public String LOAD_FILES_LOC;
		public String getLOAD_FILES_LOC(){
			return this.LOAD_FILES_LOC;
		}
		
public String OAUTH_BEARER_TOKEN;
public String getOAUTH_BEARER_TOKEN(){
	return this.OAUTH_BEARER_TOKEN;
}
public String RESOURCE_XPATH_USER_NATIVE;
public String getRESOURCE_XPATH_USER_NATIVE(){
	return this.RESOURCE_XPATH_USER_NATIVE;
}
public String REST_DATA_RESOURCE_XPATH;
public String getREST_DATA_RESOURCE_XPATH(){
	return this.REST_DATA_RESOURCE_XPATH;
}
public String REST_REQ_JSON;
public String getREST_REQ_JSON(){
	return this.REST_REQ_JSON;
}
public String REST_RESPONSE_SELF_HREF_VALUE;
public String getREST_RESPONSE_SELF_HREF_VALUE(){
	return this.REST_RESPONSE_SELF_HREF_VALUE;
}
public String REST_URL_AGGREGATES;
public String getREST_URL_AGGREGATES(){
	return this.REST_URL_AGGREGATES;
}
public String REST_URL_APPLICATIONS;
public String getREST_URL_APPLICATIONS(){
	return this.REST_URL_APPLICATIONS;
}
public String REST_URL_AUDIT_EVENTS;
public String getREST_URL_AUDIT_EVENTS(){
	return this.REST_URL_AUDIT_EVENTS;
}
public String REST_URL_AUDIT_REASON_CODES;
public String getREST_URL_AUDIT_REASON_CODES(){
	return this.REST_URL_AUDIT_REASON_CODES;
}
public String REST_URL_BASE;
public String getREST_URL_BASE(){
	return this.REST_URL_BASE;
}
public String REST_URL_CONTROLLERS;
public String getREST_URL_CONTROLLERS(){
	return this.REST_URL_CONTROLLERS;
}
public String REST_URL_DATA_CENTERS;
public String getREST_URL_DATA_CENTERS(){
	return this.REST_URL_DATA_CENTERS;
}
public String REST_URL_EMAIL_TYPES;
public String getREST_URL_EMAIL_TYPES(){
	return this.REST_URL_EMAIL_TYPES;
}
public String REST_URL_HOSTS;
public String getREST_URL_HOSTS(){
	return this.REST_URL_HOSTS;
}
public String REST_URL_MIGRATION_TIMES;
public String getREST_URL_MIGRATION_TIMES(){
	return this.REST_URL_MIGRATION_TIMES;
}
public String REST_URL_MST_EMAILTYPES;
public String getREST_URL_MST_EMAILTYPES(){
	return this.REST_URL_MST_EMAILTYPES;
}
public String new1;
public String getNew1(){
	return this.new1;
}
public String REST_URL_NAS_VOLUMES;
public String getREST_URL_NAS_VOLUMES(){
	return this.REST_URL_NAS_VOLUMES;
}
public String REST_URL_QTREES;
public String getREST_URL_QTREES(){
	return this.REST_URL_QTREES;
}
public String REST_URL_SCHEDULES;
public String getREST_URL_SCHEDULES(){
	return this.REST_URL_SCHEDULES;
}
public String REST_URL_SHARES;
public String getREST_URL_SHARES(){
	return this.REST_URL_SHARES;
}
public String REST_URL_STORAGE;
public String getREST_URL_STORAGE(){
	return this.REST_URL_STORAGE;
}
public String REST_URL_SYS_CONFIG_PROPERTY_TYPES;
public String getREST_URL_SYS_CONFIG_PROPERTY_TYPES(){
	return this.REST_URL_SYS_CONFIG_PROPERTY_TYPES;
}
public String REST_URL_USER_CORPORATE;
public String getREST_URL_USER_CORPORATE(){
	return this.REST_URL_USER_CORPORATE;
}
public String REST_URL_USER_NATIVES;
public String getREST_URL_USER_NATIVES(){
	return this.REST_URL_USER_NATIVES;
}
public String REST_URL_USER_ROLES;
public String getREST_URL_USER_ROLES(){
	return this.REST_URL_USER_ROLES;
}
public String ROLE_LOOKUP_CSV;
public String getROLE_LOOKUP_CSV(){
	return this.ROLE_LOOKUP_CSV;
}
public String TEST_ROW_COUNT_LIMIT;
public String getTEST_ROW_COUNT_LIMIT(){
	return this.TEST_ROW_COUNT_LIMIT;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ADSLoad_SubJob_SendEmail_Copy";
	private final String projectName = "ADS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ADSLoad_SubJob_SendEmail_Copy.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ADSLoad_SubJob_SendEmail_Copy.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tSendMail_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSendMail_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputFullRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputFullRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tSendMail_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSendMail_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSendMail_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_1", false);
		start_Hash.put("tSendMail_1", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_1";

	
		int tos_count_tSendMail_1 = 0;
		
    	class BytesLimit65535_tSendMail_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSendMail_1().limitLog4jByte();

 



/**
 * [tSendMail_1 begin ] stop
 */
	
	/**
	 * [tSendMail_1 main ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 

	String smtpHost_tSendMail_1 = context.ADS_EMAIL_SMTP_NAME;
        String smtpPort_tSendMail_1 = context.ADS_EMAIL_SMTP_PORT;
	String from_tSendMail_1 = (context.ADS_EMAIL_FROM);
    String to_tSendMail_1 = (context.ADS_EMAIL_TO).replace(";",",");
    String cc_tSendMail_1 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_1 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_1 = ("Talend Open Studio notification: "+context.JOB_NAME);
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_1 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_1 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_1 = new java.util.ArrayList<String>();
		attachments_tSendMail_1.add(context.logEmail);
		contentTransferEncoding_tSendMail_1.add("DEFAULT");	

	String message_tSendMail_1 = (("Please find the Talend Job Report") == null || "".equals("Please find the Talend Job Report")) ? "\"\"" : ("Please find the Talend Job Report") ;
	java.util.Properties props_tSendMail_1 = System.getProperties();     
	props_tSendMail_1.put("mail.smtp.host", smtpHost_tSendMail_1);
	props_tSendMail_1.put("mail.smtp.port", smtpPort_tSendMail_1);
		props_tSendMail_1.put("mail.mime.encodefilename", "true");
		props_tSendMail_1.put("mail.smtp.starttls.enable","true");     
	try {
		
		
			props_tSendMail_1.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_1 = javax.mail.Session.getInstance(props_tSendMail_1, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                
	final String decryptedPassword_tSendMail_1 = context.ADS_EMAIL_AUTHENTICATION_PASSWORD; 
				
				
				return new javax.mail.PasswordAuthentication(context.ADS_EMAIL_AUTHENTICATION_USER, decryptedPassword_tSendMail_1); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_1 = new javax.mail.internet.MimeMessage(session_tSendMail_1);
		msg_tSendMail_1.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_1, null));
		msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_1, false));
		if (cc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_1, false));
		if (bcc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_1, false));
		msg_tSendMail_1.setSubject(subject_tSendMail_1);

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < headers_tSendMail_1.size(); i_tSendMail_1++) {
			java.util.Map<String, String> header_tSendMail_1 = headers_tSendMail_1.get(i_tSendMail_1);
			msg_tSendMail_1.setHeader(header_tSendMail_1.get("KEY"), header_tSendMail_1.get("VALUE"));    
		}  
		msg_tSendMail_1.setSentDate(new Date());
		msg_tSendMail_1.setHeader("X-Priority", "3"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_1 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_1.setText(message_tSendMail_1,"ISO-8859-15", "html");
		mp_tSendMail_1.addBodyPart(mbpText_tSendMail_1);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_1 = null;

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < attachments_tSendMail_1.size(); i_tSendMail_1++){
			String filename_tSendMail_1 = attachments_tSendMail_1.get(i_tSendMail_1);
			javax.activation.FileDataSource fds_tSendMail_1 = null;
			java.io.File file_tSendMail_1 = new java.io.File(filename_tSendMail_1);
			
    		if (file_tSendMail_1.isDirectory()){
				java.io.File[] subFiles_tSendMail_1 = file_tSendMail_1.listFiles();
				for(java.io.File subFile_tSendMail_1 : subFiles_tSendMail_1){
					if (subFile_tSendMail_1.isFile()){
						fds_tSendMail_1 = new javax.activation.FileDataSource(subFile_tSendMail_1.getAbsolutePath());
						mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1));
						mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
						if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
					}
				}
    		}else{
				mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_1 = new javax.activation.FileDataSource(filename_tSendMail_1);
				mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1)); 
				mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
				if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
			}
		}
		// -- set the content --
		msg_tSendMail_1.setContent(mp_tSendMail_1);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_1 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_1.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_1.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_1.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_1.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_1.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_1);
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_1);
	} catch(java.lang.Exception e){
  		
			throw(e);
		
	}finally{
		props_tSendMail_1.remove("mail.smtp.host");
		props_tSendMail_1.remove("mail.smtp.port");
		
		props_tSendMail_1.remove("mail.mime.encodefilename");
		
			props_tSendMail_1.remove("mail.smtp.starttls.enable");
		
		props_tSendMail_1.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_1++;

/**
 * [tSendMail_1 main ] stop
 */
	
	/**
	 * [tSendMail_1 end ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 

ok_Hash.put("tSendMail_1", true);
end_Hash.put("tSendMail_1", System.currentTimeMillis());




/**
 * [tSendMail_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSendMail_1 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 1);
	}
	


public static class mainStruct implements routines.system.IPersistableRow<mainStruct> {
    final static byte[] commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];
    static byte[] commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length) {
				if(length < 1024 && commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length == 0) {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[1024];
				} else {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length);
			strReturn = new String(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mainStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class inputStruct implements routines.system.IPersistableRow<inputStruct> {
    final static byte[] commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];
    static byte[] commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];

	
			    public String rowNumber;

				public String getRowNumber () {
					return this.rowNumber;
				}
				
			    public String line;

				public String getLine () {
					return this.line;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length) {
				if(length < 1024 && commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length == 0) {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[1024];
				} else {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length);
			strReturn = new String(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy) {

        	try {

        		int length = 0;
		
					this.rowNumber = readString(dis);
					
					this.line = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.rowNumber,dos);
					
					// String
				
						writeString(this.line,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("rowNumber="+rowNumber);
		sb.append(",line="+line);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(inputStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];
    static byte[] commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length) {
				if(length < 1024 && commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length == 0) {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[1024];
				} else {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length);
			strReturn = new String(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputFullRow_1Struct implements routines.system.IPersistableRow<after_tFileInputFullRow_1Struct> {
    final static byte[] commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];
    static byte[] commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length) {
				if(length < 1024 && commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length == 0) {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[1024];
				} else {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length);
			strReturn = new String(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputFullRow_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputFullRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tFileInputDelimited_1Process(globalMap);

		row3Struct row3 = new row3Struct();
inputStruct input = new inputStruct();
mainStruct main = new mainStruct();






	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("main" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.logEmail)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("input" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookupStruct> tHash_Lookup_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookupStruct>) 
					globalMap.get( "tHash_Lookup_lookup" ))
					;					
					
	

lookupStruct lookupHashKey = new lookupStruct();
lookupStruct lookupDefault = new lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
mainStruct main_tmp = new mainStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String var1;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
inputStruct input_tmp = new inputStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputFullRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputFullRow_1", false);
		start_Hash.put("tFileInputFullRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputFullRow_1";

	
		int tos_count_tFileInputFullRow_1 = 0;
		
    	class BytesLimit65535_tFileInputFullRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputFullRow_1().limitLog4jByte();

	org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_1 = null;

	

	try{//}
		fid_tFileInputFullRow_1 =new org.talend.fileprocess.FileInputDelimited(context.SRC_LOAD_SHEET,"ISO-8859-15","","\n",true,0,0,-1,-1,false);
		while (fid_tFileInputFullRow_1.nextRecord()) {//}
			row3 = null;						
	boolean whetherReject_tFileInputFullRow_1 = false;
	row3 = new row3Struct();
		row3.line = fid_tFileInputFullRow_1.get(0);

 



/**
 * [tFileInputFullRow_1 begin ] stop
 */
	
	/**
	 * [tFileInputFullRow_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_1";

	

 


	tos_count_tFileInputFullRow_1++;

/**
 * [tFileInputFullRow_1 main ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.var1 = String.valueOf(Numeric.sequence("lineNumber",0,1)) ;// ###############################
        // ###############################
        // # Output tables

input = null;


// # Output table : 'input'
input_tmp.rowNumber = Var.var1 ;
input_tmp.line = row3.line ;
input = input_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "input"
if(input != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//input
			//input


			
				if(execStat){
					runStat.updateStatOnConnection("input"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooplookup = false;
       		  	    	
       		  	    	
 							lookupStruct lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		lookupHashKey.lookupNumber = input.rowNumber ;
                        		    		

								
		                        	lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_lookup.lookup( lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_lookup != null && tHash_Lookup_lookup.getCount(lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'lookup' and it contains more one result from keys :  lookup.lookupNumber = '" + lookupHashKey.lookupNumber + "'");
								} // G 071
							

							lookupStruct lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	lookupStruct fromLookup_lookup = null;
							lookup = lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_lookup !=null && tHash_Lookup_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_lookup = tHash_Lookup_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_lookup != null) {
								lookup = fromLookup_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

main = null;


// # Output table : 'main'
main_tmp.line = input.line + "," +lookup.responseStatus + "," +  lookup.resourceId + "," +  lookup.errorCode+ "," +   lookup.errorMessage ;
main = main_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "main"
if(main != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//main
			//main


			
				if(execStat){
					runStat.updateStatOnConnection("main"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(main.line != null) {
                        sb_tFileOutputDelimited_1.append(
                            main.line
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */

} // End of branch "main"





} // End of branch "input"







	
	/**
	 * [tFileInputFullRow_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_1";

	

	


            }
           	}finally{
           		if(fid_tFileInputFullRow_1!=null){
            		fid_tFileInputFullRow_1.close();
            	}
            }
            globalMap.put("tFileInputFullRow_1_NB_LINE", fid_tFileInputFullRow_1.getRowNumber());
 

ok_Hash.put("tFileInputFullRow_1", true);
end_Hash.put("tFileInputFullRow_1", System.currentTimeMillis());




/**
 * [tFileInputFullRow_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_lookup != null) {
						tHash_Lookup_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_lookup" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("input"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("main"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputFullRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tSendMail_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_lookup"); 
				     			
				try{
					
	
	/**
	 * [tFileInputFullRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_1";

	

 



/**
 * [tFileInputFullRow_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class lookupStruct implements routines.system.IPersistableComparableLookupRow<lookupStruct> {
    final static byte[] commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];
    static byte[] commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String responseStatus;

				public String getResponseStatus () {
					return this.responseStatus;
				}
				
			    public String rowId;

				public String getRowId () {
					return this.rowId;
				}
				
			    public String resourceId;

				public String getResourceId () {
					return this.resourceId;
				}
				
			    public String lookupNumber;

				public String getLookupNumber () {
					return this.lookupNumber;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.lookupNumber == null) ? 0 : this.lookupNumber.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final lookupStruct other = (lookupStruct) obj;
		
						if (this.lookupNumber == null) {
							if (other.lookupNumber != null)
								return false;
						
						} else if (!this.lookupNumber.equals(other.lookupNumber))
						
							return false;
					

		return true;
    }

	public void copyDataTo(lookupStruct other) {

		other.responseStatus = this.responseStatus;
	            other.rowId = this.rowId;
	            other.resourceId = this.resourceId;
	            other.lookupNumber = this.lookupNumber;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(lookupStruct other) {

		other.lookupNumber = this.lookupNumber;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length) {
				if(length < 1024 && commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length == 0) {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[1024];
				} else {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length);
			strReturn = new String(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy) {

        	try {

        		int length = 0;
		
					this.lookupNumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.lookupNumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.responseStatus = readString(dis,ois);
					
						this.rowId = readString(dis,ois);
					
						this.resourceId = readString(dis,ois);
					
						this.errorCode = readString(dis,ois);
					
						this.errorMessage = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.responseStatus, dos, oos);
					
						writeString(this.rowId, dos, oos);
					
						writeString(this.resourceId, dos, oos);
					
						writeString(this.errorCode, dos, oos);
					
						writeString(this.errorMessage, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("responseStatus="+responseStatus);
		sb.append(",rowId="+rowId);
		sb.append(",resourceId="+resourceId);
		sb.append(",lookupNumber="+lookupNumber);
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.lookupNumber, other.lookupNumber);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];
    static byte[] commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];

	
			    public String responseStatus;

				public String getResponseStatus () {
					return this.responseStatus;
				}
				
			    public String rowId;

				public String getRowId () {
					return this.rowId;
				}
				
			    public String resourceId;

				public String getResourceId () {
					return this.resourceId;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length) {
				if(length < 1024 && commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length == 0) {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[1024];
				} else {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length);
			strReturn = new String(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy) {

        	try {

        		int length = 0;
		
					this.responseStatus = readString(dis);
					
					this.rowId = readString(dis);
					
					this.resourceId = readString(dis);
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.responseStatus,dos);
					
					// String
				
						writeString(this.rowId,dos);
					
					// String
				
						writeString(this.resourceId,dos);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("responseStatus="+responseStatus);
		sb.append(",rowId="+rowId);
		sb.append(",resourceId="+resourceId);
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
lookupStruct lookup = new lookupStruct();





	
	/**
	 * [tAdvancedHash_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_lookup", false);
		start_Hash.put("tAdvancedHash_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_lookup";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("lookup" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_lookup = 0;
		
    	class BytesLimit65535_tAdvancedHash_lookup{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_lookup().limitLog4jByte();

			   		// connection name:lookup
			   		// source node:tMap_3 - inputs:(row4) outputs:(lookup,lookup) | target node:tAdvancedHash_lookup - inputs:(lookup) outputs:()
			   		// linked node: tMap_1 - inputs:(input,lookup) outputs:(main)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookupStruct> tHash_Lookup_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<lookupStruct>getLookup(matchingModeEnum_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_lookup", tHash_Lookup_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_lookup begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		
    	class BytesLimit65535_tMap_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_3().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	String var1;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
lookupStruct lookup_tmp = new lookupStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = context.SUCCESS_LOG;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.SUCCESS_LOG, "US-ASCII",",","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row4 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row4 = new row4Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row4.responseStatus = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row4.rowId = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row4.resourceId = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row4.errorCode = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row4.errorMessage = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row4 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.var1 = String.valueOf(Numeric.sequence("lookupNumber",0,1)) ;// ###############################
        // ###############################
        // # Output tables

lookup = null;


// # Output table : 'lookup'
lookup_tmp.responseStatus = row4.responseStatus ;
lookup_tmp.rowId = row4.rowId ;
lookup_tmp.resourceId = row4.resourceId ;
lookup_tmp.lookupNumber = Var.var1 ;
lookup_tmp.errorCode = row4.errorCode ;
lookup_tmp.errorMessage = row4.errorMessage ;
lookup = lookup_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
// Start of branch "lookup"
if(lookup != null) { 



	
	/**
	 * [tAdvancedHash_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_lookup";

	

			//lookup
			//lookup


			
				if(execStat){
					runStat.updateStatOnConnection("lookup"+iterateId,1, 1);
				} 
			

		


			   
			   

					lookupStruct lookup_HashRow = new lookupStruct();
		   	   	   
				
				lookup_HashRow.responseStatus = lookup.responseStatus;
				
				lookup_HashRow.rowId = lookup.rowId;
				
				lookup_HashRow.resourceId = lookup.resourceId;
				
				lookup_HashRow.lookupNumber = lookup.lookupNumber;
				
				lookup_HashRow.errorCode = lookup.errorCode;
				
				lookup_HashRow.errorMessage = lookup.errorMessage;
				
			tHash_Lookup_lookup.put(lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_lookup++;

/**
 * [tAdvancedHash_lookup main ] stop
 */

} // End of branch "lookup"





} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.SUCCESS_LOG) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_lookup";

	

tHash_Lookup_lookup.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("lookup"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_lookup", true);
end_Hash.put("tAdvancedHash_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_lookup end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_lookup";

	

 



/**
 * [tAdvancedHash_lookup finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_2", false);
		start_Hash.put("tPrejob_2", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_2";

	
		int tos_count_tPrejob_2 = 0;
		
    	class BytesLimit65535_tPrejob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_2().limitLog4jByte();

 



/**
 * [tPrejob_2 begin ] stop
 */
	
	/**
	 * [tPrejob_2 main ] start
	 */

	

	
	
	currentComponent="tPrejob_2";

	

 


	tos_count_tPrejob_2++;

/**
 * [tPrejob_2 main ] stop
 */
	
	/**
	 * [tPrejob_2 end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";

	

 

ok_Hash.put("tPrejob_2", true);
end_Hash.put("tPrejob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileInputDelimited_3Process(globalMap);



/**
 * [tPrejob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_2 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_2";

	

 



/**
 * [tPrejob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];
    static byte[] commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length) {
				if(length < 1024 && commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy.length == 0) {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[1024];
				} else {
   					commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length);
			strReturn = new String(commonByteArray_ADS_ADSLoad_SubJob_SendEmail_Copy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_ADSLoad_SubJob_SendEmail_Copy) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tContextLoad_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_2", false);
		start_Hash.put("tContextLoad_2", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_2 = 0;
		
    	class BytesLimit65535_tContextLoad_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_2().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_2 = 0;

 



/**
 * [tContextLoad_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_3().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try{
					
						Object filename_tFileInputDelimited_3 = context.ENV_CONTEXT_FILE;
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(context.ENV_CONTEXT_FILE, "ISO-8859-15","=","\n",true,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						row2 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									row2 = new row2Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
							row2.key = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
							row2.value = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row2 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tContextLoad_2 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_2 = null;
                    String key_tContextLoad_2 = null;
                      if (row2.key != null){
                          tmp_key_tContextLoad_2 = row2.key.trim();
                        if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2.startsWith("!") )){
                          tmp_key_tContextLoad_2 = null;
                        } else {
                          row2.key = tmp_key_tContextLoad_2;
                        }
                      }
                        if(row2.key != null) {
                    key_tContextLoad_2 =
                        row2.key;
                        }
                    String value_tContextLoad_2 = null;
                        if(row2.value != null) {
                    value_tContextLoad_2 =
                        row2.value;
                        }
				
				String currentValue_tContextLoad_2 = value_tContextLoad_2;
				

                        System.out.println("tContextLoad_2 set key \"" + key_tContextLoad_2 + "\" with value \"" + currentValue_tContextLoad_2 + "\"");
  if (tmp_key_tContextLoad_2 != null){
  try{
        if(key_tContextLoad_2!=null && "SUCCESS_LOG".equals(key_tContextLoad_2))
        {
           context.SUCCESS_LOG=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "FAILURE_LOG".equals(key_tContextLoad_2))
        {
           context.FAILURE_LOG=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "logEmail".equals(key_tContextLoad_2))
        {
           context.logEmail=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "JOB_NAME".equals(key_tContextLoad_2))
        {
           context.JOB_NAME=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "SRC_LOAD_SHEET".equals(key_tContextLoad_2))
        {
           context.SRC_LOAD_SHEET=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_SETUP_LOADSHEET_APPLICATION_XLSX".equals(key_tContextLoad_2))
        {
           context.ADS_SETUP_LOADSHEET_APPLICATION_XLSX=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX".equals(key_tContextLoad_2))
        {
           context.ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX".equals(key_tContextLoad_2))
        {
           context.ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX".equals(key_tContextLoad_2))
        {
           context.ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX".equals(key_tContextLoad_2))
        {
           context.ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_SETUP_LOADSHEET_SCHEDULE_XLSX".equals(key_tContextLoad_2))
        {
           context.ADS_SETUP_LOADSHEET_SCHEDULE_XLSX=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX".equals(key_tContextLoad_2))
        {
           context.ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX".equals(key_tContextLoad_2))
        {
           context.ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_SETUP_LOADSHEET_USER_ROLES_XLSX".equals(key_tContextLoad_2))
        {
           context.ADS_SETUP_LOADSHEET_USER_ROLES_XLSX=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_EMAIL_AUTHENTICATION_PASSWORD".equals(key_tContextLoad_2))
        {
           context.ADS_EMAIL_AUTHENTICATION_PASSWORD=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_EMAIL_AUTHENTICATION_USER".equals(key_tContextLoad_2))
        {
           context.ADS_EMAIL_AUTHENTICATION_USER=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_EMAIL_FROM".equals(key_tContextLoad_2))
        {
           context.ADS_EMAIL_FROM=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_EMAIL_SMTP_NAME".equals(key_tContextLoad_2))
        {
           context.ADS_EMAIL_SMTP_NAME=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_EMAIL_SMTP_PORT".equals(key_tContextLoad_2))
        {
           context.ADS_EMAIL_SMTP_PORT=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_EMAIL_TO".equals(key_tContextLoad_2))
        {
           context.ADS_EMAIL_TO=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ADS_LOG_DIRECTORY".equals(key_tContextLoad_2))
        {
           context.ADS_LOG_DIRECTORY=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ENV_CONTEXT_FILE".equals(key_tContextLoad_2))
        {
           context.ENV_CONTEXT_FILE=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "FORMAT_DATE_TO_STRING".equals(key_tContextLoad_2))
        {
           context.FORMAT_DATE_TO_STRING=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "FORMAT_DATETIME_TO_STRING".equals(key_tContextLoad_2))
        {
           context.FORMAT_DATETIME_TO_STRING=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "JOB_ID_XPATH".equals(key_tContextLoad_2))
        {
           context.JOB_ID_XPATH=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "LOAD_FILES_LOC".equals(key_tContextLoad_2))
        {
           context.LOAD_FILES_LOC=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "OAUTH_BEARER_TOKEN".equals(key_tContextLoad_2))
        {
           context.OAUTH_BEARER_TOKEN=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "RESOURCE_XPATH_USER_NATIVE".equals(key_tContextLoad_2))
        {
           context.RESOURCE_XPATH_USER_NATIVE=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_DATA_RESOURCE_XPATH".equals(key_tContextLoad_2))
        {
           context.REST_DATA_RESOURCE_XPATH=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_REQ_JSON".equals(key_tContextLoad_2))
        {
           context.REST_REQ_JSON=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_RESPONSE_SELF_HREF_VALUE".equals(key_tContextLoad_2))
        {
           context.REST_RESPONSE_SELF_HREF_VALUE=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_AGGREGATES".equals(key_tContextLoad_2))
        {
           context.REST_URL_AGGREGATES=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_APPLICATIONS".equals(key_tContextLoad_2))
        {
           context.REST_URL_APPLICATIONS=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_AUDIT_EVENTS".equals(key_tContextLoad_2))
        {
           context.REST_URL_AUDIT_EVENTS=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_AUDIT_REASON_CODES".equals(key_tContextLoad_2))
        {
           context.REST_URL_AUDIT_REASON_CODES=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_BASE".equals(key_tContextLoad_2))
        {
           context.REST_URL_BASE=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_CONTROLLERS".equals(key_tContextLoad_2))
        {
           context.REST_URL_CONTROLLERS=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_DATA_CENTERS".equals(key_tContextLoad_2))
        {
           context.REST_URL_DATA_CENTERS=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_EMAIL_TYPES".equals(key_tContextLoad_2))
        {
           context.REST_URL_EMAIL_TYPES=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_HOSTS".equals(key_tContextLoad_2))
        {
           context.REST_URL_HOSTS=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_MIGRATION_TIMES".equals(key_tContextLoad_2))
        {
           context.REST_URL_MIGRATION_TIMES=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_MST_EMAILTYPES".equals(key_tContextLoad_2))
        {
           context.REST_URL_MST_EMAILTYPES=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "new1".equals(key_tContextLoad_2))
        {
           context.new1=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_NAS_VOLUMES".equals(key_tContextLoad_2))
        {
           context.REST_URL_NAS_VOLUMES=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_QTREES".equals(key_tContextLoad_2))
        {
           context.REST_URL_QTREES=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_SCHEDULES".equals(key_tContextLoad_2))
        {
           context.REST_URL_SCHEDULES=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_SHARES".equals(key_tContextLoad_2))
        {
           context.REST_URL_SHARES=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_STORAGE".equals(key_tContextLoad_2))
        {
           context.REST_URL_STORAGE=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_SYS_CONFIG_PROPERTY_TYPES".equals(key_tContextLoad_2))
        {
           context.REST_URL_SYS_CONFIG_PROPERTY_TYPES=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_USER_CORPORATE".equals(key_tContextLoad_2))
        {
           context.REST_URL_USER_CORPORATE=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_USER_NATIVES".equals(key_tContextLoad_2))
        {
           context.REST_URL_USER_NATIVES=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "REST_URL_USER_ROLES".equals(key_tContextLoad_2))
        {
           context.REST_URL_USER_ROLES=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "ROLE_LOOKUP_CSV".equals(key_tContextLoad_2))
        {
           context.ROLE_LOOKUP_CSV=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "TEST_ROW_COUNT_LIMIT".equals(key_tContextLoad_2))
        {
           context.TEST_ROW_COUNT_LIMIT=value_tContextLoad_2;
        }


        if (context.getProperty(key_tContextLoad_2)!=null)
        {
            assignList_tContextLoad_2.add(key_tContextLoad_2);
        }else  {
            newPropertyList_tContextLoad_2.add(key_tContextLoad_2);
        }
        if(value_tContextLoad_2 == null){
            context.setProperty(key_tContextLoad_2, "");
        }else{
            context.setProperty(key_tContextLoad_2,value_tContextLoad_2);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_2 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_2++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_2++;

/**
 * [tContextLoad_2 main ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)(context.ENV_CONTEXT_FILE) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tContextLoad_2 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	
	
	java.util.Enumeration<?> enu_tContextLoad_2 = context.propertyNames();
    while(enu_tContextLoad_2.hasMoreElements())
    {           
    	String key_tContextLoad_2 = (String)enu_tContextLoad_2.nextElement();
        if(!assignList_tContextLoad_2.contains(key_tContextLoad_2) && !newPropertyList_tContextLoad_2.contains(key_tContextLoad_2))
        {
            noAssignList_tContextLoad_2.add(key_tContextLoad_2);
        }          
    } 

    String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2.toString();
    String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2.substring(1, newPropertyStr_tContextLoad_2.length() - 1);
    
    String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2.toString();
    String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2.substring(1, noAssignStr_tContextLoad_2.length() - 1);
    
    globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT", newProperty_tContextLoad_2);
    globalMap.put("tContextLoad_2_KEY_NOT_LOADED", noAssign_tContextLoad_2);

    globalMap.put("tContextLoad_2_NB_LINE",nb_line_tContextLoad_2);

	List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_2));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_2", true);
end_Hash.put("tContextLoad_2", System.currentTimeMillis());




/**
 * [tContextLoad_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tContextLoad_2 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

 



/**
 * [tContextLoad_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ADSLoad_SubJob_SendEmail_Copy ADSLoad_SubJob_SendEmail_CopyClass = new ADSLoad_SubJob_SendEmail_Copy();

        int exitCode = ADSLoad_SubJob_SendEmail_CopyClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ADSLoad_SubJob_SendEmail_Copy.class.getClassLoader().getResourceAsStream("ads/adsload_subjob_sendemail_copy_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("SUCCESS_LOG", "id_String");
				
                context.SUCCESS_LOG=(String) context.getProperty("SUCCESS_LOG");
				    context.setContextType("FAILURE_LOG", "id_String");
				
                context.FAILURE_LOG=(String) context.getProperty("FAILURE_LOG");
				    context.setContextType("logEmail", "id_String");
				
                context.logEmail=(String) context.getProperty("logEmail");
				    context.setContextType("JOB_NAME", "id_String");
				
                context.JOB_NAME=(String) context.getProperty("JOB_NAME");
				    context.setContextType("SRC_LOAD_SHEET", "id_String");
				
                context.SRC_LOAD_SHEET=(String) context.getProperty("SRC_LOAD_SHEET");
				    context.setContextType("ADS_SETUP_LOADSHEET_APPLICATION_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_APPLICATION_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_APPLICATION_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_SCHEDULE_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_USER_ROLES_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX");
				    context.setContextType("ADS_EMAIL_AUTHENTICATION_PASSWORD", "id_String");
				
                context.ADS_EMAIL_AUTHENTICATION_PASSWORD=(String) context.getProperty("ADS_EMAIL_AUTHENTICATION_PASSWORD");
				    context.setContextType("ADS_EMAIL_AUTHENTICATION_USER", "id_String");
				
                context.ADS_EMAIL_AUTHENTICATION_USER=(String) context.getProperty("ADS_EMAIL_AUTHENTICATION_USER");
				    context.setContextType("ADS_EMAIL_FROM", "id_String");
				
                context.ADS_EMAIL_FROM=(String) context.getProperty("ADS_EMAIL_FROM");
				    context.setContextType("ADS_EMAIL_SMTP_NAME", "id_String");
				
                context.ADS_EMAIL_SMTP_NAME=(String) context.getProperty("ADS_EMAIL_SMTP_NAME");
				    context.setContextType("ADS_EMAIL_SMTP_PORT", "id_String");
				
                context.ADS_EMAIL_SMTP_PORT=(String) context.getProperty("ADS_EMAIL_SMTP_PORT");
				    context.setContextType("ADS_EMAIL_TO", "id_String");
				
                context.ADS_EMAIL_TO=(String) context.getProperty("ADS_EMAIL_TO");
				    context.setContextType("ADS_LOG_DIRECTORY", "id_Directory");
				
                context.ADS_LOG_DIRECTORY=(String) context.getProperty("ADS_LOG_DIRECTORY");
				    context.setContextType("ENV_CONTEXT_FILE", "id_String");
				
                context.ENV_CONTEXT_FILE=(String) context.getProperty("ENV_CONTEXT_FILE");
				    context.setContextType("FORMAT_DATE_TO_STRING", "id_String");
				
                context.FORMAT_DATE_TO_STRING=(String) context.getProperty("FORMAT_DATE_TO_STRING");
				    context.setContextType("FORMAT_DATETIME_TO_STRING", "id_String");
				
                context.FORMAT_DATETIME_TO_STRING=(String) context.getProperty("FORMAT_DATETIME_TO_STRING");
				    context.setContextType("JOB_ID_XPATH", "id_String");
				
                context.JOB_ID_XPATH=(String) context.getProperty("JOB_ID_XPATH");
				    context.setContextType("LOAD_FILES_LOC", "id_Directory");
				
                context.LOAD_FILES_LOC=(String) context.getProperty("LOAD_FILES_LOC");
				    context.setContextType("OAUTH_BEARER_TOKEN", "id_String");
				
                context.OAUTH_BEARER_TOKEN=(String) context.getProperty("OAUTH_BEARER_TOKEN");
				    context.setContextType("RESOURCE_XPATH_USER_NATIVE", "id_String");
				
                context.RESOURCE_XPATH_USER_NATIVE=(String) context.getProperty("RESOURCE_XPATH_USER_NATIVE");
				    context.setContextType("REST_DATA_RESOURCE_XPATH", "id_String");
				
                context.REST_DATA_RESOURCE_XPATH=(String) context.getProperty("REST_DATA_RESOURCE_XPATH");
				    context.setContextType("REST_REQ_JSON", "id_String");
				
                context.REST_REQ_JSON=(String) context.getProperty("REST_REQ_JSON");
				    context.setContextType("REST_RESPONSE_SELF_HREF_VALUE", "id_String");
				
                context.REST_RESPONSE_SELF_HREF_VALUE=(String) context.getProperty("REST_RESPONSE_SELF_HREF_VALUE");
				    context.setContextType("REST_URL_AGGREGATES", "id_String");
				
                context.REST_URL_AGGREGATES=(String) context.getProperty("REST_URL_AGGREGATES");
				    context.setContextType("REST_URL_APPLICATIONS", "id_String");
				
                context.REST_URL_APPLICATIONS=(String) context.getProperty("REST_URL_APPLICATIONS");
				    context.setContextType("REST_URL_AUDIT_EVENTS", "id_String");
				
                context.REST_URL_AUDIT_EVENTS=(String) context.getProperty("REST_URL_AUDIT_EVENTS");
				    context.setContextType("REST_URL_AUDIT_REASON_CODES", "id_String");
				
                context.REST_URL_AUDIT_REASON_CODES=(String) context.getProperty("REST_URL_AUDIT_REASON_CODES");
				    context.setContextType("REST_URL_BASE", "id_String");
				
                context.REST_URL_BASE=(String) context.getProperty("REST_URL_BASE");
				    context.setContextType("REST_URL_CONTROLLERS", "id_String");
				
                context.REST_URL_CONTROLLERS=(String) context.getProperty("REST_URL_CONTROLLERS");
				    context.setContextType("REST_URL_DATA_CENTERS", "id_String");
				
                context.REST_URL_DATA_CENTERS=(String) context.getProperty("REST_URL_DATA_CENTERS");
				    context.setContextType("REST_URL_EMAIL_TYPES", "id_String");
				
                context.REST_URL_EMAIL_TYPES=(String) context.getProperty("REST_URL_EMAIL_TYPES");
				    context.setContextType("REST_URL_HOSTS", "id_String");
				
                context.REST_URL_HOSTS=(String) context.getProperty("REST_URL_HOSTS");
				    context.setContextType("REST_URL_MIGRATION_TIMES", "id_String");
				
                context.REST_URL_MIGRATION_TIMES=(String) context.getProperty("REST_URL_MIGRATION_TIMES");
				    context.setContextType("REST_URL_MST_EMAILTYPES", "id_String");
				
                context.REST_URL_MST_EMAILTYPES=(String) context.getProperty("REST_URL_MST_EMAILTYPES");
				    context.setContextType("new1", "id_String");
				
                context.new1=(String) context.getProperty("new1");
				    context.setContextType("REST_URL_NAS_VOLUMES", "id_String");
				
                context.REST_URL_NAS_VOLUMES=(String) context.getProperty("REST_URL_NAS_VOLUMES");
				    context.setContextType("REST_URL_QTREES", "id_String");
				
                context.REST_URL_QTREES=(String) context.getProperty("REST_URL_QTREES");
				    context.setContextType("REST_URL_SCHEDULES", "id_String");
				
                context.REST_URL_SCHEDULES=(String) context.getProperty("REST_URL_SCHEDULES");
				    context.setContextType("REST_URL_SHARES", "id_String");
				
                context.REST_URL_SHARES=(String) context.getProperty("REST_URL_SHARES");
				    context.setContextType("REST_URL_STORAGE", "id_String");
				
                context.REST_URL_STORAGE=(String) context.getProperty("REST_URL_STORAGE");
				    context.setContextType("REST_URL_SYS_CONFIG_PROPERTY_TYPES", "id_String");
				
                context.REST_URL_SYS_CONFIG_PROPERTY_TYPES=(String) context.getProperty("REST_URL_SYS_CONFIG_PROPERTY_TYPES");
				    context.setContextType("REST_URL_USER_CORPORATE", "id_String");
				
                context.REST_URL_USER_CORPORATE=(String) context.getProperty("REST_URL_USER_CORPORATE");
				    context.setContextType("REST_URL_USER_NATIVES", "id_String");
				
                context.REST_URL_USER_NATIVES=(String) context.getProperty("REST_URL_USER_NATIVES");
				    context.setContextType("REST_URL_USER_ROLES", "id_String");
				
                context.REST_URL_USER_ROLES=(String) context.getProperty("REST_URL_USER_ROLES");
				    context.setContextType("ROLE_LOOKUP_CSV", "id_String");
				
                context.ROLE_LOOKUP_CSV=(String) context.getProperty("ROLE_LOOKUP_CSV");
				    context.setContextType("TEST_ROW_COUNT_LIMIT", "id_String");
				
                context.TEST_ROW_COUNT_LIMIT=(String) context.getProperty("TEST_ROW_COUNT_LIMIT");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("SUCCESS_LOG")) {
                context.SUCCESS_LOG = (String) parentContextMap.get("SUCCESS_LOG");
            }if (parentContextMap.containsKey("FAILURE_LOG")) {
                context.FAILURE_LOG = (String) parentContextMap.get("FAILURE_LOG");
            }if (parentContextMap.containsKey("logEmail")) {
                context.logEmail = (String) parentContextMap.get("logEmail");
            }if (parentContextMap.containsKey("JOB_NAME")) {
                context.JOB_NAME = (String) parentContextMap.get("JOB_NAME");
            }if (parentContextMap.containsKey("SRC_LOAD_SHEET")) {
                context.SRC_LOAD_SHEET = (String) parentContextMap.get("SRC_LOAD_SHEET");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_APPLICATION_XLSX")) {
                context.ADS_SETUP_LOADSHEET_APPLICATION_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_APPLICATION_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX")) {
                context.ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX")) {
                context.ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX")) {
                context.ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX")) {
                context.ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX")) {
                context.ADS_SETUP_LOADSHEET_SCHEDULE_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX")) {
                context.ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX")) {
                context.ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX")) {
                context.ADS_SETUP_LOADSHEET_USER_ROLES_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX");
            }if (parentContextMap.containsKey("ADS_EMAIL_AUTHENTICATION_PASSWORD")) {
                context.ADS_EMAIL_AUTHENTICATION_PASSWORD = (String) parentContextMap.get("ADS_EMAIL_AUTHENTICATION_PASSWORD");
            }if (parentContextMap.containsKey("ADS_EMAIL_AUTHENTICATION_USER")) {
                context.ADS_EMAIL_AUTHENTICATION_USER = (String) parentContextMap.get("ADS_EMAIL_AUTHENTICATION_USER");
            }if (parentContextMap.containsKey("ADS_EMAIL_FROM")) {
                context.ADS_EMAIL_FROM = (String) parentContextMap.get("ADS_EMAIL_FROM");
            }if (parentContextMap.containsKey("ADS_EMAIL_SMTP_NAME")) {
                context.ADS_EMAIL_SMTP_NAME = (String) parentContextMap.get("ADS_EMAIL_SMTP_NAME");
            }if (parentContextMap.containsKey("ADS_EMAIL_SMTP_PORT")) {
                context.ADS_EMAIL_SMTP_PORT = (String) parentContextMap.get("ADS_EMAIL_SMTP_PORT");
            }if (parentContextMap.containsKey("ADS_EMAIL_TO")) {
                context.ADS_EMAIL_TO = (String) parentContextMap.get("ADS_EMAIL_TO");
            }if (parentContextMap.containsKey("ADS_LOG_DIRECTORY")) {
                context.ADS_LOG_DIRECTORY = (String) parentContextMap.get("ADS_LOG_DIRECTORY");
            }if (parentContextMap.containsKey("ENV_CONTEXT_FILE")) {
                context.ENV_CONTEXT_FILE = (String) parentContextMap.get("ENV_CONTEXT_FILE");
            }if (parentContextMap.containsKey("FORMAT_DATE_TO_STRING")) {
                context.FORMAT_DATE_TO_STRING = (String) parentContextMap.get("FORMAT_DATE_TO_STRING");
            }if (parentContextMap.containsKey("FORMAT_DATETIME_TO_STRING")) {
                context.FORMAT_DATETIME_TO_STRING = (String) parentContextMap.get("FORMAT_DATETIME_TO_STRING");
            }if (parentContextMap.containsKey("JOB_ID_XPATH")) {
                context.JOB_ID_XPATH = (String) parentContextMap.get("JOB_ID_XPATH");
            }if (parentContextMap.containsKey("LOAD_FILES_LOC")) {
                context.LOAD_FILES_LOC = (String) parentContextMap.get("LOAD_FILES_LOC");
            }if (parentContextMap.containsKey("OAUTH_BEARER_TOKEN")) {
                context.OAUTH_BEARER_TOKEN = (String) parentContextMap.get("OAUTH_BEARER_TOKEN");
            }if (parentContextMap.containsKey("RESOURCE_XPATH_USER_NATIVE")) {
                context.RESOURCE_XPATH_USER_NATIVE = (String) parentContextMap.get("RESOURCE_XPATH_USER_NATIVE");
            }if (parentContextMap.containsKey("REST_DATA_RESOURCE_XPATH")) {
                context.REST_DATA_RESOURCE_XPATH = (String) parentContextMap.get("REST_DATA_RESOURCE_XPATH");
            }if (parentContextMap.containsKey("REST_REQ_JSON")) {
                context.REST_REQ_JSON = (String) parentContextMap.get("REST_REQ_JSON");
            }if (parentContextMap.containsKey("REST_RESPONSE_SELF_HREF_VALUE")) {
                context.REST_RESPONSE_SELF_HREF_VALUE = (String) parentContextMap.get("REST_RESPONSE_SELF_HREF_VALUE");
            }if (parentContextMap.containsKey("REST_URL_AGGREGATES")) {
                context.REST_URL_AGGREGATES = (String) parentContextMap.get("REST_URL_AGGREGATES");
            }if (parentContextMap.containsKey("REST_URL_APPLICATIONS")) {
                context.REST_URL_APPLICATIONS = (String) parentContextMap.get("REST_URL_APPLICATIONS");
            }if (parentContextMap.containsKey("REST_URL_AUDIT_EVENTS")) {
                context.REST_URL_AUDIT_EVENTS = (String) parentContextMap.get("REST_URL_AUDIT_EVENTS");
            }if (parentContextMap.containsKey("REST_URL_AUDIT_REASON_CODES")) {
                context.REST_URL_AUDIT_REASON_CODES = (String) parentContextMap.get("REST_URL_AUDIT_REASON_CODES");
            }if (parentContextMap.containsKey("REST_URL_BASE")) {
                context.REST_URL_BASE = (String) parentContextMap.get("REST_URL_BASE");
            }if (parentContextMap.containsKey("REST_URL_CONTROLLERS")) {
                context.REST_URL_CONTROLLERS = (String) parentContextMap.get("REST_URL_CONTROLLERS");
            }if (parentContextMap.containsKey("REST_URL_DATA_CENTERS")) {
                context.REST_URL_DATA_CENTERS = (String) parentContextMap.get("REST_URL_DATA_CENTERS");
            }if (parentContextMap.containsKey("REST_URL_EMAIL_TYPES")) {
                context.REST_URL_EMAIL_TYPES = (String) parentContextMap.get("REST_URL_EMAIL_TYPES");
            }if (parentContextMap.containsKey("REST_URL_HOSTS")) {
                context.REST_URL_HOSTS = (String) parentContextMap.get("REST_URL_HOSTS");
            }if (parentContextMap.containsKey("REST_URL_MIGRATION_TIMES")) {
                context.REST_URL_MIGRATION_TIMES = (String) parentContextMap.get("REST_URL_MIGRATION_TIMES");
            }if (parentContextMap.containsKey("REST_URL_MST_EMAILTYPES")) {
                context.REST_URL_MST_EMAILTYPES = (String) parentContextMap.get("REST_URL_MST_EMAILTYPES");
            }if (parentContextMap.containsKey("new1")) {
                context.new1 = (String) parentContextMap.get("new1");
            }if (parentContextMap.containsKey("REST_URL_NAS_VOLUMES")) {
                context.REST_URL_NAS_VOLUMES = (String) parentContextMap.get("REST_URL_NAS_VOLUMES");
            }if (parentContextMap.containsKey("REST_URL_QTREES")) {
                context.REST_URL_QTREES = (String) parentContextMap.get("REST_URL_QTREES");
            }if (parentContextMap.containsKey("REST_URL_SCHEDULES")) {
                context.REST_URL_SCHEDULES = (String) parentContextMap.get("REST_URL_SCHEDULES");
            }if (parentContextMap.containsKey("REST_URL_SHARES")) {
                context.REST_URL_SHARES = (String) parentContextMap.get("REST_URL_SHARES");
            }if (parentContextMap.containsKey("REST_URL_STORAGE")) {
                context.REST_URL_STORAGE = (String) parentContextMap.get("REST_URL_STORAGE");
            }if (parentContextMap.containsKey("REST_URL_SYS_CONFIG_PROPERTY_TYPES")) {
                context.REST_URL_SYS_CONFIG_PROPERTY_TYPES = (String) parentContextMap.get("REST_URL_SYS_CONFIG_PROPERTY_TYPES");
            }if (parentContextMap.containsKey("REST_URL_USER_CORPORATE")) {
                context.REST_URL_USER_CORPORATE = (String) parentContextMap.get("REST_URL_USER_CORPORATE");
            }if (parentContextMap.containsKey("REST_URL_USER_NATIVES")) {
                context.REST_URL_USER_NATIVES = (String) parentContextMap.get("REST_URL_USER_NATIVES");
            }if (parentContextMap.containsKey("REST_URL_USER_ROLES")) {
                context.REST_URL_USER_ROLES = (String) parentContextMap.get("REST_URL_USER_ROLES");
            }if (parentContextMap.containsKey("ROLE_LOOKUP_CSV")) {
                context.ROLE_LOOKUP_CSV = (String) parentContextMap.get("ROLE_LOOKUP_CSV");
            }if (parentContextMap.containsKey("TEST_ROW_COUNT_LIMIT")) {
                context.TEST_ROW_COUNT_LIMIT = (String) parentContextMap.get("TEST_ROW_COUNT_LIMIT");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_2) {
globalMap.put("tPrejob_2_SUBPROCESS_STATE", -1);

e_tPrejob_2.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputFullRow_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputFullRow_1) {
globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", -1);

e_tFileInputFullRow_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ADSLoad_SubJob_SendEmail_Copy");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     152609 characters generated by Talend Open Studio for Data Integration 
 *     on the March 24, 2018 12:27:32 PM EDT
 ************************************************************************************************/