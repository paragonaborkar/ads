// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ads_data_no_git.oci_load_master_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: OCI_Load_Master Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.0.20170510_1410
 * @status 
 */
public class OCI_Load_Master implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(logDir != null){
				
					this.setProperty("logDir", logDir.toString());
				
			}
			
			if(ADS_EMAIL_AUTHENTICATION_PASSWORD != null){
				
					this.setProperty("ADS_EMAIL_AUTHENTICATION_PASSWORD", ADS_EMAIL_AUTHENTICATION_PASSWORD.toString());
				
			}
			
			if(ADS_EMAIL_AUTHENTICATION_USER != null){
				
					this.setProperty("ADS_EMAIL_AUTHENTICATION_USER", ADS_EMAIL_AUTHENTICATION_USER.toString());
				
			}
			
			if(ADS_EMAIL_FROM != null){
				
					this.setProperty("ADS_EMAIL_FROM", ADS_EMAIL_FROM.toString());
				
			}
			
			if(ADS_EMAIL_SMTP_NAME != null){
				
					this.setProperty("ADS_EMAIL_SMTP_NAME", ADS_EMAIL_SMTP_NAME.toString());
				
			}
			
			if(ADS_EMAIL_SMTP_PORT != null){
				
					this.setProperty("ADS_EMAIL_SMTP_PORT", ADS_EMAIL_SMTP_PORT.toString());
				
			}
			
			if(ADS_EMAIL_TO != null){
				
					this.setProperty("ADS_EMAIL_TO", ADS_EMAIL_TO.toString());
				
			}
			
			if(ADS_LOG_DIRECTORY != null){
				
					this.setProperty("ADS_LOG_DIRECTORY", ADS_LOG_DIRECTORY.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_APPLICATION_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_APPLICATION_XLSX", ADS_SETUP_LOADSHEET_APPLICATION_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX", ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX", ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX", ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX", ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_SCHEDULE_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX", ADS_SETUP_LOADSHEET_SCHEDULE_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX", ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX", ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX.toString());
				
			}
			
			if(ADS_SETUP_LOADSHEET_USER_ROLES_XLSX != null){
				
					this.setProperty("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX", ADS_SETUP_LOADSHEET_USER_ROLES_XLSX.toString());
				
			}
			
			if(ENV_CONTEXT_FILE != null){
				
					this.setProperty("ENV_CONTEXT_FILE", ENV_CONTEXT_FILE.toString());
				
			}
			
			if(FORMAT_DATE_TO_STRING != null){
				
					this.setProperty("FORMAT_DATE_TO_STRING", FORMAT_DATE_TO_STRING.toString());
				
			}
			
			if(FORMAT_DATETIME_TO_STRING != null){
				
					this.setProperty("FORMAT_DATETIME_TO_STRING", FORMAT_DATETIME_TO_STRING.toString());
				
			}
			
			if(JOB_ID_XPATH != null){
				
					this.setProperty("JOB_ID_XPATH", JOB_ID_XPATH.toString());
				
			}
			
			if(JOB_NAME != null){
				
					this.setProperty("JOB_NAME", JOB_NAME.toString());
				
			}
			
			if(JOB_RUN_NAME != null){
				
					this.setProperty("JOB_RUN_NAME", JOB_RUN_NAME.toString());
				
			}
			
			if(JOB_SUBMITTED_BY != null){
				
					this.setProperty("JOB_SUBMITTED_BY", JOB_SUBMITTED_BY.toString());
				
			}
			
			if(LOAD_FILES_LOC != null){
				
					this.setProperty("LOAD_FILES_LOC", LOAD_FILES_LOC.toString());
				
			}
			
			if(OAUTH_BEARER_TOKEN != null){
				
					this.setProperty("OAUTH_BEARER_TOKEN", OAUTH_BEARER_TOKEN.toString());
				
			}
			
			if(RESOURCE_XPATH_USER_NATIVE != null){
				
					this.setProperty("RESOURCE_XPATH_USER_NATIVE", RESOURCE_XPATH_USER_NATIVE.toString());
				
			}
			
			if(REST_DATA_RESOURCE_XPATH != null){
				
					this.setProperty("REST_DATA_RESOURCE_XPATH", REST_DATA_RESOURCE_XPATH.toString());
				
			}
			
			if(REST_REQ_JSON != null){
				
					this.setProperty("REST_REQ_JSON", REST_REQ_JSON.toString());
				
			}
			
			if(REST_RESPONSE_SELF_HREF_VALUE != null){
				
					this.setProperty("REST_RESPONSE_SELF_HREF_VALUE", REST_RESPONSE_SELF_HREF_VALUE.toString());
				
			}
			
			if(REST_URL_AGGREGATES != null){
				
					this.setProperty("REST_URL_AGGREGATES", REST_URL_AGGREGATES.toString());
				
			}
			
			if(REST_URL_APPLICATIONS != null){
				
					this.setProperty("REST_URL_APPLICATIONS", REST_URL_APPLICATIONS.toString());
				
			}
			
			if(REST_URL_AUDIT_EVENTS != null){
				
					this.setProperty("REST_URL_AUDIT_EVENTS", REST_URL_AUDIT_EVENTS.toString());
				
			}
			
			if(REST_URL_AUDIT_REASON_CODES != null){
				
					this.setProperty("REST_URL_AUDIT_REASON_CODES", REST_URL_AUDIT_REASON_CODES.toString());
				
			}
			
			if(REST_URL_BASE != null){
				
					this.setProperty("REST_URL_BASE", REST_URL_BASE.toString());
				
			}
			
			if(REST_URL_CONTROLLERS != null){
				
					this.setProperty("REST_URL_CONTROLLERS", REST_URL_CONTROLLERS.toString());
				
			}
			
			if(REST_URL_DATA_CENTERS != null){
				
					this.setProperty("REST_URL_DATA_CENTERS", REST_URL_DATA_CENTERS.toString());
				
			}
			
			if(REST_URL_EMAIL_TYPES != null){
				
					this.setProperty("REST_URL_EMAIL_TYPES", REST_URL_EMAIL_TYPES.toString());
				
			}
			
			if(REST_URL_HOSTS != null){
				
					this.setProperty("REST_URL_HOSTS", REST_URL_HOSTS.toString());
				
			}
			
			if(REST_URL_MIGRATION_TIMES != null){
				
					this.setProperty("REST_URL_MIGRATION_TIMES", REST_URL_MIGRATION_TIMES.toString());
				
			}
			
			if(REST_URL_MST_EMAILTYPES != null){
				
					this.setProperty("REST_URL_MST_EMAILTYPES", REST_URL_MST_EMAILTYPES.toString());
				
			}
			
			if(REST_URL_NAS_VOLUMES != null){
				
					this.setProperty("REST_URL_NAS_VOLUMES", REST_URL_NAS_VOLUMES.toString());
				
			}
			
			if(REST_URL_QTREES != null){
				
					this.setProperty("REST_URL_QTREES", REST_URL_QTREES.toString());
				
			}
			
			if(REST_URL_SCHEDULES != null){
				
					this.setProperty("REST_URL_SCHEDULES", REST_URL_SCHEDULES.toString());
				
			}
			
			if(REST_URL_SHARES != null){
				
					this.setProperty("REST_URL_SHARES", REST_URL_SHARES.toString());
				
			}
			
			if(REST_URL_STORAGE != null){
				
					this.setProperty("REST_URL_STORAGE", REST_URL_STORAGE.toString());
				
			}
			
			if(REST_URL_SYS_CONFIG_PROPERTY_TYPES != null){
				
					this.setProperty("REST_URL_SYS_CONFIG_PROPERTY_TYPES", REST_URL_SYS_CONFIG_PROPERTY_TYPES.toString());
				
			}
			
			if(REST_URL_USER_CORPORATE != null){
				
					this.setProperty("REST_URL_USER_CORPORATE", REST_URL_USER_CORPORATE.toString());
				
			}
			
			if(REST_URL_USER_NATIVES != null){
				
					this.setProperty("REST_URL_USER_NATIVES", REST_URL_USER_NATIVES.toString());
				
			}
			
			if(REST_URL_USER_ROLES != null){
				
					this.setProperty("REST_URL_USER_ROLES", REST_URL_USER_ROLES.toString());
				
			}
			
			if(ROLE_LOOKUP_CSV != null){
				
					this.setProperty("ROLE_LOOKUP_CSV", ROLE_LOOKUP_CSV.toString());
				
			}
			
			if(TEST_ROW_COUNT_LIMIT != null){
				
					this.setProperty("TEST_ROW_COUNT_LIMIT", TEST_ROW_COUNT_LIMIT.toString());
				
			}
			
		}

		public String logDir;
		public String getLogDir(){
			return this.logDir;
		}
		
public String ADS_EMAIL_AUTHENTICATION_PASSWORD;
public String getADS_EMAIL_AUTHENTICATION_PASSWORD(){
	return this.ADS_EMAIL_AUTHENTICATION_PASSWORD;
}
public String ADS_EMAIL_AUTHENTICATION_USER;
public String getADS_EMAIL_AUTHENTICATION_USER(){
	return this.ADS_EMAIL_AUTHENTICATION_USER;
}
public String ADS_EMAIL_FROM;
public String getADS_EMAIL_FROM(){
	return this.ADS_EMAIL_FROM;
}
public String ADS_EMAIL_SMTP_NAME;
public String getADS_EMAIL_SMTP_NAME(){
	return this.ADS_EMAIL_SMTP_NAME;
}
public String ADS_EMAIL_SMTP_PORT;
public String getADS_EMAIL_SMTP_PORT(){
	return this.ADS_EMAIL_SMTP_PORT;
}
public String ADS_EMAIL_TO;
public String getADS_EMAIL_TO(){
	return this.ADS_EMAIL_TO;
}
		public String ADS_LOG_DIRECTORY;
		public String getADS_LOG_DIRECTORY(){
			return this.ADS_LOG_DIRECTORY;
		}
		
public String ADS_SETUP_LOADSHEET_APPLICATION_XLSX;
public String getADS_SETUP_LOADSHEET_APPLICATION_XLSX(){
	return this.ADS_SETUP_LOADSHEET_APPLICATION_XLSX;
}
public String ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX;
public String getADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX(){
	return this.ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX;
}
public String ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX;
public String getADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX(){
	return this.ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX;
}
public String ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX;
public String getADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX(){
	return this.ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX;
}
public String ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX;
public String getADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX(){
	return this.ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX;
}
public String ADS_SETUP_LOADSHEET_SCHEDULE_XLSX;
public String getADS_SETUP_LOADSHEET_SCHEDULE_XLSX(){
	return this.ADS_SETUP_LOADSHEET_SCHEDULE_XLSX;
}
public String ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX;
public String getADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX(){
	return this.ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX;
}
public String ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX;
public String getADS_SETUP_LOADSHEET_USER_NATIVES_XLSX(){
	return this.ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX;
}
public String ADS_SETUP_LOADSHEET_USER_ROLES_XLSX;
public String getADS_SETUP_LOADSHEET_USER_ROLES_XLSX(){
	return this.ADS_SETUP_LOADSHEET_USER_ROLES_XLSX;
}
public String ENV_CONTEXT_FILE;
public String getENV_CONTEXT_FILE(){
	return this.ENV_CONTEXT_FILE;
}
public String FORMAT_DATE_TO_STRING;
public String getFORMAT_DATE_TO_STRING(){
	return this.FORMAT_DATE_TO_STRING;
}
public String FORMAT_DATETIME_TO_STRING;
public String getFORMAT_DATETIME_TO_STRING(){
	return this.FORMAT_DATETIME_TO_STRING;
}
public String JOB_ID_XPATH;
public String getJOB_ID_XPATH(){
	return this.JOB_ID_XPATH;
}
public String JOB_NAME;
public String getJOB_NAME(){
	return this.JOB_NAME;
}
public String JOB_RUN_NAME;
public String getJOB_RUN_NAME(){
	return this.JOB_RUN_NAME;
}
public String JOB_SUBMITTED_BY;
public String getJOB_SUBMITTED_BY(){
	return this.JOB_SUBMITTED_BY;
}
		public String LOAD_FILES_LOC;
		public String getLOAD_FILES_LOC(){
			return this.LOAD_FILES_LOC;
		}
		
public String OAUTH_BEARER_TOKEN;
public String getOAUTH_BEARER_TOKEN(){
	return this.OAUTH_BEARER_TOKEN;
}
public String RESOURCE_XPATH_USER_NATIVE;
public String getRESOURCE_XPATH_USER_NATIVE(){
	return this.RESOURCE_XPATH_USER_NATIVE;
}
public String REST_DATA_RESOURCE_XPATH;
public String getREST_DATA_RESOURCE_XPATH(){
	return this.REST_DATA_RESOURCE_XPATH;
}
public String REST_REQ_JSON;
public String getREST_REQ_JSON(){
	return this.REST_REQ_JSON;
}
public String REST_RESPONSE_SELF_HREF_VALUE;
public String getREST_RESPONSE_SELF_HREF_VALUE(){
	return this.REST_RESPONSE_SELF_HREF_VALUE;
}
public String REST_URL_AGGREGATES;
public String getREST_URL_AGGREGATES(){
	return this.REST_URL_AGGREGATES;
}
public String REST_URL_APPLICATIONS;
public String getREST_URL_APPLICATIONS(){
	return this.REST_URL_APPLICATIONS;
}
public String REST_URL_AUDIT_EVENTS;
public String getREST_URL_AUDIT_EVENTS(){
	return this.REST_URL_AUDIT_EVENTS;
}
public String REST_URL_AUDIT_REASON_CODES;
public String getREST_URL_AUDIT_REASON_CODES(){
	return this.REST_URL_AUDIT_REASON_CODES;
}
public String REST_URL_BASE;
public String getREST_URL_BASE(){
	return this.REST_URL_BASE;
}
public String REST_URL_CONTROLLERS;
public String getREST_URL_CONTROLLERS(){
	return this.REST_URL_CONTROLLERS;
}
public String REST_URL_DATA_CENTERS;
public String getREST_URL_DATA_CENTERS(){
	return this.REST_URL_DATA_CENTERS;
}
public String REST_URL_EMAIL_TYPES;
public String getREST_URL_EMAIL_TYPES(){
	return this.REST_URL_EMAIL_TYPES;
}
public String REST_URL_HOSTS;
public String getREST_URL_HOSTS(){
	return this.REST_URL_HOSTS;
}
public String REST_URL_MIGRATION_TIMES;
public String getREST_URL_MIGRATION_TIMES(){
	return this.REST_URL_MIGRATION_TIMES;
}
public String REST_URL_MST_EMAILTYPES;
public String getREST_URL_MST_EMAILTYPES(){
	return this.REST_URL_MST_EMAILTYPES;
}
public String REST_URL_NAS_VOLUMES;
public String getREST_URL_NAS_VOLUMES(){
	return this.REST_URL_NAS_VOLUMES;
}
public String REST_URL_QTREES;
public String getREST_URL_QTREES(){
	return this.REST_URL_QTREES;
}
public String REST_URL_SCHEDULES;
public String getREST_URL_SCHEDULES(){
	return this.REST_URL_SCHEDULES;
}
public String REST_URL_SHARES;
public String getREST_URL_SHARES(){
	return this.REST_URL_SHARES;
}
public String REST_URL_STORAGE;
public String getREST_URL_STORAGE(){
	return this.REST_URL_STORAGE;
}
public String REST_URL_SYS_CONFIG_PROPERTY_TYPES;
public String getREST_URL_SYS_CONFIG_PROPERTY_TYPES(){
	return this.REST_URL_SYS_CONFIG_PROPERTY_TYPES;
}
public String REST_URL_USER_CORPORATE;
public String getREST_URL_USER_CORPORATE(){
	return this.REST_URL_USER_CORPORATE;
}
public String REST_URL_USER_NATIVES;
public String getREST_URL_USER_NATIVES(){
	return this.REST_URL_USER_NATIVES;
}
public String REST_URL_USER_ROLES;
public String getREST_URL_USER_ROLES(){
	return this.REST_URL_USER_ROLES;
}
public String ROLE_LOOKUP_CSV;
public String getROLE_LOOKUP_CSV(){
	return this.ROLE_LOOKUP_CSV;
}
public String TEST_ROW_COUNT_LIMIT;
public String getTEST_ROW_COUNT_LIMIT(){
	return this.TEST_ROW_COUNT_LIMIT;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "OCI_Load_Master";
	private final String projectName = "ADS_DATA_NO_GIT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				OCI_Load_Master.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(OCI_Load_Master.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tRunJob_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tRunJob_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_8", false);
		start_Hash.put("tRunJob_8", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_8";

	
		int tos_count_tRunJob_8 = 0;
		
    	class BytesLimit65535_tRunJob_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_8().limitLog4jByte();


 



/**
 * [tRunJob_8 begin ] stop
 */
	
	/**
	 * [tRunJob_8 main ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	
	java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_8.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_8.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_8.add("--father_node=tRunJob_8");
	      			
	        			paraList_tRunJob_8.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_8.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_8.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_8 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_8 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_8".equals(tRunJobName_tRunJob_8) && childResumePath_tRunJob_8 != null){
		paraList_tRunJob_8.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_8.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_8");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_8 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_8 = null;

	
		obj_tRunJob_8 = context.ENV_CONTEXT_FILE;
		paraList_tRunJob_8.add("--context_param ENV_CONTEXT_FILE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
		
		parentContextMap_tRunJob_8.put("ENV_CONTEXT_FILE", obj_tRunJob_8);
	
	
		ads_data_no_git.oci_load_1_hosts_0_1.OCI_Load_1_Hosts childJob_tRunJob_8 = new ads_data_no_git.oci_load_1_hosts_0_1.OCI_Load_1_Hosts();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_8) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_8 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_8 : talendDataSources_tRunJob_8
			        .entrySet()) {
	            dataSources_tRunJob_8.put(talendDataSourceEntry_tRunJob_8.getKey(),
	                    talendDataSourceEntry_tRunJob_8.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_8.setDataSources(dataSources_tRunJob_8);
	    }
		  
			childJob_tRunJob_8.parentContextMap = parentContextMap_tRunJob_8;
		  
		
		String[][] childReturn_tRunJob_8 = childJob_tRunJob_8.runJob((String[]) paraList_tRunJob_8.toArray(new String[paraList_tRunJob_8.size()]));
		
	  	
				errorCode = childJob_tRunJob_8.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_8.getErrorCode() == null){
				globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getStatus() != null && ("failure").equals(childJob_tRunJob_8.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getErrorCode());
		    }
		    if (childJob_tRunJob_8.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_8.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_8.getErrorCode() != null || ("failure").equals(childJob_tRunJob_8.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_8.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_8++;

/**
 * [tRunJob_8 main ] stop
 */
	
	/**
	 * [tRunJob_8 end ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 

ok_Hash.put("tRunJob_8", true);
end_Hash.put("tRunJob_8", System.currentTimeMillis());




/**
 * [tRunJob_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tRunJob_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_8 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_7", false);
		start_Hash.put("tRunJob_7", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_7";

	
		int tos_count_tRunJob_7 = 0;
		
    	class BytesLimit65535_tRunJob_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_7().limitLog4jByte();


 



/**
 * [tRunJob_7 begin ] stop
 */
	
	/**
	 * [tRunJob_7 main ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	
	java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_7.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_7.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_7.add("--father_node=tRunJob_7");
	      			
	        			paraList_tRunJob_7.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_7.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_7.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_7 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_7 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_7".equals(tRunJobName_tRunJob_7) && childResumePath_tRunJob_7 != null){
		paraList_tRunJob_7.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_7");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_7 = null;

	
		obj_tRunJob_7 = context.ENV_CONTEXT_FILE;
		paraList_tRunJob_7.add("--context_param ENV_CONTEXT_FILE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
		
		parentContextMap_tRunJob_7.put("ENV_CONTEXT_FILE", obj_tRunJob_7);
	
	
		ads_data_no_git.oci_load_2_storage_0_1.OCI_Load_2_Storage childJob_tRunJob_7 = new ads_data_no_git.oci_load_2_storage_0_1.OCI_Load_2_Storage();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_7) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_7 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_7 : talendDataSources_tRunJob_7
			        .entrySet()) {
	            dataSources_tRunJob_7.put(talendDataSourceEntry_tRunJob_7.getKey(),
	                    talendDataSourceEntry_tRunJob_7.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_7.setDataSources(dataSources_tRunJob_7);
	    }
		  
			childJob_tRunJob_7.parentContextMap = parentContextMap_tRunJob_7;
		  
		
		String[][] childReturn_tRunJob_7 = childJob_tRunJob_7.runJob((String[]) paraList_tRunJob_7.toArray(new String[paraList_tRunJob_7.size()]));
		
	  	
				errorCode = childJob_tRunJob_7.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_7.getErrorCode() == null){
				globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getStatus() != null && ("failure").equals(childJob_tRunJob_7.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getErrorCode());
		    }
		    if (childJob_tRunJob_7.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_7.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_7.getErrorCode() != null || ("failure").equals(childJob_tRunJob_7.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_7.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_7++;

/**
 * [tRunJob_7 main ] stop
 */
	
	/**
	 * [tRunJob_7 end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 

ok_Hash.put("tRunJob_7", true);
end_Hash.put("tRunJob_7", System.currentTimeMillis());




/**
 * [tRunJob_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tRunJob_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_7 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_6", false);
		start_Hash.put("tRunJob_6", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_6";

	
		int tos_count_tRunJob_6 = 0;
		
    	class BytesLimit65535_tRunJob_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_6().limitLog4jByte();


 



/**
 * [tRunJob_6 begin ] stop
 */
	
	/**
	 * [tRunJob_6 main ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	
	java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_6.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_6.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_6.add("--father_node=tRunJob_6");
	      			
	        			paraList_tRunJob_6.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_6.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null){
		paraList_tRunJob_6.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_6 = null;

	
		obj_tRunJob_6 = context.ENV_CONTEXT_FILE;
		paraList_tRunJob_6.add("--context_param ENV_CONTEXT_FILE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
		
		parentContextMap_tRunJob_6.put("ENV_CONTEXT_FILE", obj_tRunJob_6);
	
	
		ads_data_no_git.oci_load_3_datacenters_0_1.OCI_Load_3_DataCenters childJob_tRunJob_6 = new ads_data_no_git.oci_load_3_datacenters_0_1.OCI_Load_3_DataCenters();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_6) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
			        .entrySet()) {
	            dataSources_tRunJob_6.put(talendDataSourceEntry_tRunJob_6.getKey(),
	                    talendDataSourceEntry_tRunJob_6.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
	    }
		  
			childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;
		  
		
		String[][] childReturn_tRunJob_6 = childJob_tRunJob_6.runJob((String[]) paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));
		
	  	
				errorCode = childJob_tRunJob_6.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_6.getErrorCode() == null){
				globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getStatus() != null && ("failure").equals(childJob_tRunJob_6.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getErrorCode());
		    }
		    if (childJob_tRunJob_6.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_6.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_6.getErrorCode() != null || ("failure").equals(childJob_tRunJob_6.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_6.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_6++;

/**
 * [tRunJob_6 main ] stop
 */
	
	/**
	 * [tRunJob_6 end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 

ok_Hash.put("tRunJob_6", true);
end_Hash.put("tRunJob_6", System.currentTimeMillis());




/**
 * [tRunJob_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tRunJob_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_6 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_5", false);
		start_Hash.put("tRunJob_5", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_5";

	
		int tos_count_tRunJob_5 = 0;
		
    	class BytesLimit65535_tRunJob_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_5().limitLog4jByte();


 



/**
 * [tRunJob_5 begin ] stop
 */
	
	/**
	 * [tRunJob_5 main ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	
	java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_5.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_5.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_5.add("--father_node=tRunJob_5");
	      			
	        			paraList_tRunJob_5.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_5.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_5.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_5 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_5 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_5".equals(tRunJobName_tRunJob_5) && childResumePath_tRunJob_5 != null){
		paraList_tRunJob_5.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_5");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_5 = null;

	
		obj_tRunJob_5 = context.ENV_CONTEXT_FILE;
		paraList_tRunJob_5.add("--context_param ENV_CONTEXT_FILE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
		
		parentContextMap_tRunJob_5.put("ENV_CONTEXT_FILE", obj_tRunJob_5);
	
	
		ads_data_no_git.oci_load_4_controllers_0_1.OCI_Load_4_Controllers childJob_tRunJob_5 = new ads_data_no_git.oci_load_4_controllers_0_1.OCI_Load_4_Controllers();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_5) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
			        .entrySet()) {
	            dataSources_tRunJob_5.put(talendDataSourceEntry_tRunJob_5.getKey(),
	                    talendDataSourceEntry_tRunJob_5.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
	    }
		  
			childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;
		  
		
		String[][] childReturn_tRunJob_5 = childJob_tRunJob_5.runJob((String[]) paraList_tRunJob_5.toArray(new String[paraList_tRunJob_5.size()]));
		
	  	
				errorCode = childJob_tRunJob_5.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_5.getErrorCode() == null){
				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getStatus() != null && ("failure").equals(childJob_tRunJob_5.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getErrorCode());
		    }
		    if (childJob_tRunJob_5.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_5.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_5.getErrorCode() != null || ("failure").equals(childJob_tRunJob_5.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_5.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_5++;

/**
 * [tRunJob_5 main ] stop
 */
	
	/**
	 * [tRunJob_5 end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 

ok_Hash.put("tRunJob_5", true);
end_Hash.put("tRunJob_5", System.currentTimeMillis());




/**
 * [tRunJob_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tRunJob_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_5 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_4", false);
		start_Hash.put("tRunJob_4", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_4";

	
		int tos_count_tRunJob_4 = 0;
		
    	class BytesLimit65535_tRunJob_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_4().limitLog4jByte();


 



/**
 * [tRunJob_4 begin ] stop
 */
	
	/**
	 * [tRunJob_4 main ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	
	java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_4.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_4.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_4.add("--father_node=tRunJob_4");
	      			
	        			paraList_tRunJob_4.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_4.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null){
		paraList_tRunJob_4.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_4 = null;

	
		obj_tRunJob_4 = context.ENV_CONTEXT_FILE;
		paraList_tRunJob_4.add("--context_param ENV_CONTEXT_FILE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		
		parentContextMap_tRunJob_4.put("ENV_CONTEXT_FILE", obj_tRunJob_4);
	
	
		ads_data_no_git.oci_load_5_aggregates_0_1.OCI_Load_5_Aggregates childJob_tRunJob_4 = new ads_data_no_git.oci_load_5_aggregates_0_1.OCI_Load_5_Aggregates();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_4) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
			        .entrySet()) {
	            dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
	                    talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
	    }
		  
			childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
		  
		
		String[][] childReturn_tRunJob_4 = childJob_tRunJob_4.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));
		
	  	
				errorCode = childJob_tRunJob_4.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_4.getErrorCode() == null){
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
		    }
		    if (childJob_tRunJob_4.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_4.getErrorCode() != null || ("failure").equals(childJob_tRunJob_4.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_4.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_4++;

/**
 * [tRunJob_4 main ] stop
 */
	
	/**
	 * [tRunJob_4 end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 

ok_Hash.put("tRunJob_4", true);
end_Hash.put("tRunJob_4", System.currentTimeMillis());




/**
 * [tRunJob_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tRunJob_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_4 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
		int tos_count_tRunJob_3 = 0;
		
    	class BytesLimit65535_tRunJob_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_3().limitLog4jByte();


 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_3.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_3.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_3.add("--father_node=tRunJob_3");
	      			
	        			paraList_tRunJob_3.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_3 = null;

	
		obj_tRunJob_3 = context.ENV_CONTEXT_FILE;
		paraList_tRunJob_3.add("--context_param ENV_CONTEXT_FILE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		
		parentContextMap_tRunJob_3.put("ENV_CONTEXT_FILE", obj_tRunJob_3);
	
	
		ads_data_no_git.oci_load_6_nasvolumes_0_1.OCI_Load_6_NasVolumes childJob_tRunJob_3 = new ads_data_no_git.oci_load_6_nasvolumes_0_1.OCI_Load_6_NasVolumes();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_3) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
			        .entrySet()) {
	            dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
	                    talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
	    }
		  
			childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
		  
		
		String[][] childReturn_tRunJob_3 = childJob_tRunJob_3.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));
		
	  	
				errorCode = childJob_tRunJob_3.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_3.getErrorCode() == null){
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
		    }
		    if (childJob_tRunJob_3.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_3.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());




/**
 * [tRunJob_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRunJob_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
    	class BytesLimit65535_tRunJob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_2().limitLog4jByte();


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = context.ENV_CONTEXT_FILE;
		paraList_tRunJob_2.add("--context_param ENV_CONTEXT_FILE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		
		parentContextMap_tRunJob_2.put("ENV_CONTEXT_FILE", obj_tRunJob_2);
	
	
		ads_data_no_git.oci_load_7_qtrees_0_1.OCI_Load_7_QTrees childJob_tRunJob_2 = new ads_data_no_git.oci_load_7_qtrees_0_1.OCI_Load_7_QTrees();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_2.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tRunJob_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = context.ENV_CONTEXT_FILE;
		paraList_tRunJob_1.add("--context_param ENV_CONTEXT_FILE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		
		parentContextMap_tRunJob_1.put("ENV_CONTEXT_FILE", obj_tRunJob_1);
	
	
		ads_data_no_git.oci_load_8_shares_0_1.OCI_Load_8_Shares childJob_tRunJob_1 = new ads_data_no_git.oci_load_8_shares_0_1.OCI_Load_8_Shares();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ADS_DATA_NO_GIT_OCI_Load_Master = new byte[0];
    static byte[] commonByteArray_ADS_DATA_NO_GIT_OCI_Load_Master = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADS_DATA_NO_GIT_OCI_Load_Master.length) {
				if(length < 1024 && commonByteArray_ADS_DATA_NO_GIT_OCI_Load_Master.length == 0) {
   					commonByteArray_ADS_DATA_NO_GIT_OCI_Load_Master = new byte[1024];
				} else {
   					commonByteArray_ADS_DATA_NO_GIT_OCI_Load_Master = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADS_DATA_NO_GIT_OCI_Load_Master, 0, length);
			strReturn = new String(commonByteArray_ADS_DATA_NO_GIT_OCI_Load_Master, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADS_DATA_NO_GIT_OCI_Load_Master) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = context.ENV_CONTEXT_FILE;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.ENV_CONTEXT_FILE, "ISO-8859-15","=","\n",true,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row4 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row4 = new row4Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row4.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row4.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row4 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row4.key != null){
                          tmp_key_tContextLoad_1 = row4.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row4.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row4.key != null) {
                    key_tContextLoad_1 =
                        row4.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row4.value != null) {
                    value_tContextLoad_1 =
                        row4.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
				

                        System.out.println("tContextLoad_1 set key \"" + key_tContextLoad_1 + "\" with value \"" + currentValue_tContextLoad_1 + "\"");
  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "logDir".equals(key_tContextLoad_1))
        {
           context.logDir=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_EMAIL_AUTHENTICATION_PASSWORD".equals(key_tContextLoad_1))
        {
           context.ADS_EMAIL_AUTHENTICATION_PASSWORD=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_EMAIL_AUTHENTICATION_USER".equals(key_tContextLoad_1))
        {
           context.ADS_EMAIL_AUTHENTICATION_USER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_EMAIL_FROM".equals(key_tContextLoad_1))
        {
           context.ADS_EMAIL_FROM=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_EMAIL_SMTP_NAME".equals(key_tContextLoad_1))
        {
           context.ADS_EMAIL_SMTP_NAME=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_EMAIL_SMTP_PORT".equals(key_tContextLoad_1))
        {
           context.ADS_EMAIL_SMTP_PORT=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_EMAIL_TO".equals(key_tContextLoad_1))
        {
           context.ADS_EMAIL_TO=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_LOG_DIRECTORY".equals(key_tContextLoad_1))
        {
           context.ADS_LOG_DIRECTORY=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_APPLICATION_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_APPLICATION_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_SCHEDULE_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_SCHEDULE_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ADS_SETUP_LOADSHEET_USER_ROLES_XLSX".equals(key_tContextLoad_1))
        {
           context.ADS_SETUP_LOADSHEET_USER_ROLES_XLSX=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ENV_CONTEXT_FILE".equals(key_tContextLoad_1))
        {
           context.ENV_CONTEXT_FILE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "FORMAT_DATE_TO_STRING".equals(key_tContextLoad_1))
        {
           context.FORMAT_DATE_TO_STRING=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "FORMAT_DATETIME_TO_STRING".equals(key_tContextLoad_1))
        {
           context.FORMAT_DATETIME_TO_STRING=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "JOB_ID_XPATH".equals(key_tContextLoad_1))
        {
           context.JOB_ID_XPATH=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "JOB_NAME".equals(key_tContextLoad_1))
        {
           context.JOB_NAME=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "JOB_RUN_NAME".equals(key_tContextLoad_1))
        {
           context.JOB_RUN_NAME=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "JOB_SUBMITTED_BY".equals(key_tContextLoad_1))
        {
           context.JOB_SUBMITTED_BY=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "LOAD_FILES_LOC".equals(key_tContextLoad_1))
        {
           context.LOAD_FILES_LOC=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "OAUTH_BEARER_TOKEN".equals(key_tContextLoad_1))
        {
           context.OAUTH_BEARER_TOKEN=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "RESOURCE_XPATH_USER_NATIVE".equals(key_tContextLoad_1))
        {
           context.RESOURCE_XPATH_USER_NATIVE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_DATA_RESOURCE_XPATH".equals(key_tContextLoad_1))
        {
           context.REST_DATA_RESOURCE_XPATH=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_REQ_JSON".equals(key_tContextLoad_1))
        {
           context.REST_REQ_JSON=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_RESPONSE_SELF_HREF_VALUE".equals(key_tContextLoad_1))
        {
           context.REST_RESPONSE_SELF_HREF_VALUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_AGGREGATES".equals(key_tContextLoad_1))
        {
           context.REST_URL_AGGREGATES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_APPLICATIONS".equals(key_tContextLoad_1))
        {
           context.REST_URL_APPLICATIONS=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_AUDIT_EVENTS".equals(key_tContextLoad_1))
        {
           context.REST_URL_AUDIT_EVENTS=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_AUDIT_REASON_CODES".equals(key_tContextLoad_1))
        {
           context.REST_URL_AUDIT_REASON_CODES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_BASE".equals(key_tContextLoad_1))
        {
           context.REST_URL_BASE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_CONTROLLERS".equals(key_tContextLoad_1))
        {
           context.REST_URL_CONTROLLERS=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_DATA_CENTERS".equals(key_tContextLoad_1))
        {
           context.REST_URL_DATA_CENTERS=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_EMAIL_TYPES".equals(key_tContextLoad_1))
        {
           context.REST_URL_EMAIL_TYPES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_HOSTS".equals(key_tContextLoad_1))
        {
           context.REST_URL_HOSTS=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_MIGRATION_TIMES".equals(key_tContextLoad_1))
        {
           context.REST_URL_MIGRATION_TIMES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_MST_EMAILTYPES".equals(key_tContextLoad_1))
        {
           context.REST_URL_MST_EMAILTYPES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_NAS_VOLUMES".equals(key_tContextLoad_1))
        {
           context.REST_URL_NAS_VOLUMES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_QTREES".equals(key_tContextLoad_1))
        {
           context.REST_URL_QTREES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_SCHEDULES".equals(key_tContextLoad_1))
        {
           context.REST_URL_SCHEDULES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_SHARES".equals(key_tContextLoad_1))
        {
           context.REST_URL_SHARES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_STORAGE".equals(key_tContextLoad_1))
        {
           context.REST_URL_STORAGE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_SYS_CONFIG_PROPERTY_TYPES".equals(key_tContextLoad_1))
        {
           context.REST_URL_SYS_CONFIG_PROPERTY_TYPES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_USER_CORPORATE".equals(key_tContextLoad_1))
        {
           context.REST_URL_USER_CORPORATE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_USER_NATIVES".equals(key_tContextLoad_1))
        {
           context.REST_URL_USER_NATIVES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "REST_URL_USER_ROLES".equals(key_tContextLoad_1))
        {
           context.REST_URL_USER_ROLES=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ROLE_LOOKUP_CSV".equals(key_tContextLoad_1))
        {
           context.ROLE_LOOKUP_CSV=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "TEST_ROW_COUNT_LIMIT".equals(key_tContextLoad_1))
        {
           context.TEST_ROW_COUNT_LIMIT=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.ENV_CONTEXT_FILE) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());




/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final OCI_Load_Master OCI_Load_MasterClass = new OCI_Load_Master();

        int exitCode = OCI_Load_MasterClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = OCI_Load_Master.class.getClassLoader().getResourceAsStream("ads_data_no_git/oci_load_master_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("logDir", "id_Directory");
				
                context.logDir=(String) context.getProperty("logDir");
				    context.setContextType("ADS_EMAIL_AUTHENTICATION_PASSWORD", "id_String");
				
                context.ADS_EMAIL_AUTHENTICATION_PASSWORD=(String) context.getProperty("ADS_EMAIL_AUTHENTICATION_PASSWORD");
				    context.setContextType("ADS_EMAIL_AUTHENTICATION_USER", "id_String");
				
                context.ADS_EMAIL_AUTHENTICATION_USER=(String) context.getProperty("ADS_EMAIL_AUTHENTICATION_USER");
				    context.setContextType("ADS_EMAIL_FROM", "id_String");
				
                context.ADS_EMAIL_FROM=(String) context.getProperty("ADS_EMAIL_FROM");
				    context.setContextType("ADS_EMAIL_SMTP_NAME", "id_String");
				
                context.ADS_EMAIL_SMTP_NAME=(String) context.getProperty("ADS_EMAIL_SMTP_NAME");
				    context.setContextType("ADS_EMAIL_SMTP_PORT", "id_String");
				
                context.ADS_EMAIL_SMTP_PORT=(String) context.getProperty("ADS_EMAIL_SMTP_PORT");
				    context.setContextType("ADS_EMAIL_TO", "id_String");
				
                context.ADS_EMAIL_TO=(String) context.getProperty("ADS_EMAIL_TO");
				    context.setContextType("ADS_LOG_DIRECTORY", "id_Directory");
				
                context.ADS_LOG_DIRECTORY=(String) context.getProperty("ADS_LOG_DIRECTORY");
				    context.setContextType("ADS_SETUP_LOADSHEET_APPLICATION_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_APPLICATION_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_APPLICATION_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_SCHEDULE_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX");
				    context.setContextType("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX", "id_String");
				
                context.ADS_SETUP_LOADSHEET_USER_ROLES_XLSX=(String) context.getProperty("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX");
				    context.setContextType("ENV_CONTEXT_FILE", "id_String");
				
                context.ENV_CONTEXT_FILE=(String) context.getProperty("ENV_CONTEXT_FILE");
				    context.setContextType("FORMAT_DATE_TO_STRING", "id_String");
				
                context.FORMAT_DATE_TO_STRING=(String) context.getProperty("FORMAT_DATE_TO_STRING");
				    context.setContextType("FORMAT_DATETIME_TO_STRING", "id_String");
				
                context.FORMAT_DATETIME_TO_STRING=(String) context.getProperty("FORMAT_DATETIME_TO_STRING");
				    context.setContextType("JOB_ID_XPATH", "id_String");
				
                context.JOB_ID_XPATH=(String) context.getProperty("JOB_ID_XPATH");
				    context.setContextType("JOB_NAME", "id_String");
				
                context.JOB_NAME=(String) context.getProperty("JOB_NAME");
				    context.setContextType("JOB_RUN_NAME", "id_String");
				
                context.JOB_RUN_NAME=(String) context.getProperty("JOB_RUN_NAME");
				    context.setContextType("JOB_SUBMITTED_BY", "id_String");
				
                context.JOB_SUBMITTED_BY=(String) context.getProperty("JOB_SUBMITTED_BY");
				    context.setContextType("LOAD_FILES_LOC", "id_Directory");
				
                context.LOAD_FILES_LOC=(String) context.getProperty("LOAD_FILES_LOC");
				    context.setContextType("OAUTH_BEARER_TOKEN", "id_String");
				
                context.OAUTH_BEARER_TOKEN=(String) context.getProperty("OAUTH_BEARER_TOKEN");
				    context.setContextType("RESOURCE_XPATH_USER_NATIVE", "id_String");
				
                context.RESOURCE_XPATH_USER_NATIVE=(String) context.getProperty("RESOURCE_XPATH_USER_NATIVE");
				    context.setContextType("REST_DATA_RESOURCE_XPATH", "id_String");
				
                context.REST_DATA_RESOURCE_XPATH=(String) context.getProperty("REST_DATA_RESOURCE_XPATH");
				    context.setContextType("REST_REQ_JSON", "id_String");
				
                context.REST_REQ_JSON=(String) context.getProperty("REST_REQ_JSON");
				    context.setContextType("REST_RESPONSE_SELF_HREF_VALUE", "id_String");
				
                context.REST_RESPONSE_SELF_HREF_VALUE=(String) context.getProperty("REST_RESPONSE_SELF_HREF_VALUE");
				    context.setContextType("REST_URL_AGGREGATES", "id_String");
				
                context.REST_URL_AGGREGATES=(String) context.getProperty("REST_URL_AGGREGATES");
				    context.setContextType("REST_URL_APPLICATIONS", "id_String");
				
                context.REST_URL_APPLICATIONS=(String) context.getProperty("REST_URL_APPLICATIONS");
				    context.setContextType("REST_URL_AUDIT_EVENTS", "id_String");
				
                context.REST_URL_AUDIT_EVENTS=(String) context.getProperty("REST_URL_AUDIT_EVENTS");
				    context.setContextType("REST_URL_AUDIT_REASON_CODES", "id_String");
				
                context.REST_URL_AUDIT_REASON_CODES=(String) context.getProperty("REST_URL_AUDIT_REASON_CODES");
				    context.setContextType("REST_URL_BASE", "id_String");
				
                context.REST_URL_BASE=(String) context.getProperty("REST_URL_BASE");
				    context.setContextType("REST_URL_CONTROLLERS", "id_String");
				
                context.REST_URL_CONTROLLERS=(String) context.getProperty("REST_URL_CONTROLLERS");
				    context.setContextType("REST_URL_DATA_CENTERS", "id_String");
				
                context.REST_URL_DATA_CENTERS=(String) context.getProperty("REST_URL_DATA_CENTERS");
				    context.setContextType("REST_URL_EMAIL_TYPES", "id_String");
				
                context.REST_URL_EMAIL_TYPES=(String) context.getProperty("REST_URL_EMAIL_TYPES");
				    context.setContextType("REST_URL_HOSTS", "id_String");
				
                context.REST_URL_HOSTS=(String) context.getProperty("REST_URL_HOSTS");
				    context.setContextType("REST_URL_MIGRATION_TIMES", "id_String");
				
                context.REST_URL_MIGRATION_TIMES=(String) context.getProperty("REST_URL_MIGRATION_TIMES");
				    context.setContextType("REST_URL_MST_EMAILTYPES", "id_String");
				
                context.REST_URL_MST_EMAILTYPES=(String) context.getProperty("REST_URL_MST_EMAILTYPES");
				    context.setContextType("REST_URL_NAS_VOLUMES", "id_String");
				
                context.REST_URL_NAS_VOLUMES=(String) context.getProperty("REST_URL_NAS_VOLUMES");
				    context.setContextType("REST_URL_QTREES", "id_String");
				
                context.REST_URL_QTREES=(String) context.getProperty("REST_URL_QTREES");
				    context.setContextType("REST_URL_SCHEDULES", "id_String");
				
                context.REST_URL_SCHEDULES=(String) context.getProperty("REST_URL_SCHEDULES");
				    context.setContextType("REST_URL_SHARES", "id_String");
				
                context.REST_URL_SHARES=(String) context.getProperty("REST_URL_SHARES");
				    context.setContextType("REST_URL_STORAGE", "id_String");
				
                context.REST_URL_STORAGE=(String) context.getProperty("REST_URL_STORAGE");
				    context.setContextType("REST_URL_SYS_CONFIG_PROPERTY_TYPES", "id_String");
				
                context.REST_URL_SYS_CONFIG_PROPERTY_TYPES=(String) context.getProperty("REST_URL_SYS_CONFIG_PROPERTY_TYPES");
				    context.setContextType("REST_URL_USER_CORPORATE", "id_String");
				
                context.REST_URL_USER_CORPORATE=(String) context.getProperty("REST_URL_USER_CORPORATE");
				    context.setContextType("REST_URL_USER_NATIVES", "id_String");
				
                context.REST_URL_USER_NATIVES=(String) context.getProperty("REST_URL_USER_NATIVES");
				    context.setContextType("REST_URL_USER_ROLES", "id_String");
				
                context.REST_URL_USER_ROLES=(String) context.getProperty("REST_URL_USER_ROLES");
				    context.setContextType("ROLE_LOOKUP_CSV", "id_String");
				
                context.ROLE_LOOKUP_CSV=(String) context.getProperty("ROLE_LOOKUP_CSV");
				    context.setContextType("TEST_ROW_COUNT_LIMIT", "id_String");
				
                context.TEST_ROW_COUNT_LIMIT=(String) context.getProperty("TEST_ROW_COUNT_LIMIT");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("logDir")) {
                context.logDir = (String) parentContextMap.get("logDir");
            }if (parentContextMap.containsKey("ADS_EMAIL_AUTHENTICATION_PASSWORD")) {
                context.ADS_EMAIL_AUTHENTICATION_PASSWORD = (String) parentContextMap.get("ADS_EMAIL_AUTHENTICATION_PASSWORD");
            }if (parentContextMap.containsKey("ADS_EMAIL_AUTHENTICATION_USER")) {
                context.ADS_EMAIL_AUTHENTICATION_USER = (String) parentContextMap.get("ADS_EMAIL_AUTHENTICATION_USER");
            }if (parentContextMap.containsKey("ADS_EMAIL_FROM")) {
                context.ADS_EMAIL_FROM = (String) parentContextMap.get("ADS_EMAIL_FROM");
            }if (parentContextMap.containsKey("ADS_EMAIL_SMTP_NAME")) {
                context.ADS_EMAIL_SMTP_NAME = (String) parentContextMap.get("ADS_EMAIL_SMTP_NAME");
            }if (parentContextMap.containsKey("ADS_EMAIL_SMTP_PORT")) {
                context.ADS_EMAIL_SMTP_PORT = (String) parentContextMap.get("ADS_EMAIL_SMTP_PORT");
            }if (parentContextMap.containsKey("ADS_EMAIL_TO")) {
                context.ADS_EMAIL_TO = (String) parentContextMap.get("ADS_EMAIL_TO");
            }if (parentContextMap.containsKey("ADS_LOG_DIRECTORY")) {
                context.ADS_LOG_DIRECTORY = (String) parentContextMap.get("ADS_LOG_DIRECTORY");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_APPLICATION_XLSX")) {
                context.ADS_SETUP_LOADSHEET_APPLICATION_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_APPLICATION_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX")) {
                context.ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_AUDIT_EVENT_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX")) {
                context.ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_AUDIT_REASON_CODE_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX")) {
                context.ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_MIGRATION_TIME_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX")) {
                context.ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_MST_EMAIL_TYPE_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX")) {
                context.ADS_SETUP_LOADSHEET_SCHEDULE_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_SCHEDULE_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX")) {
                context.ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_SYS_CONFIG_PROPERTY_TYPE_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX")) {
                context.ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_USER_NATIVES_XLSX");
            }if (parentContextMap.containsKey("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX")) {
                context.ADS_SETUP_LOADSHEET_USER_ROLES_XLSX = (String) parentContextMap.get("ADS_SETUP_LOADSHEET_USER_ROLES_XLSX");
            }if (parentContextMap.containsKey("ENV_CONTEXT_FILE")) {
                context.ENV_CONTEXT_FILE = (String) parentContextMap.get("ENV_CONTEXT_FILE");
            }if (parentContextMap.containsKey("FORMAT_DATE_TO_STRING")) {
                context.FORMAT_DATE_TO_STRING = (String) parentContextMap.get("FORMAT_DATE_TO_STRING");
            }if (parentContextMap.containsKey("FORMAT_DATETIME_TO_STRING")) {
                context.FORMAT_DATETIME_TO_STRING = (String) parentContextMap.get("FORMAT_DATETIME_TO_STRING");
            }if (parentContextMap.containsKey("JOB_ID_XPATH")) {
                context.JOB_ID_XPATH = (String) parentContextMap.get("JOB_ID_XPATH");
            }if (parentContextMap.containsKey("JOB_NAME")) {
                context.JOB_NAME = (String) parentContextMap.get("JOB_NAME");
            }if (parentContextMap.containsKey("JOB_RUN_NAME")) {
                context.JOB_RUN_NAME = (String) parentContextMap.get("JOB_RUN_NAME");
            }if (parentContextMap.containsKey("JOB_SUBMITTED_BY")) {
                context.JOB_SUBMITTED_BY = (String) parentContextMap.get("JOB_SUBMITTED_BY");
            }if (parentContextMap.containsKey("LOAD_FILES_LOC")) {
                context.LOAD_FILES_LOC = (String) parentContextMap.get("LOAD_FILES_LOC");
            }if (parentContextMap.containsKey("OAUTH_BEARER_TOKEN")) {
                context.OAUTH_BEARER_TOKEN = (String) parentContextMap.get("OAUTH_BEARER_TOKEN");
            }if (parentContextMap.containsKey("RESOURCE_XPATH_USER_NATIVE")) {
                context.RESOURCE_XPATH_USER_NATIVE = (String) parentContextMap.get("RESOURCE_XPATH_USER_NATIVE");
            }if (parentContextMap.containsKey("REST_DATA_RESOURCE_XPATH")) {
                context.REST_DATA_RESOURCE_XPATH = (String) parentContextMap.get("REST_DATA_RESOURCE_XPATH");
            }if (parentContextMap.containsKey("REST_REQ_JSON")) {
                context.REST_REQ_JSON = (String) parentContextMap.get("REST_REQ_JSON");
            }if (parentContextMap.containsKey("REST_RESPONSE_SELF_HREF_VALUE")) {
                context.REST_RESPONSE_SELF_HREF_VALUE = (String) parentContextMap.get("REST_RESPONSE_SELF_HREF_VALUE");
            }if (parentContextMap.containsKey("REST_URL_AGGREGATES")) {
                context.REST_URL_AGGREGATES = (String) parentContextMap.get("REST_URL_AGGREGATES");
            }if (parentContextMap.containsKey("REST_URL_APPLICATIONS")) {
                context.REST_URL_APPLICATIONS = (String) parentContextMap.get("REST_URL_APPLICATIONS");
            }if (parentContextMap.containsKey("REST_URL_AUDIT_EVENTS")) {
                context.REST_URL_AUDIT_EVENTS = (String) parentContextMap.get("REST_URL_AUDIT_EVENTS");
            }if (parentContextMap.containsKey("REST_URL_AUDIT_REASON_CODES")) {
                context.REST_URL_AUDIT_REASON_CODES = (String) parentContextMap.get("REST_URL_AUDIT_REASON_CODES");
            }if (parentContextMap.containsKey("REST_URL_BASE")) {
                context.REST_URL_BASE = (String) parentContextMap.get("REST_URL_BASE");
            }if (parentContextMap.containsKey("REST_URL_CONTROLLERS")) {
                context.REST_URL_CONTROLLERS = (String) parentContextMap.get("REST_URL_CONTROLLERS");
            }if (parentContextMap.containsKey("REST_URL_DATA_CENTERS")) {
                context.REST_URL_DATA_CENTERS = (String) parentContextMap.get("REST_URL_DATA_CENTERS");
            }if (parentContextMap.containsKey("REST_URL_EMAIL_TYPES")) {
                context.REST_URL_EMAIL_TYPES = (String) parentContextMap.get("REST_URL_EMAIL_TYPES");
            }if (parentContextMap.containsKey("REST_URL_HOSTS")) {
                context.REST_URL_HOSTS = (String) parentContextMap.get("REST_URL_HOSTS");
            }if (parentContextMap.containsKey("REST_URL_MIGRATION_TIMES")) {
                context.REST_URL_MIGRATION_TIMES = (String) parentContextMap.get("REST_URL_MIGRATION_TIMES");
            }if (parentContextMap.containsKey("REST_URL_MST_EMAILTYPES")) {
                context.REST_URL_MST_EMAILTYPES = (String) parentContextMap.get("REST_URL_MST_EMAILTYPES");
            }if (parentContextMap.containsKey("REST_URL_NAS_VOLUMES")) {
                context.REST_URL_NAS_VOLUMES = (String) parentContextMap.get("REST_URL_NAS_VOLUMES");
            }if (parentContextMap.containsKey("REST_URL_QTREES")) {
                context.REST_URL_QTREES = (String) parentContextMap.get("REST_URL_QTREES");
            }if (parentContextMap.containsKey("REST_URL_SCHEDULES")) {
                context.REST_URL_SCHEDULES = (String) parentContextMap.get("REST_URL_SCHEDULES");
            }if (parentContextMap.containsKey("REST_URL_SHARES")) {
                context.REST_URL_SHARES = (String) parentContextMap.get("REST_URL_SHARES");
            }if (parentContextMap.containsKey("REST_URL_STORAGE")) {
                context.REST_URL_STORAGE = (String) parentContextMap.get("REST_URL_STORAGE");
            }if (parentContextMap.containsKey("REST_URL_SYS_CONFIG_PROPERTY_TYPES")) {
                context.REST_URL_SYS_CONFIG_PROPERTY_TYPES = (String) parentContextMap.get("REST_URL_SYS_CONFIG_PROPERTY_TYPES");
            }if (parentContextMap.containsKey("REST_URL_USER_CORPORATE")) {
                context.REST_URL_USER_CORPORATE = (String) parentContextMap.get("REST_URL_USER_CORPORATE");
            }if (parentContextMap.containsKey("REST_URL_USER_NATIVES")) {
                context.REST_URL_USER_NATIVES = (String) parentContextMap.get("REST_URL_USER_NATIVES");
            }if (parentContextMap.containsKey("REST_URL_USER_ROLES")) {
                context.REST_URL_USER_ROLES = (String) parentContextMap.get("REST_URL_USER_ROLES");
            }if (parentContextMap.containsKey("ROLE_LOOKUP_CSV")) {
                context.ROLE_LOOKUP_CSV = (String) parentContextMap.get("ROLE_LOOKUP_CSV");
            }if (parentContextMap.containsKey("TEST_ROW_COUNT_LIMIT")) {
                context.TEST_ROW_COUNT_LIMIT = (String) parentContextMap.get("TEST_ROW_COUNT_LIMIT");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRunJob_8Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_8) {
globalMap.put("tRunJob_8_SUBPROCESS_STATE", -1);

e_tRunJob_8.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : OCI_Load_Master");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     135453 characters generated by Talend Open Studio for Data Integration 
 *     on the March 23, 2018 12:49:56 PM EDT
 ************************************************************************************************/